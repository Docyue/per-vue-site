
        {
          "title": "2013年1月28日:少女时代林允儿",
          "link": "http://www.pernav.com/2013%e5%b9%b41%e6%9c%8828%e6%97%a5%e5%b0%91%e5%a5%b3%e6%97%b6%e4%bb%a3%e6%9e%97%e5%85%81%e5%84%bf/",
          "pubDate": "Mon, 28 Jan 2013 01:00:28 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://localhost/wordpress/?p=159"
          },
          "content:encoded": "<img src=\"http://farm9.staticflickr.com/8051/8422346646_546e35bbc2_z.jpg\"  alt=\"2013年1月28日\">

<img src=\"http://farm9.staticflickr.com/8374/8422356860_e3f12d39b8_z.jpg\" alt=\"2013年1月28日two\">",
          "wp:post_id": "159",
          "wp:post_date": "2013-01-28 09:00:28",
          "wp:post_date_gmt": "2013-01-28 01:00:28",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "2013%e5%b9%b41%e6%9c%8828%e6%97%a5%e5%b0%91%e5%a5%b3%e6%97%b6%e4%bb%a3%e6%9e%97%e5%85%81%e5%84%bf",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "beauty",
            "#cdata-section": "爱美人"
          }
        },
        {
          "title": "2013年1月29日:王珞丹",
          "link": "http://www.pernav.com/2013%e5%b9%b41%e6%9c%8829%e6%97%a5%e7%8e%8b%e7%8f%9e%e4%b8%b9/",
          "pubDate": "Tue, 29 Jan 2013 00:29:11 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://localhost/wordpress/?p=188"
          },
          "content:encoded": "<img src=\"http://farm9.staticflickr.com/8214/8425713912_3b3bf1c1f4_z.jpg\"  alt=\"2013年1月29日\">",
          "wp:post_id": "188",
          "wp:post_date": "2013-01-29 08:29:11",
          "wp:post_date_gmt": "2013-01-29 00:29:11",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "2013%e5%b9%b41%e6%9c%8829%e6%97%a5%e7%8e%8b%e7%8f%9e%e4%b8%b9",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "beauty",
            "#cdata-section": "爱美人"
          }
        },
        {
          "title": "心语：要走的东西，终究是拦不住的",
          "link": "http://www.pernav.com/%e5%bf%83%e8%af%ad%ef%bc%9a%e8%a6%81%e8%b5%b0%e7%9a%84%e4%b8%9c%e8%a5%bf%ef%bc%8c%e7%bb%88%e7%a9%b6%e6%98%af%e6%8b%a6%e4%b8%8d%e4%bd%8f%e7%9a%84-2/",
          "pubDate": "Wed, 30 Jan 2013 00:36:22 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://localhost/wordpress/?p=205"
          },
          "content:encoded": "1、如果在乎的没有那么多，想要的没有那么多，生活便会简单得很多。

2、我愿做一棵树，屹立在你必经的路上。我愿做一片云，替你抵挡烈日。我愿做一把伞，经受暴风骤雨。这就是爱情。

3、年少的时候，我觉得孤单是很酷的一件事。长大以后，我觉得孤单是很凄凉的一件事。现在，我觉得孤单不是一件事。

4、愿你成为这样的女子：不炫耀，不争吵，做一个博学的女子；不空洞，不浮躁，做一个丰盈的女子；即便生命枯竭，亦在优雅中变老。

5、也许有那么一个时侯，你忽然会觉得很绝望，觉得全世界都背弃了你，活着就是承担屈辱和痛苦。这个时候你要对自己说，没关系，很多人都是这样长大的。风平浪静的人生是中年以后的追求。当你尚在年少，你受的苦，吃的亏，担的责，扛的罪，忍的痛，到最后都会变成光，照亮你的路。

6、你不可能经由一个没有喜悦的旅程，而达到一个喜悦的终点。

7、人就是这样的吧。有时会闷闷不乐，有时会钻牛角尖，胡思乱想地感觉自己很悲惨。有时还会觉得自己心情特别好，无所不能，什么事情都能做。这两种心情都会有的。两者出现的概率差不多。时间就是在这样的反反复复当中过去的。

8、随缘不是听天由命，而是用豁达的心态去面对生活。

9、人生中从来没有假设、没有如果，人生中充满了机会，也充满了平平常常的小事情。假如你没有惊天动地的大事情可以做，那么就做一个小人物，给一个可爱的小孩做父母，给一对老人做孝顺的子女，给你的另一半一个简单幸福的人生。

10、在你最冷的时候，有人不顾自己寒冷抱着你，这就是幸福。

11、走到生命的哪一个阶段，都该喜欢那一段时光，完成那一阶段该完成的职责，顺生而行，不沉迷过去，不狂热地期待着未来，生命这样就好。不管正经历着怎样的挣扎与挑战，或许我们都只有一个选择：虽然痛苦，却依然要快乐，并相信未来。

12、我们总有这样的茫然时刻，风霜雪雨中，我提着自己的手提箱，问自己我要往哪去？该回去还是继续向前？此时，我们知道应该赶路，却不得不停下来，因为这一刻意义太重大，一念之间决定了我们以后的路。

13、一个人总有一天会明白，忌妒是无用的，而模仿他人无异于自杀。因为不论好坏，人只有自己才能帮助自己，只有耕种自己的田地，才能收获自家的玉米。

14、人们不解释的主要原因是根本不在乎对方的想法，无关重要的人，对无关重要的事有点儿误会，有什么关系。你信也好，不信也好，都于当事人生活毫无影响，何劳解释。

15、我们不怕目标定得高远，只怕没有追寻的勇气、热情和执著。只要心头时时燃烧着坚定的信念，一往无前地行进下去，就会惊讶地发现：很多所谓的远方其实并不遥远。

16、既然一事无成，那你还有什么好失去的，鼓起勇气面对一切难堪，打败它吧！只要不放弃一切幸福的信念，我相信，一定会有好事发生！——《姐姐立正向前走》

17、如果生活是一杯水，那么痛苦就是掉落杯中的灰尘。我们可以选择让心静下来，慢慢沉淀那些痛苦。如果总是不断地去搅和，痛苦就会充满我们的生活。

18、为什么我们总是不懂得珍惜眼前人？在未可预知的重逢里，我们以为总会重逢，总会有缘再会，总以为有机会说一声对不起，却从没想过每一次挥手道别，都可能是诀别，每一声叹息，都可能是人间最后的一声叹息。

19、当初你有胆量去选，同样该有勇气把后果承受。

20、爱情如此使人着迷，是不是正因为它是靠不住的？明知道它是水，是无根的，我们却用一双手和一双脚想要去拦住它。直到一天，当它翻起的波涛差点儿把我们淹没，我们才发现，即使再多出十双手和十双脚，要走的东西，终究是拦不住的。",
          "wp:post_id": "205",
          "wp:post_date": "2013-01-30 08:36:22",
          "wp:post_date_gmt": "2013-01-30 00:36:22",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "%e5%bf%83%e8%af%ad%ef%bc%9a%e8%a6%81%e8%b5%b0%e7%9a%84%e4%b8%9c%e8%a5%bf%ef%bc%8c%e7%bb%88%e7%a9%b6%e6%98%af%e6%8b%a6%e4%b8%8d%e4%bd%8f%e7%9a%84-2",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "%e5%bf%83%e8%af%ad",
            "#cdata-section": "心语"
          }
        },
        {
          "title": "心语：有些人，变成相片，堆在角落",
          "link": "http://www.pernav.com/%e5%bf%83%e8%af%ad%ef%bc%9a%e6%9c%89%e4%ba%9b%e4%ba%ba%ef%bc%8c%e5%8f%98%e6%88%90%e7%9b%b8%e7%89%87%ef%bc%8c%e5%a0%86%e5%9c%a8%e8%a7%92%e8%90%bd-2/",
          "pubDate": "Wed, 30 Jan 2013 00:37:37 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://localhost/wordpress/?p=207"
          },
          "content:encoded": "1、眼睛为她下着雨，心却为她打着伞，这就是爱情。

2、亲爱的自己，现在的付出，都会是一种沉淀，它们会默默铺路，只为让你成为更好的人。

3、一个男人，更像一个孩子，看起来再坚强，内心也是脆弱的，即使不能分担他的忧虑和痛苦，在他不够坚定的时候，也需要懂得鼓励和关爱。他们并不是无坚不摧，他们的软弱也需要有个地方安放。

4、一个人脾气好，不容易发火，不跟人过不去，不但对自己是幸福，也对他周围的人是幸福。相反，好发脾气，老跟人抬杠，喜欢挑人毛病的人，不但一辈子磕磕碰碰，他周围的人也受累。这个简单的道理，希望你能尽早领悟。

5、相信人，相信感情，相信善良的存在；要开朗，要坚韧，要温暖的活着。

6、没有很刻意的去想念你，因为我知道，遇到了就应该感恩，路过了就需要释怀。我只是在很多很多的小瞬间，想起你。比如一部电影，一首歌，一句歌词，一条马路和无数个闭上眼睛的瞬间。

7、一句我等你，不知道需要多大的勇气。它远比我爱你三个字，更需要勇气。不是每个人你都愿意等待，也不是所有人都值得你去等待。一句我等你，包含了很多的无奈，心酸，苦涩。或许是爱不到，或许是不能爱，无论怎样，我等你这个承诺，远比我爱你更动听。可是，有多少的爱情，经得起等待？

8、爱她，就不要给她乱想的机会。因为你永远不会知道，为你乱想的人是多么的爱你。

9、嫉妒是最坦白的认同。人们嫉恨你，很多时候是因为，你成为了他们最想要成为的那种人。虽然在情绪上，他们与你为敌，但在意识上，他们却与你有着相同的价值取向。

10、当你觉得某人神秘时，会被吸引；当你觉得某人浪漫时，会爱上；然而这都转瞬即逝。只有当你觉得某人成为习惯时，生活才开始。

11、很多女孩一旦被人感动了，就会迅速爱上对方。但一直想说，浪漫不是爱，嘘寒问暖不是爱，陪聊陪笑不是爱，那只是泡妞的手段。真正的爱，是牺牲了自己某一部分，来成全你，让你变的更好。所以，不要找一个可以感动你的人，而要找爱你的人。爱不是感动，而是成全。

12、因为爱过，所以知道寂寞的滋味；因为难过，所以会常常流泪；因为不想错过这一站的幸福，所以更加的珍惜你。

13、我们说过的话，做过的事，走过的路，遇过的人，每一个现在，都是我们以后的回忆。无须缅怀昨天，不必奢望明天，只要认真过好每个今天。说能说的话，做可做的事，走该走的路，见想见的人。脚踏实地，不漠视，不虚度，有缘无缘，一切随缘，保持一份好心情，就算心碎也要拥有最美的姿态。

14、学会欣赏别人，就是尊重自己；学会呵护别人，就是疼爱自己。

15、不要轻易说爱，也不要假装对我好，我很傻，会当真的。我更害怕痛过之后就不会觉得痛了，有的只会是一颗冷漠的心。对于感情的戏，我没演技。我情愿一个人习惯，习惯难受，习惯思念，习惯等你。

16、有些事，如果一开始错了，那么你即使花上所有的力量，也无法挽回了。

17、如果我爱你，只要知道你在哪里，知道你健康，知道这份感情并没增加负担，知道能在某一日见到你，就可以了。如果我爱你，就按照你认为安全舒服的方式，拥有你。

18、如果连梦都没了，那人生还有什么希望？我仍然愿意相信，一定会有那个人，他会紧紧牵着我的手，带我迎向那等了好久好久的幸福。

19、在起跑线不一样的爱情关系里，任何的解释都是不需要的。

20、有些人，变成相片，堆在角落，灰尘像雪一般冰冻。",
          "wp:post_id": "207",
          "wp:post_date": "2013-01-30 08:37:37",
          "wp:post_date_gmt": "2013-01-30 00:37:37",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "%e5%bf%83%e8%af%ad%ef%bc%9a%e6%9c%89%e4%ba%9b%e4%ba%ba%ef%bc%8c%e5%8f%98%e6%88%90%e7%9b%b8%e7%89%87%ef%bc%8c%e5%a0%86%e5%9c%a8%e8%a7%92%e8%90%bd-2",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "%e5%bf%83%e8%af%ad",
            "#cdata-section": "心语"
          }
        },
        {
          "title": "2013年1月30日:汤唯",
          "link": "http://www.pernav.com/2013%e5%b9%b41%e6%9c%8830%e6%97%a5%e6%b1%a4%e5%94%af/",
          "pubDate": "Wed, 30 Jan 2013 00:52:55 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://localhost/wordpress/?p=209"
          },
          "content:encoded": "<img src=\"http://farm9.staticflickr.com/8225/8427663125_17f8c17861_z.jpg\" alt=\"2013年1月30日\">",
          "wp:post_id": "209",
          "wp:post_date": "2013-01-30 08:52:55",
          "wp:post_date_gmt": "2013-01-30 00:52:55",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "2013%e5%b9%b41%e6%9c%8830%e6%97%a5%e6%b1%a4%e5%94%af",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "beauty",
            "#cdata-section": "爱美人"
          }
        },
        {
          "title": "心语：爱若无法抚慰彼此，便不过是喜欢而已",
          "link": "http://www.pernav.com/%e5%bf%83%e8%af%ad%ef%bc%9a%e7%88%b1%e8%8b%a5%e6%97%a0%e6%b3%95%e6%8a%9a%e6%85%b0%e5%bd%bc%e6%ad%a4%ef%bc%8c%e4%be%bf%e4%b8%8d%e8%bf%87%e6%98%af%e5%96%9c%e6%ac%a2%e8%80%8c%e5%b7%b2/",
          "pubDate": "Thu, 31 Jan 2013 02:39:33 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://localhost/wordpress/?p=211"
          },
          "content:encoded": "1、别妄想着倒带，这是生活，不是电影。

2、爱过、痛过、哭过，才知道，不是我的，我就不该要。

3、不追问也不想知道底细的时候，不是你已经超脱释然了，而是你已经彻底不爱了。

4、人的眼睛是由黑白两部分所组成的，可是神为什么要让人只能通过黑的部分去看东西？因为人生必须透过黑暗，才能看到光明。

5、每当欲望来时，人自会有一股贪、谗、倔、拗的怪异大力。既达既成既毕，接着来的是熟、烂、腻、烦，要抛开，非割绝不可，宁愿什么都没有。——木心

6、其实，我只希望我所爱的女人，平凡而孱弱，不必事事自己挡在前头，当有任何事情发生，都可以有人替她遮挡风雨，有人尽力照顾她，疼爱她。我只希望你可以从容幸福，跟你所爱的人，安宁地过完下半生。我不需要你勇敢，我只要你幸福。

7、做个开心的人，开心到别人看到你也会变得开心。

8、什么是女孩子真正的强大？不是美貌，不是才华，也不是装男人。而是在失落、悲伤、打击和孤独后能够迅速宁静下来的心，和备受伤害后依旧留存的那一点点温暖。真正需要强大的，不是你的外貌，而是你的心。

9、人类之所以有进步的主要原因是：下一代不听上一代的话。——倪匡

10、一个男人，可以不在你身上花钱，但是连心思都不愿意花，你还期待着什么？一个男人，对你不够坚定，请终止你的坚持。一个男人，对你漠不关心，请你关上你的心。一个男人，对你残忍，请你不要隐忍。你可以犯痴，不要犯贱。

11、有时候为一个人倾尽一切，也比不过别人什么都不做。

12、一般人不能感受趣味，大半因为心地太忙，不空所以不灵。你的心界愈空灵，你也愈不觉得物界喧嘈。我生平不怕呆人，也不怕聪明过度的人，只是对着没有趣味的人，要勉强同他说些应酬话，就觉得真苦。你对着有趣味的人，你并不必多谈话，只是漠然相对，心领神会，便可觉朋友中间的无上至乐。——朱光潜

13、别站在你的角度看我，你看不懂。

14、能干的人，不在情绪上计较，只在做事上认真；无能的人，不在做事上认真，只在情绪上计较。把脾气拿出来，那叫本能；把脾气压回去，才叫本事！

15、不论什么鞋，最重要的是合脚；不论什么样的姻缘，最美妙的是和谐。切莫只贪图鞋的华贵，而委屈了自己的脚。别人看到的是鞋，自己感受到的是脚。脚比鞋重要，这是一条真理，许许多多的人却常常忘记。

16、也许要越过青春，才能知道青春是多么自恋的一段时期。有时候想，爱情之所以要兜那么大圈子，付出惨烈代价，是因为它生不逢时。拥有它的时候我们缺乏智慧，等我们有智慧的时候，已经没有精力去谈一场纯粹的恋爱。

17、往事悠然一笑间，不必空忧。我们一路走来，只是为了告别往事，走入下一段风景。倘若让忧伤填补了生命的空白，就真的是亵渎了生命。

18、我们都不擅长表达，以至于我们习惯了揣测。去肯定，去否定，反反复复，后来我们就变得敏感而脆弱。

19、生命那么短，世界那么乱，我不想争吵，不想冷战，不愿和你有一秒遗憾。

20、爱若无法抚慰彼此，便不过是喜欢而已。
",
          "wp:post_id": "211",
          "wp:post_date": "2013-01-31 10:39:33",
          "wp:post_date_gmt": "2013-01-31 02:39:33",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "%e5%bf%83%e8%af%ad%ef%bc%9a%e7%88%b1%e8%8b%a5%e6%97%a0%e6%b3%95%e6%8a%9a%e6%85%b0%e5%bd%bc%e6%ad%a4%ef%bc%8c%e4%be%bf%e4%b8%8d%e8%bf%87%e6%98%af%e5%96%9c%e6%ac%a2%e8%80%8c%e5%b7%b2",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "%e5%bf%83%e8%af%ad",
            "#cdata-section": "心语"
          }
        },
        {
          "title": "心语：爱是藏不住的，闭上嘴巴，眼睛也会说出来",
          "link": "http://www.pernav.com/%e5%bf%83%e8%af%ad%ef%bc%9a%e7%88%b1%e6%98%af%e8%97%8f%e4%b8%8d%e4%bd%8f%e7%9a%84%ef%bc%8c%e9%97%ad%e4%b8%8a%e5%98%b4%e5%b7%b4%ef%bc%8c%e7%9c%bc%e7%9d%9b%e4%b9%9f%e4%bc%9a%e8%af%b4%e5%87%ba%e6%9d%a5/",
          "pubDate": "Thu, 31 Jan 2013 02:42:01 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://localhost/wordpress/?p=213"
          },
          "content:encoded": "1、爱是一种遇见，却无法预见。

2、没有不可治愈的伤痛，没有不能结束的沉沦，所有失去的，会以另一种方式归来。

3、恋人之间总会说很多无聊话，做一些无聊事。幸福就是有一个人陪你无聊，难得的是你们两个都不觉得无聊。

4、你唯一会认认真真读完一个人的日志和心情，想尽一切办法去了解的只有两个人。一个是你喜欢的人，另一个是你喜欢的人喜欢的人。

5、真正成功的人生，不在于成就的大小，不在于地位的高低，不在于金钱的多少，不在于名气的有无。而在于：是否努力地完成自我，喊出属于自己的声音，活出属于自己的活法，走出属于自己的道路。

6、挫折会来，也会过去，热泪会流下，也会收起，没有什么可以让你气馁的。

7、我想谈一场公开的恋情，爸妈同意、亲戚知道、朋友祝福的恋爱，如果可以，只谈一场，要么不开始，要么一辈子。

8、我所认为最深沉的爱，莫过于分开以后，我将自己，活成了你的样子。

9、一段不被接受的爱情，需要的不是伤心，而是时间，一段可以用来遗忘的时间。一颗被深深伤了的心，需要的不是同情，而是明白。

10、有人说：真正的爱情，背后没有秘密。说这话的人，既不明白爱情，也不明白秘密。

11、有些事情是不能告诉别人的，有些事情是不必告诉另人的，有些事情是根本没有办法告诉别人的，而且有些事情是：即使告诉了别人，你也马上会后悔的。所以，假使你够聪明，那么，最后的办法就是静下来，啃啮自己的寂寞，或者反过来说，让寂寞来吞噬你。

12、有时候，我们并非走出了伤痛，不过是学会了带着伤痛继续生活。

13、一见钟情这种事，浪漫但不一定长久。日久生情这种事，很难却更难分开。一见钟情永远和外貌有关，日久生情永远和习惯有关。越缓慢的爱上一个人，就爱的越长久。爱情可以有一瞬间，但真情却需时间浇灌。

14、不管爱情，还是友情，终极的目的不是归宿，而是理解、默契——是要找一个可以边走边谈的人，无论什么时候，无论怎样的心情。

15、爱的脚力不健，怕远。距离会漂淡彼此相思的颜色，假如有可能，就靠得近一点，再近一点，直到相互亲密无间。万万不要人为地以分离，考验它的强度，那你也许后悔莫及。尽量地创造并肩携手、天人合一的时光。

16、世界上既无所谓快乐或也无所谓痛苦；只有一种状况与另一种状况的比较，如此而已。

17、别人怎么看你，或者你自己如何地探测生活，都不重要。重要的是你必须要用一种真实的方式，度过在手指缝之间如雨水一样无法停止下落的时间，你要知道自己将会如何生活。——安妮宝贝

18、对喜欢的人，再无足轻重的小事，也可以讲得眉飞色舞；对不喜欢的人，在重要的事情也可以一笔带过。

19、我一生最奢侈的事，就是途中与你相遇，然后相濡以沫，共闻花香。

20、爱是藏不住的，闭上嘴巴，眼睛也会说出来。",
          "wp:post_id": "213",
          "wp:post_date": "2013-01-31 10:42:01",
          "wp:post_date_gmt": "2013-01-31 02:42:01",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "%e5%bf%83%e8%af%ad%ef%bc%9a%e7%88%b1%e6%98%af%e8%97%8f%e4%b8%8d%e4%bd%8f%e7%9a%84%ef%bc%8c%e9%97%ad%e4%b8%8a%e5%98%b4%e5%b7%b4%ef%bc%8c%e7%9c%bc%e7%9d%9b%e4%b9%9f%e4%bc%9a%e8%af%b4%e5%87%ba%e6%9d%a5",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "%e5%bf%83%e8%af%ad",
            "#cdata-section": "心语"
          }
        },
        {
          "title": "2013年1月31日:姚笛",
          "link": "http://www.pernav.com/2013%e5%b9%b41%e6%9c%8831%e6%97%a5%e5%a7%9a%e7%ac%9b/",
          "pubDate": "Thu, 31 Jan 2013 03:00:20 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://localhost/wordpress/?p=214"
          },
          "content:encoded": "<img src=\"http://farm9.staticflickr.com/8194/8430760123_c746e57e59_z.jpg\"  alt=\"2013年1月31日\">",
          "wp:post_id": "214",
          "wp:post_date": "2013-01-31 11:00:20",
          "wp:post_date_gmt": "2013-01-31 03:00:20",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "2013%e5%b9%b41%e6%9c%8831%e6%97%a5%e5%a7%9a%e7%ac%9b",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "beauty",
            "#cdata-section": "爱美人"
          }
        },
        {
          "title": "午后咖啡 ：Love is blind, hard to find, difficult to get, and impossible to forget",
          "link": "http://www.pernav.com/%e5%8d%88%e5%90%8e%e5%92%96%e5%95%a1%ef%bc%9a%e7%88%b1%ef%bc%8c%e5%be%88%e7%9b%b2%e7%9b%ae%ef%bc%8c%e5%be%88%e9%9a%be%e6%89%be%ef%bc%8c%e5%be%88%e9%9a%be%e5%be%97%ef%bc%8c%e5%be%88%e9%9a%be%e5%bf%98/",
          "pubDate": "Thu, 31 Jan 2013 03:20:12 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://localhost/wordpress/?p=218"
          },
          "content:encoded": "1、The meaning of life is to give life a meaning.
活着意义在于让你的生活变得有意义。

2、Distance is just a test to see how far love can travel.
距离是一种考验，为了看看爱到底能走多远。

3、Use your smile to change the world. Don’t let the world change your smile.
用你的笑容去改变这个世界，别让这个世界改变了你的笑容。

4、Do what makes you happy. Be with who makes you smile. Laugh as much as you breathe. Love as long as you live.
做那些让你开心的事，和总使你微笑的人共处，像呼吸般多笑，如生命般恒爱。

5、In life we all have an unspeakable secret, an irreversible regret, an unreachable dream and an unforgettable love.
人的一生，都有一些说不出的秘密，挽不回的遗憾，触不到的梦想，忘不了的爱。

6、Love is so strange: Sometimes it becomes the reason to live life and sometimes it becomes the reason to leave life.
爱情是如此矛盾：有时候它是人们过好生活的原因，有时候是人们逃避生活的理由。

7、 I know when to stop. I know when to let things go. I know when to move on. But “I know” is different from “I can”
我知道何时止步，何时放手，何时前行。但是，我“知道”不代表我“能够”。

8、I’m sorry. I know we fight, but who doesn’t? We aren’t perfect. We’re gonna fight sometimes. But I’m never going to stop loving you.
对不起，我知道我们总是争吵，但是谁不是呢？我们并非完人，也许有时会争吵，但我决不会停止爱你。

9、When you arise in the morning, think of what a precious privilege it is to be alive – to breathe, to think, to enjoy and to love.
当你在清晨醒来，想想活着是一种多么珍贵的权利：你还能呼吸，还能思考，还能享受，还能去爱。

10、 No matter how your heart is grieving, if you keep on believing, the dreams that you wish will come true.
不管心有多痛，若坚信不移，梦想总会成真。

11、Remember everything you have, and cherish it while you have it. Cause one day, you might wake up, and it will be gone.
铭记拥有的一切，珍惜它，趁你还拥有的时候。因为有一天，也许你醒来它就一去不复返了。

12、Everyone has spring, whether it is you, or me. Each person in the spring can laugh, have love, have drunk.
每个人都有春天，无论是你，或者是我。每个人在春天里都可以有欢笑，有爱情，有陶醉。

13、The scariest thing about distance is that you don’t know whether the person misses you or has forgotten you.
距离之所以可怕，因为根本不知道对方是把你想念还是把你忘记。

14、I’m grateful for the dark night coming. No matter how failed I am today, a new day remains to wait for my exertion.
感谢黑夜的来临，我知道今天不论有多失败，全新的明天仍然等待我来证明自己。

15、Your story may not have such a happy beginning, but that doesn’t make you who you are. It is the rest of your story, who you choose to be.
你的故事也许没有一个快乐的开始,可这并不能决定你的人生。你想要成为什么样的人，全看你自己的选择。

16、Good relations are like needles of clock, they only meet for sometime but always stay connected.
美好的感情就像钟表的指针，虽然只偶尔会面，却始终紧紧连在一起。

17、Love is, no matter what you resist, it is still to come. Love is, no matter how you down, it was a noble thing.
爱就是，无论你怎么抵挡，它还是要来的东西。爱就是，无论你怎么诋毁，它还是高尚的东西。

18、Every day may not be good, but there’s something good in every day.
也许不是每一天都那么美好，但每一天都会有一些美好的东西存在。

19、Life is a great big canvas, and you should throw all the paint on it you can.
人生是一幅大画布，你应该努力绘出绚丽多彩的画面。

20、Love is blind, hard to find, difficult to get, and impossible to forget.
爱，很盲目，很难找，很难得，很难忘。",
          "wp:post_id": "218",
          "wp:post_date": "2013-01-31 11:20:12",
          "wp:post_date_gmt": "2013-01-31 03:20:12",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "%e5%8d%88%e5%90%8e%e5%92%96%e5%95%a1%ef%bc%9a%e7%88%b1%ef%bc%8c%e5%be%88%e7%9b%b2%e7%9b%ae%ef%bc%8c%e5%be%88%e9%9a%be%e6%89%be%ef%bc%8c%e5%be%88%e9%9a%be%e5%be%97%ef%bc%8c%e5%be%88%e9%9a%be%e5%bf%98",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "%e5%92%96%e5%95%a1",
            "#cdata-section": "咖啡"
          },
          "wp:postmeta": {
            "wp:meta_key": "_edit_last",
            "wp:meta_value": "1"
          }
        },
        {
          "link": "http://www.pernav.com/957/",
          "pubDate": "Mon, 08 Dec 2014 02:15:20 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=957"
          },
          "content:encoded": " ",
          "wp:post_id": "957",
          "wp:post_date": "2014-12-08 10:15:20",
          "wp:post_date_gmt": "2014-12-08 02:15:20",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "957",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "7",
          "wp:post_type": "nav_menu_item",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "nav_menu",
            "-nicename": "pernav",
            "#cdata-section": "pernav"
          },
          "wp:postmeta": [
            { "wp:meta_key": "_menu_item_target" },
            {
              "wp:meta_key": "_menu_item_object",
              "wp:meta_value": "category"
            },
            {
              "wp:meta_key": "_menu_item_object_id",
              "wp:meta_value": "10"
            },
            {
              "wp:meta_key": "_menu_item_menu_item_parent",
              "wp:meta_value": "0"
            },
            {
              "wp:meta_key": "_menu_item_type",
              "wp:meta_value": "taxonomy"
            },
            {
              "wp:meta_key": "_menu_item_classes",
              "wp:meta_value": "a:1:{i:0;s:0:\"\";}"
            },
            { "wp:meta_key": "_menu_item_xfn" },
            { "wp:meta_key": "_menu_item_url" }
          ]
        },
        {
          "link": "http://www.pernav.com/958/",
          "pubDate": "Mon, 08 Dec 2014 02:15:20 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=958"
          },
          "content:encoded": " ",
          "wp:post_id": "958",
          "wp:post_date": "2014-12-08 10:15:20",
          "wp:post_date_gmt": "2014-12-08 02:15:20",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "958",
          "wp:status": "publish",
          "wp:post_parent": "10",
          "wp:menu_order": "8",
          "wp:post_type": "nav_menu_item",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "nav_menu",
            "-nicename": "pernav",
            "#cdata-section": "pernav"
          },
          "wp:postmeta": [
            {
              "wp:meta_key": "_menu_item_type",
              "wp:meta_value": "taxonomy"
            },
            {
              "wp:meta_key": "_menu_item_menu_item_parent",
              "wp:meta_value": "957"
            },
            {
              "wp:meta_key": "_menu_item_object_id",
              "wp:meta_value": "16"
            },
            {
              "wp:meta_key": "_menu_item_object",
              "wp:meta_value": "category"
            },
            { "wp:meta_key": "_menu_item_target" },
            {
              "wp:meta_key": "_menu_item_classes",
              "wp:meta_value": "a:1:{i:0;s:0:\"\";}"
            },
            { "wp:meta_key": "_menu_item_xfn" },
            { "wp:meta_key": "_menu_item_url" }
          ]
        },
        {
          "link": "http://www.pernav.com/959/",
          "pubDate": "Mon, 08 Dec 2014 02:15:20 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=959"
          },
          "content:encoded": " ",
          "wp:post_id": "959",
          "wp:post_date": "2014-12-08 10:15:20",
          "wp:post_date_gmt": "2014-12-08 02:15:20",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "959",
          "wp:status": "publish",
          "wp:post_parent": "7",
          "wp:menu_order": "9",
          "wp:post_type": "nav_menu_item",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "nav_menu",
            "-nicename": "pernav",
            "#cdata-section": "pernav"
          },
          "wp:postmeta": [
            {
              "wp:meta_key": "_menu_item_type",
              "wp:meta_value": "taxonomy"
            },
            {
              "wp:meta_key": "_menu_item_menu_item_parent",
              "wp:meta_value": "957"
            },
            {
              "wp:meta_key": "_menu_item_object_id",
              "wp:meta_value": "17"
            },
            {
              "wp:meta_key": "_menu_item_object",
              "wp:meta_value": "category"
            },
            { "wp:meta_key": "_menu_item_target" },
            {
              "wp:meta_key": "_menu_item_classes",
              "wp:meta_value": "a:1:{i:0;s:0:\"\";}"
            },
            { "wp:meta_key": "_menu_item_xfn" },
            { "wp:meta_key": "_menu_item_url" }
          ]
        },
        {
          "link": "http://www.pernav.com/1022/",
          "pubDate": "Fri, 19 Dec 2014 05:27:33 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=1022"
          },
          "content:encoded": " ",
          "wp:post_id": "1022",
          "wp:post_date": "2014-12-19 13:27:33",
          "wp:post_date_gmt": "2014-12-19 05:27:33",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "1022",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "5",
          "wp:post_type": "nav_menu_item",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "nav_menu",
            "-nicename": "pernav",
            "#cdata-section": "pernav"
          },
          "wp:postmeta": [
            {
              "wp:meta_key": "_menu_item_type",
              "wp:meta_value": "taxonomy"
            },
            {
              "wp:meta_key": "_menu_item_menu_item_parent",
              "wp:meta_value": "0"
            },
            {
              "wp:meta_key": "_menu_item_object_id",
              "wp:meta_value": "9"
            },
            {
              "wp:meta_key": "_menu_item_object",
              "wp:meta_value": "category"
            },
            { "wp:meta_key": "_menu_item_target" },
            {
              "wp:meta_key": "_menu_item_classes",
              "wp:meta_value": "a:1:{i:0;s:0:\"\";}"
            },
            { "wp:meta_key": "_menu_item_xfn" },
            { "wp:meta_key": "_menu_item_url" },
            {
              "wp:meta_key": "_wpas_done_all",
              "wp:meta_value": "1"
            }
          ]
        },
        {
          "link": "http://www.pernav.com/1023/",
          "pubDate": "Fri, 19 Dec 2014 05:27:33 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=1023"
          },
          "content:encoded": " ",
          "wp:post_id": "1023",
          "wp:post_date": "2014-12-19 13:27:33",
          "wp:post_date_gmt": "2014-12-19 05:27:33",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "1023",
          "wp:status": "publish",
          "wp:post_parent": "9",
          "wp:menu_order": "6",
          "wp:post_type": "nav_menu_item",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "nav_menu",
            "-nicename": "pernav",
            "#cdata-section": "pernav"
          },
          "wp:postmeta": [
            {
              "wp:meta_key": "_menu_item_type",
              "wp:meta_value": "taxonomy"
            },
            {
              "wp:meta_key": "_menu_item_menu_item_parent",
              "wp:meta_value": "1022"
            },
            {
              "wp:meta_key": "_menu_item_object_id",
              "wp:meta_value": "22"
            },
            {
              "wp:meta_key": "_menu_item_object",
              "wp:meta_value": "category"
            },
            { "wp:meta_key": "_menu_item_target" },
            {
              "wp:meta_key": "_menu_item_classes",
              "wp:meta_value": "a:1:{i:0;s:0:\"\";}"
            },
            { "wp:meta_key": "_menu_item_xfn" },
            { "wp:meta_key": "_menu_item_url" },
            {
              "wp:meta_key": "_wpas_done_all",
              "wp:meta_value": "1"
            }
          ]
        },
        {
          "title": "午后咖啡 ：Everything is going on, but don’t give up trying",
          "link": "http://www.pernav.com/%e5%8d%88%e5%90%8e%e5%92%96%e5%95%a1-%ef%bc%9aeverything-is-going-on-but-dont-give-up-trying/",
          "pubDate": "Thu, 31 Jan 2013 05:51:26 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://localhost/wordpress/?p=224"
          },
          "content:encoded": "1、It is not easy to meet each other in such a big world.
世界这么大，能遇见，不容易。

2、I sit at the that side, looking across the river gently your smile.
彼时我坐在天涯的那端，看着对岸轻轻微笑的你。

3、You live longer once you realize that any time spent being unhappy is wasted.
一旦你意识到，任何不快乐的时光都是浪费的时光，你会快乐的活更久。

4、In the arithmetic of love, one plus one equals everything, and two minus one equals nothing.
爱情的方程式：1+1=一切；2-1=0。

5、Pleasure and pain are the wealth of life, to escape its negative, as some of the face of courage, in fact, be able to recall a blessing.
快乐和痛苦都是人生的财富，与其消极的逃避，不如勇敢一些面对，其实能够回忆也是一种幸福。

6、Be alike flower. Spread beauty and happiness wherever you stay; irrespective of your surroundings.
像花儿一样，无论身在何处，不管周遭环境如何，都依然潇洒的绽放自己的美丽，活出自己的精彩。

7、Time goes by so fast, people go in and out of your life. You must never miss the opportunity to tell these people how much they mean to you.
时间在流逝，生命中人来人往。不要错失机会，告诉他们在你生命中的意义。

8、When every love comes to the end, if you look back, you will find flowers and sorrows, but it’s always beautiful.
每段爱情在走向终结时，倒带回去，一路上或花草鲜美，或落英缤纷，而最初总是倾心的。

9、Love is not about running into each other in crowds. Love is an impossible meeting. For example, I am a bird flying in sky, you are a leopard in forest. We just fall in love accidentally.
缘分不是人海中两个人的擦身，缘分是不可能的相遇。比如我是空中的鸟，你是林中的豹，只是我们碰巧相爱。

10、The fact is that the world is out of everyone’s expectation. But some learn to forget, but others insist.
事实上，这个世界不符合所有人的梦想。只是有人可以学会遗忘，有人却坚持。

11、Someone who really loves you sees what a mess you can be, how moody you get, how hard you are to handle. But still wants you in their life.
真正爱你的人见识过你的各种乱七八糟，各种情绪化，各种难搞，但却还是想要你留在他们的生命里。

12、Life ends when you stop dreaming. Hope ends when you stop believing. Love ends when you stop caring. Friendship ends when you stop sharing.
生命止于不再有梦，希望止于不再信仰。爱情止于不再在乎，友谊止于不再分享。

13、Every great dream begins with a dreamer. Always remember you have within you the strength, the patience, and the passion to reach for the stars and change the world.
每个伟大的梦想都起始于做梦的人。请记住要用内心的力量、耐心和热情去触碰梦想改变世界。

14、They say that time changes things, but you actually have to change them yourself. When “you” change, everything else changes.
人们总说时间能改变一切，但事实上我们必须靠自己去改变。自己变了，其他一切也才会变。

15、Don’t let your life slip through your fingers by living in the past or for the future. By living your life one day at a time, you live all the days of your life.
别让你的生命总在依恋过去种种或是寄望未来中逝去。如果你活在每个当下，你就活出了生命中的每一天。

16、Hope is the most exciting thing in life and if you honestly believe that love is out there, it will come.
怀抱希望是生活中最激动人心的事，如果你真的相信爱的存在，那它就会到来。

17、Meeting you was fate, becoming your friend was a choice, but falling in love with you was beyond my control.
遇见你是命运的安排，成为了朋友是我的选择，而爱上你是我无法控制的意外。

18、Everything in this world is just temporary, even bad days & sleepless nights.
这个世界上发生的每件事都只是暂时的。即使是糟糕的日子，失眠的夜晚。

19、Friendship doubles your joys, and divides your sorrows.
朋友的作用，就是让你快乐加倍，痛苦减半。

20、Everything is going on, but don’t give up trying.
万事随缘，但不要放弃努力。",
          "wp:post_id": "224",
          "wp:post_date": "2013-01-31 13:51:26",
          "wp:post_date_gmt": "2013-01-31 05:51:26",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "%e5%8d%88%e5%90%8e%e5%92%96%e5%95%a1-%ef%bc%9aeverything-is-going-on-but-dont-give-up-trying",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "%e5%92%96%e5%95%a1",
            "#cdata-section": "咖啡"
          }
        },
        {
          "title": "午后咖啡：For something, we can’t understand when we are young but by the time we understand, we are no longer young",
          "link": "http://www.pernav.com/%e5%8d%88%e5%90%8e%e5%92%96%e5%95%a1%ef%bc%9afor-something-we-cant-understand-when-we-are-young-but-by-the-time-we-understand-we-are-no-longer-young/",
          "pubDate": "Thu, 31 Jan 2013 06:00:57 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://localhost/wordpress/?p=230"
          },
          "content:encoded": "1、If you love someone, set them free.
爱一个人，就是让他自由自在的做他自己。

2、Life is like a beautiful melody, only the lyrics are messed up.
生命是首美丽的曲子，虽然歌词有些纠结。

3、There is no rehearsal in the life, once missing, it will be lost forever.
世界上没有破镜重圆之说，一旦失去，就意味着永远失去。

4、Life is not about waiting for the storm to pass, it’s about learning to dance in the rain.
生活不是等着暴风雨过去，而是学会在风雨中跳舞。

5、Good relationships don’t just happen. They take time, patience and two people who truly want to be together.
好的恋情不是偶然，它需要时间，耐心，和两个真正想在一起的人。

6、Life is like an ocean. You sit and watch tides of life change, not paying much attention, while time slowly drowns you.
人生像海洋。你坐观其潮涨潮落，不经意间，时间慢慢让你沉没。所以，要珍惜每朵小浪花。

7、The world is really small, like a turn around, do not know who you meet. The world is really big, like a turn around, do not know who lost.
世界真的很小，好像一转身，就不知道会遇见谁。世界真的很大，好像一转身，就不知道谁会消失。

8、Because Venus does not have a pair of arms and Cupid loves covering his eyes, people who are in love always cannot grab and see each other.
因为维纳斯没有双臂，丘比特喜欢蒙着眼睛，所以恋爱中的人常常抓不住对方，看不清自己。

9、Consider the bad times as down payment for the good times. Hang in there.
把坏日子当做好日子的首付吧，坚持就是胜利。

10、It doesn’t matter how good a person is; what matters is how well he treats you. Finding somebody who treats you well is the priority.
不是看一个人有多好，而是看他对你多好。找个对你好的，才是最重要的。

11、If someone hurts you, please continue good good, to enjoy life, hurt the same. One day, that person will be sorry to miss you.
如果有人伤害了你，请一如既往的善良美好，好好享受生活享受爱情，就像没受过伤一样。终有一天那个人会后悔错过你。

12、Life is full of ironies: it will make you understand happiness through sadness; appreciate tranquility through noise and value existence through absence.
生命真是充满讽刺。它用悲伤让你了解什么叫幸福，用噪音教会你欣赏寂静，用缺失来珍惜存在。

13、Never settle for being someone’s back-up plan. If you’re not their first plan, they don’t deserve you in the first place.
永远别做别人的备选，如果你不是他们的首选，那他们根本一开始就配不上你。

14、A heart can’t rest on another, a person pains deeper. No matter what you think, you must recognize it.
人最大的痛苦就是心灵没有归属，不管你知不知觉，承不承认。

15、As fruit needs not only sunshine but cold nights and chilling showers to ripen it, so character needs not only joy but trial and difficulty to mellow it.
水果的成熟不仅需要阳光，也需要凉夜和冷雨。人性格的陶冶不仅需要欢乐，也需要考验和困难。

16、 When you lose touch with your inner stillness, you lose touch with yourself. When you lose touch with yourself, you lose yourself in the world.
当你失去了内心的平静，便失去了自己。当你失去了自己，世界也会把你遗忘。

17、Life is like freshly fallen snow. Be careful where you walk because every step will show.
人生，就像一场新雪，谨慎的走好每一步，因为每次落脚都会留下痕迹。

18、 Take risks. If you win; you will be happy. If you lose; you will be wise.
冒险是值得的。如果赢了，你会得到快乐；如果输了，你会得到智慧。

19、The best way to predict the future is to create it.
预知未来最好的办法是创造未来。

20、For something, we can’t understand when we are young but by the time we understand, we are no longer young.
有些事情，当我们年轻的时候无法懂得，当我们懂得的时候已不再年轻。",
          "wp:post_id": "230",
          "wp:post_date": "2013-01-31 14:00:57",
          "wp:post_date_gmt": "2013-01-31 06:00:57",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "%e5%8d%88%e5%90%8e%e5%92%96%e5%95%a1%ef%bc%9afor-something-we-cant-understand-when-we-are-young-but-by-the-time-we-understand-we-are-no-longer-young",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "%e5%92%96%e5%95%a1",
            "#cdata-section": "咖啡"
          }
        },
        {
          "title": "心语：生命短暂，何苦重复昨天",
          "link": "http://www.pernav.com/%e5%bf%83%e8%af%ad%ef%bc%9a%e7%94%9f%e5%91%bd%e7%9f%ad%e6%9a%82%ef%bc%8c%e4%bd%95%e8%8b%a6%e9%87%8d%e5%a4%8d%e6%98%a8%e5%a4%a9/",
          "pubDate": "Fri, 01 Feb 2013 00:36:49 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://localhost/wordpress/?p=234"
          },
          "content:encoded": "1、别难过，我在这里，一直、始终、永远。

2、你以为放手可以成全我的幸福，可你不知道，我最大的幸福就是能和你手牵手。

3、你一定要等，不要失望，不要犹疑。这么大的世界，这么长的人生，总会有一个人让你想温柔的对待。

4、我喜欢在雪天雪地里与你同行，印下的是我们深深浅浅的经历，留下的是我们都心仪的美景，最重要的是，看到的是我们慢慢地由青丝到白头……

5、灵魂上的伴侣是时间累积出来的，不是你第一眼觉得他很帅，跟他看对眼了就觉得他可以成为你的灵魂伴侣，而是要在日常生活习惯的磨合，包括性格上的不断沟通，他才会成为你的灵魂伴侣。——范玮琪

6、我曾给过你闭上眼睛捂起耳朵的信任，就算全世界都说你有错，只要你否认，我就相信。

7、由男人的眼光看，一个太依赖的女人是可怜的，一个太独立的女人却是可怕的，和她们在一起生活都累。最好是既独立，又依赖，人格上独立，情感上依赖，这样的女人才是可爱的，和她一起生活既轻松又富有情趣。

8、得不到的并不是最好的。你已经得到，天长日久，他一直守候在你身边，你却依然渴望他，那才是最好的。

9、我不想要什么礼物，只是想，当我需要你时，你能在身边，当我说话时，你能用心听，当我难过时，你能给我一个拥抱。一切礼物都比不上这些。

10、中国乡下人有句老话，送人一斗米是恩人，送人一担米是仇人。帮朋友的忙，正在他困难中救济一下，他永远感激，但帮助太多了，他永不满足。往往对好朋友，自己付出了很大的恩惠，而结果反对自己的，正是那些得过你的恩惠的人。一个人的失败，往往失败在最信任、最亲近的人身上。——南怀瑾

11、总有一些事情，让你在不经意中，就看清了一些人。

12、从我遇见你的那一天起，我就在心里恳求你，如果生活是一条单行道，就请你从此走在我的前面，让我时时可以看到你；如果生活是一条双行道，就请你让我牵着你的手，穿行在茫茫人海里，永远不会走丢。

13、所谓爱情，就是有那么一个人，可以轻易控制你的情绪，前一刻让你哭，下一刻又让你笑。

14、相爱很难，吓走一颗心却很易。你试着处处想拥有他的一切，他自会忽然害怕失去一切，向往自己自在的天地，因为他是个独立的生物。为着想有太多的爱而失去爱，真是讽刺的爱情现象，却又每日发生，沦为不够资格见报的真人真事。

15、把一段一段的爱情当成人生道路上的指引者，一次失败，也是一次成长。这样来看，失败的爱情或许不再可怕。

16、要做这样的女子：面若桃花、心深似海、冷暖自知、真诚善良、触觉敏锐、情感丰富、坚忍独立、缱绻决绝。坚持读书、写字、听歌、旅行、上网、摄影，有时唱歌、跳舞、打扫、烹饪、约会、狂欢。

17、所谓一个人的长大，也便是敢于惨烈地面对自己：在选择前，有一张真诚坚定的脸；在选择后，有一颗绝不改变的心。

18、这一生里，爱我和我爱的，无论他们给我的是快乐还是痛苦，都是来度我的，使我觉悟无常，也使我明白世间的悲欢离合。最难舍的，终究是情。明知道万有皆空，却还是禁不住依依回首这片红尘里的那一场相遇。心中有不舍的人，是多么心碎的幸福。——张小娴

19、有些伤痛，何可言、何能言、何处言、何时言；有些秘密，不可说、不能说、不必说、不须说。

20、生命短暂，何苦重复昨天。",
          "wp:post_id": "234",
          "wp:post_date": "2013-02-01 08:36:49",
          "wp:post_date_gmt": "2013-02-01 00:36:49",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "%e5%bf%83%e8%af%ad%ef%bc%9a%e7%94%9f%e5%91%bd%e7%9f%ad%e6%9a%82%ef%bc%8c%e4%bd%95%e8%8b%a6%e9%87%8d%e5%a4%8d%e6%98%a8%e5%a4%a9",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "%e5%bf%83%e8%af%ad",
            "#cdata-section": "心语"
          }
        },
        {
          "title": "心语：愿你最爱的人，也最爱你",
          "link": "http://www.pernav.com/%e5%bf%83%e8%af%ad%ef%bc%9a%e6%84%bf%e4%bd%a0%e6%9c%80%e7%88%b1%e7%9a%84%e4%ba%ba%ef%bc%8c%e4%b9%9f%e6%9c%80%e7%88%b1%e4%bd%a0/",
          "pubDate": "Fri, 01 Feb 2013 00:37:41 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://localhost/wordpress/?p=236"
          },
          "content:encoded": "1、沉默，可以让混乱的心，变得清澈。

2、感情的债，和时光的海一样，都是我们越不过的东西。

3、什么都不用去想，只听从自己心中的想法，而我永远在你一回头就见到的地方。

4、你有信仰就年轻，有疑惑就年老；有自信就年轻，有畏惧就年老；有希望就年轻，有绝望就年老。岁月刻蚀的不过是你的肌肤，但如果失去了热枕，你的灵魂就不在年轻。——麦克阿瑟

5、但凡优秀之人，皆有某段沉默的时光。困苦不抱怨，孤寂不责难，不断地努力攀登，终会在黑暗之夜，寻找到绚丽的盛开。有些人生与自我，既可用来战胜，更是用来相处的。命运的精彩，不只在轰烈之间，那些平淡与安静，亦是心灵的另一种力量。

6、与其诅咒黑暗，不如燃起蜡烛。没有人能给你光明，除了你自己。

7、品德是无法伪造的，也无法像衣服一样随兴地穿上，或脱下来丢在一旁。就像木头的纹路，源自树木的中心，品德的成长与发育也需要时间和滋养。也因此，我们日复一日地写下自身的命运，因为我们的所为毫不留情地决定我们的命运。我相信这就是人生的最高逻辑和法则。

8、一个人若是没有苦难的经历，就不容易对他人给予同情。一个人若是没有幸福的感受，就不容易对事物抱有感恩的心情。

9、光阴蹉跎，世界喧嚣，我自己要警惕，在人生旅途上保持一份童趣和闲心是不容易的。如果哪一天我只是埋头于人生中的种种事务，不再有兴致扒在车窗旁看沿途的风光，倾听内心的音乐，那时候我就真正老了俗了，那样便辜负了人生这一趟美好的旅行。——周国平

10、痛则大哭，喜则大笑，只要是从心底流露出的对世界的真情感，都是生命之壁的摩崖石刻，经得起岁月风雨的推敲，值得我们久久珍爱。

11、做一个淡然女子，飘忽人际中，置身世相外，拒万般诱惑，赢一人之心；做一个静默女子，浅笑去千愁，轻语醉春秋，虽不善言辞，亦自成风景；做一个浓情女子，寂时似禅定，情开如烈火，爱就梦一场，别恨只道无；做一个寒梅女子，只为暖冬，无意争春，惟愿走过，不求来过。

12、一个人的美，即使无所衬托也静静地胜出，大概这就是所谓的绝色了。——林青霞

13、好男人的浪漫，是风雨无阻的接送你上下班，是悄悄而从不解释的往你皮夹里塞钱，是你生病时拿着药丸和水虎视眈眈看你吞下去，是吃饭时不用问却能点满一桌你爱吃的东西，是晚上睡觉时悄悄帮你盖好被子。不用甜言蜜语和赌咒发誓。好男人不用开口，就可以浪漫满屋。——陆琪

14、幸福五大原则：心中无恨；脑中无忧；生活简单；多些付出；少些期待。

15、你以为不可失去的男人，原来并非不可失去。你流干了眼泪 自有另一人逗你欢笑，你伤心欲绝，然后发现不爱你的人，不值得你为他伤心。每个失恋者都曾经凄然说过：我不会再这么爱一个人了。今天回首，何尝不是喜剧？情尽时 自有另一番新世界，所有的悲哀也不过是历史。——张小娴

16、心疼，不是在你离开，而是当你再次出现。

17、不是你必须说全部密码给我知道， 而是即使全部都不知道我都确定你不会犯错。安全感不是吵架时候你拉着我搂着我， 而是即使冷战我都清楚知道你不会放走我。安全感就是我心甘情愿地全心信任你，同时你能毫无保留忠诚地珍惜我的信任。

18、在记忆里，有一些瞬间，经历时没什么特别，回想时，却胜过千言万语。

19、你是否和我一样，有时候会想，如果过去的人生的某个环节发生一点点变化，是否现在的自己是另外一个模样。

20、愿你最爱的人，也最爱你。愿你确定爱着的人，也确定爱着你。愿你珍惜爱你的人，也愿他们的爱，值得你珍惜。愿每个人生命中最爱的人，会最早出现。愿每个人生命中最早出现的人，会是最爱的人。愿你的爱情，只有喜悦与幸福，没有悲伤与愧疚。——痞子蔡《懈寄生》",
          "wp:post_id": "236",
          "wp:post_date": "2013-02-01 08:37:41",
          "wp:post_date_gmt": "2013-02-01 00:37:41",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "%e5%bf%83%e8%af%ad%ef%bc%9a%e6%84%bf%e4%bd%a0%e6%9c%80%e7%88%b1%e7%9a%84%e4%ba%ba%ef%bc%8c%e4%b9%9f%e6%9c%80%e7%88%b1%e4%bd%a0",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "%e5%bf%83%e8%af%ad",
            "#cdata-section": "心语"
          }
        },
        {
          "title": "2013年2月1日:田馥甄（Hebe）",
          "link": "http://www.pernav.com/2013%e5%b9%b42%e6%9c%881%e6%97%a5%ef%bc%9a/",
          "pubDate": "Fri, 01 Feb 2013 01:13:06 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://localhost/wordpress/?p=297"
          },
          "content:encoded": "<img src=\"http://farm9.staticflickr.com/8362/8434445372_f6d50c6b37_z.jpg\" alt=\"2013年2月1日\">",
          "wp:post_id": "297",
          "wp:post_date": "2013-02-01 09:13:06",
          "wp:post_date_gmt": "2013-02-01 01:13:06",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "2013%e5%b9%b42%e6%9c%881%e6%97%a5%ef%bc%9a",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "beauty",
            "#cdata-section": "爱美人"
          }
        },
        {
          "title": "午后咖啡：Being strong doesn’t mean having a stony heart, but having a smile through the tears",
          "link": "http://www.pernav.com/%e5%8d%88%e5%90%8e%e5%92%96%e5%95%a1%ef%bc%9abeing-strong-doesnt-mean-having-a-stony-heart-but-having-a-smile-through-the-tears/",
          "pubDate": "Fri, 01 Feb 2013 06:39:26 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://localhost/wordpress/?p=306"
          },
          "content:encoded": "1、Don’t let your dreams be dreams.
不要让你的梦想只是想想而已。

2、Wish my smile clear off the sky of all days.
希望我的笑可以晴朗所有的天。

3、A good laugh and a long sleep are the best cures, in the doctor’s book.
医书里说有两样东西，是最好的灵丹妙药：一个是开心的笑容，一个是睡个饱觉。

4、Some women are the brands that you are not able to afford, though they are like clothes.
就算女人如衣服，有些女人也是你穿不起的牌子。

5、Life’s too short to worry about what people may think or talk about you, do what you want to do and be happy.
人生苦短，无谓去担心别人怎么想你，怎么说你，做你自己想做的，快乐一点。

6、People will lie to you, for you to learn that, sometimes, the one who you can always believe in is yourself.
人们常常会欺骗你，是为了让你明白，有时候，你唯一应该相信的人就是你自己。

7、A sad thing in life is when you meet someone who means a lot to you, only to find out in the end that it was never meant to be, and you just have to let go.
生命中令人悲伤的一件事是，你遇到了一个对你来说很重要的人，但却最终发现你们有缘无份，因此你不得不放手。

8、Everybody wants happiness. No one wants pain. But how can you make a rainbow without a little rain?
所有人都想得到幸福，不愿承担痛苦，但是不下点小雨，哪来的彩虹？

9、Nobody can go back and start a new beginning, but anyone can start today and make a new ending.
没有人可以回到过去重新开始，但谁都可以从现在开始，书写一个截然不同的将来。

10、A true friend is someone who accepts your past, supports your present and encourages your future.
真正的朋友会接受你的过去，力挺你的现在，鼓舞你的将来！

11、Life is like a book. Every day is a new page, every month is a new chapter, and every year is a new series.
生命就像一本书，每一天都是新的一页，每个月都是新的一章，而每一年都是新的一系列。

12、 Hope is wishing something would happen. Faith is believing it will happen. Courage is making it happen.
愿望是希望某事发生。信念是相信它会发生。勇气是让它发生。

13、One should be gentle but unyielding; in the midst of quietness, one should be strong and unhurried.
温柔要有，但不是妥协，我们要在安静中，不慌不忙的坚强。

14、Love does not consist in gazing at each other, but in looking outward together in the same direction.
爱不是彼此凝视，而是一起注视着同一个方向。

15、Dance as though no one is watching you; Love as though you have never been hurt before; Sing as though no one can hear you; Live as though heaven is on earth.
跳舞吧，就像没有人欣赏一样，去爱吧，就像没有受过伤害一样，唱歌吧，就像没有人倾听一样，生活吧，就像今天是末日一样。

16、 Past is experience, present is experiment, and future is expectation. Use your experience for your experiments to achieve your expectation.
过去是经历，现在是尝试，未来是期待。用经历尝试就会达到你的期待。

17、Life is like a cup of tea. It won’t be bitter for a lifetime but for a short while anyway.
人生就像一杯茶，不会苦一辈子，但总会苦一阵子。

18、No matter how complicated your life is, you have to maintain your elegance.
不论生活如何复杂，总要保持自己的那一份优雅。

19、In order to be irreplaceable, one must always be different.
要不可替代，就要与众不同。

20、Being strong doesn’t mean having a stony heart, but having a smile through the tears.
坚强不是心变硬，是泪在打转还能笑。",
          "wp:post_id": "306",
          "wp:post_date": "2013-02-01 14:39:26",
          "wp:post_date_gmt": "2013-02-01 06:39:26",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "%e5%8d%88%e5%90%8e%e5%92%96%e5%95%a1%ef%bc%9abeing-strong-doesnt-mean-having-a-stony-heart-but-having-a-smile-through-the-tears",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "%e5%92%96%e5%95%a1",
            "#cdata-section": "咖啡"
          }
        },
        {
          "title": "午后咖啡：Still waters run deep",
          "link": "http://www.pernav.com/%e5%8d%88%e5%90%8e%e5%92%96%e5%95%a1%ef%bc%9astill-waters-run-deep/",
          "pubDate": "Fri, 01 Feb 2013 06:40:52 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://localhost/wordpress/?p=308"
          },
          "content:encoded": "1、There are no shortcuts to any place worth going.
任何值得去的地方，都没有捷径。

2、We all walk in the dark, and each of us must learn to turn on his or her own light.
我们都行走于黑暗之中，要学会去点亮自己的灯火。

3、Life doesn’t just happen to you; you receive everything in your life based on what you’ve given.
一切发生的在你身上的都不是碰巧。你获得什么，在于你付出了什么。

4、Love doesn’t make your world more colorful. It just opens your eyes to what you couldn’t see before.
爱情并不能把你的世界变得多姿多彩，它只能把你带到一个不同于以往的世界。

5、One who thinks he can live without others is mistaken. One who thinks others cannot live without him is more mistaken.
如果认为自己不需要任何人也可以生活，你错了。如果认为别人没有你不能生活，你更是错了。

6、Be truthful. Do what you know is right, put forth effort when it is called for and persist. The more you do so, the more easily you’ll be able to do so.
要坦诚，要做你认为对的事，当有需要时便应奋力而为，并坚持到底。你越是这样，越会觉得游刃有余。

7、Dream what you want to dream, go where you want to go, be what you want to be. Because you have only one life and one chance to do all the things you want to do.
做你想做的梦，去你想去的地方，成为你想成为的人。因为你只有一次生命，只有一个机会去做你想做的事。

8、Lives are full of choice and contradictions, and please do look inside your heart and try to get the most precious one.
生活中总是充满了选择和矛盾，请一定要审视一下自己的内心，去争取那最珍贵的东西。

9、The most amazing things in life tend to happen right at the moment you’re about to give up hope.
生活中最神奇的事，往往发生在你准备放弃希望的那一刻。

10、Don’t run through life so fast that you forget not only where you’ve been, but also where you are going.
莫要匆匆忙忙地度过你的一生，那匆忙让你忘了曾经到过哪里，也让你忘了你要去哪里。

11、If something’s meant to happen, it will happen… Right time, right person, and for the best reason.
注定要发生的事，就一定会发生。在对的时间，和对的人，由着最好的缘分。

12、There are things that we don’t want to happen but have to accept, things we don’t want to know but have to learn, and people we can’t live without but have to let go.
生活中有些事情，我们不想发生却不得不接受，不想知道却不得不知道，就像有的人，我们离不开，却不得不放手。

13、Don’t let something that doesn’t matter cause you to lose something that does.
别让那些不重要的事来影响你，从而让你失去那些真正重要的东西。

14、Nobody can take away your pain, so don’t let anyone take away your happiness.
没有人可以带走你的痛，所以也别让任何人带走你的幸福。

15、Happiness comes when we stop complaining about the troubles we have and give thanks for all the troubles we don’t have.
当我们停止抱怨遇到的困难，并开始感谢我们没有遇到的麻烦的时候，幸福就来临了。

16、No matter how complicated your life is, you have to maintain your elegance.
不论生活如何复杂，总要保持自己的那一份优雅。

17、Today which I leave uncultivated, is precisely the next day begged by a person who perishing yesterday.
我荒废的今日，正是昨日殒身之人祈求的明日。

18、Precious things are very few in this world, that is the reason there is just one you.
在这个世界上珍贵的东西总是罕有，所以这世上只有一个你。

19、Behind every tear of sorrow, there’s a smile of memories.
在每一滴悲伤的眼泪背后，都有一个充满回忆的微笑。

20、Still waters run deep.
流静水深，人静心深。",
          "wp:post_id": "308",
          "wp:post_date": "2013-02-01 14:40:52",
          "wp:post_date_gmt": "2013-02-01 06:40:52",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "%e5%8d%88%e5%90%8e%e5%92%96%e5%95%a1%ef%bc%9astill-waters-run-deep",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "%e5%92%96%e5%95%a1",
            "#cdata-section": "咖啡"
          }
        },
        {
          "title": "午后咖啡：Dreams can be beautiful,but it is filled with danger",
          "link": "http://www.pernav.com/%e5%8d%88%e5%90%8e%e5%92%96%e5%95%a1%ef%bc%9adreams-can-be-beautifulbut-it-is-filled-with-danger/",
          "pubDate": "Fri, 01 Feb 2013 06:41:52 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://localhost/wordpress/?p=310"
          },
          "content:encoded": "1、Promise yourself to accept life as it comes and truly make each day special.
努力让自己接受生活的本来面目，让生命的每一天变得意义非凡。

2、Do not pray for easy lives, pray to be stronger.
与其祈求生活平淡点，还不如祈求自己强大点。

3、To be a strong person, it does not mean you shall be able to cope with all kinds of siutation, it means you can neglect all injuries.
坚强的人，并不是能应对一切，而是能忽视所有的伤害。

4、The best time to learn how to fly is when someone lets you down.
有人将你从高处推下的时候恰恰是你展翅高飞的最佳时机。

5、Sound heath is the greatest of gifts,contentedness,the greatest of riches,trust,the greatest of qualities.
健康为最好的天赋，知足为最大的财富，信任为最佳的品德。

6、We don’t know that what we’ve got until we lose it, but we don’t know what we’ve been missing until it arrives.
我们往往在失去时才明白自己拥有的东西曾经多么美好；然而，当我们能够拥有一样东西时，我们才明白从前失去一些什么。

7、Success is getting what you want ;happiness is waiting what you getting .
成功是得到你想要的，幸福则是喜欢你所得到的。

8、The most touching words are not “I love you”or “be together”,but instead, “I’m here”when I’m weak.
世界上最动听的情话，不是“我爱你”，不是“在一起”，而是在我最脆弱的时候，你说：“I’m here.”

9、The purpose of life is to live it, to taste experience to the utmost, to reach out eagerly and without fear for newer and richer experience.
生命的意义在于尽情生活，拼命体验，勇往直前、无所畏惧地去追求更新更丰富的人生经历。

10、Dreams can be beautiful,but it is filled with danger.
有梦虽美，但处处充满危机。",
          "wp:post_id": "310",
          "wp:post_date": "2013-02-01 14:41:52",
          "wp:post_date_gmt": "2013-02-01 06:41:52",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "%e5%8d%88%e5%90%8e%e5%92%96%e5%95%a1%ef%bc%9adreams-can-be-beautifulbut-it-is-filled-with-danger",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "%e5%92%96%e5%95%a1",
            "#cdata-section": "咖啡"
          }
        },
        {
          "title": "午后咖啡：Never regret something that once made you smile",
          "link": "http://www.pernav.com/%e5%8d%88%e5%90%8e%e5%92%96%e5%95%a1%ef%bc%9anever-regret-something-that-once-made-you-smile/",
          "pubDate": "Fri, 01 Feb 2013 06:42:56 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://localhost/wordpress/?p=312"
          },
          "content:encoded": "1、To be a strong person, it does not mean you shall be able to cope with all kinds of siutation, it means you can neglect all injuries.
坚强的人，并不是能应对一切，而是能忽视所有的伤害。

2、It is a matter of course that industry will bring us success, wealth and good luck. I am sure that a hard-working person can always succeed in the work which he wants to do.
勤勉会带给我们成功，财富和好运乃是当然之事。我确信一个苦干的人终是能够做成功他所要做的工作.

3、Happiness isn’t getting all you want. It’s enjoying all you have.
幸福不是得到你想要的一切，而是享受你所拥有的一切。

4、Don’t judge me until you know me, don’t underestimate me until you challenge me and don’t talk about me until you’ve talked to me.
如果你不懂我请不要评判我，如果你没有挑战过我请不要小瞧我，如果你没有跟我交谈过请不要随便议论我。

5、Sometimes we feel tired because we are lost in our life.
有时候，我们觉得累，是因为在人生的道路上，忘记了去哪。

6、There is only one person who can define success in your life – and that’s you.
只有一个人能界定你一生的成就，那就是你自己。

7、Love you once, I love you twice, I love you more than beans and rice.
一见倾心，再见倾情，我爱你，此生不渝。

8、Use your smiled to changd the world. Don’t let the world change your smile.
用你的笑容去改变这个世界，别让这个世界改变了你的笑容。

9、Never regret.If it’s good, it’s wonderful. If it’s bad, it’s experience.
不必遗憾。若是美好，叫做精彩。若是糟糕，叫做经历。

10、Never regret something that once made you smile.
不必遗憾，至少你曾快乐过。",
          "wp:post_id": "312",
          "wp:post_date": "2013-02-01 14:42:56",
          "wp:post_date_gmt": "2013-02-01 06:42:56",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "%e5%8d%88%e5%90%8e%e5%92%96%e5%95%a1%ef%bc%9anever-regret-something-that-once-made-you-smile",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "%e5%92%96%e5%95%a1",
            "#cdata-section": "咖啡"
          }
        },
        {
          "title": "午后咖啡：Keep calm in favorable circumstances. Keep composed in adverse situation",
          "link": "http://www.pernav.com/%e5%8d%88%e5%90%8e%e5%92%96%e5%95%a1%ef%bc%9akeep-calm-in-favorable-circumstances-keep-composed-in-adverse-situation/",
          "pubDate": "Fri, 01 Feb 2013 06:43:49 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://localhost/wordpress/?p=314"
          },
          "content:encoded": "1、You can’t change the past, but you can ruin the present by worrying about the future.
你改变不了昨天，但如果你过于忧虑明天，将会毁了今天。

2、Destiny sometimes takes us into troubled waters. Not to drown us, but to cleanse us.
命运有时把我们浸到一滩浑水中，不是为了溺死我们，而是为了让我们得到净化。

3、The happiest people are not those who own all the best things, but the ones who can really appreciate the beauty of life.
最幸福的人们并不一定什么都是最好，只是因为他们懂得欣赏生活的美好。

4、While our dream is confronted with the reality, you always feel painful. Just trample on the pain, or you’ll be beat down by it.
当梦想和现实面对时，总是很痛苦的。而你要么被痛苦击倒，要么把痛苦踩在脚下。

5、Not always estimating your status in others’ hearts. You will lose yourself when you live in other’s look. Do you best and walk on your own way.
不要总是估量自己在别人心中的地位，活在别人的眼神里，就等于失去了自我。走自己的路，做最好的自己。

6、We have so many needs in our life, but ultimately, all we need is to be needed.
生命中，我们总是有那么多的渴求和需要。然而归根结底，我们最渴求的，不过是被人需要。

7、Sometimes to get what you want the most, you have to do what you want the least. (Jodi Picoult)
有时候，若要得到最想要的东西，就得去做最不愿做的事。

8、One day, in retrospect, the years of struggle will strike you as the most beautiful.（Sigmund Freud）
当你某天再回首时，你会发现那些奋斗的日子最美好。

9、You can’t change the past, but you can ruin the present by worrying about the future.
你无法改变过去，但你若杞人忧天患得患失，将会毁掉现在。

10、Keep calm in favorable circumstances. Keep composed in adverse situation.
遇顺境处之淡然，遇逆境处之泰然。",
          "wp:post_id": "314",
          "wp:post_date": "2013-02-01 14:43:49",
          "wp:post_date_gmt": "2013-02-01 06:43:49",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "%e5%8d%88%e5%90%8e%e5%92%96%e5%95%a1%ef%bc%9akeep-calm-in-favorable-circumstances-keep-composed-in-adverse-situation",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "%e5%92%96%e5%95%a1",
            "#cdata-section": "咖啡"
          }
        },
        {
          "title": "心语：我想用我的全部，换取一条通往你心里的路",
          "link": "http://www.pernav.com/%e5%bf%83%e8%af%ad%ef%bc%9a%e6%88%91%e6%83%b3%e7%94%a8%e6%88%91%e7%9a%84%e5%85%a8%e9%83%a8%ef%bc%8c%e6%8d%a2%e5%8f%96%e4%b8%80%e6%9d%a1%e9%80%9a%e5%be%80%e4%bd%a0%e5%bf%83%e9%87%8c%e7%9a%84%e8%b7%af/",
          "pubDate": "Mon, 04 Feb 2013 00:38:03 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://localhost/wordpress/?p=317"
          },
          "content:encoded": "1、出发之前永远是梦想，上路之后永远是挑战。

2、不是除了你，我就没人要了。只是除了你，我谁都不想要。

3、你不会为同一个笑话笑了一遍又一遍，但你为什么一直为同一件事哭了一次又一次？

4、爱情不是愚公移山，也不是铁杵磨成针，在表态之后得不到回应、在明知不可为的时候放弃是最优雅的。

5、无需刻意铭记无法实现的爱情，无论有什么样的记忆，我们再长大一些的时候，时间就会把回忆里的泪水风干。那时候，回忆里，就只剩下温暖片段了。

6、所谓得体，就是有许多话不必说尽，有许多事不必做尽，失望是无可避免的，但大部分的失望都是因为高估了自己。

7、我们或许能勇敢的面对你爱的人不爱你，但是谁都无力面对当一个爱你很久的人转身离去，那种骄傲那种幸福荡然无存。请珍惜你身边默默爱你的人，或许，有一天当他真的离开了，你会发现，离不开彼此的，是你，不是他。

8、每个人都有不可理喻的地方，不要苛求别人，也不必埋怨自己。

9、其实，每一个不懂爱旳人，都会遇到一个懂爱的人，然后经历一场撕心裂肺旳爱情，然后分开。后来不懂爱的人慢慢懂了，懂爱旳人，却不敢再爱了。

10、所谓爱，就是当感觉、热情、浪漫统统拿掉之后，你仍然珍惜对方。

11、我们离回忆太近，离自由太远。有时候念念不忘，只是爱上回忆。一次犹豫，一次背叛，一次意外，足以让它枯萎。挣脱一切，烟消云散。——徐志摩

12、想把一个男人留在身边，就要让他知道，你随时可以离开他。

13、人的一生就是一个储蓄的过程，在奋斗的时候储存了希望；在耕耘的时候储存了一粒种子；在旅行的时候储存了风景；在微笑的时候储存了快乐。聪明的人善于储蓄，在漫长而短暂的人生旅途中，学会储蓄每一个闪光的瞬间，然后用它们酿成一杯美好的回忆，在四季的变幻与交替之间，散发浓香，珍藏一生。

14、很多人一开始为了梦想而忙，后来忙得忘了梦想。

15、我们都觉得，成功没那么严重，做自己反而比较心安理得。如果受了伤，就喊一声痛，真的，说出来就不会太难过。不去想自由，反而更轻松，愿意感动就是种享受。生活，生活，会快乐也会寂寞，生活，生活，明天我们好好的过。——张悬《儿歌》

16、任何你的不足，在你成功的那刻，都会被人说为特色。所以，坚持做你自己，而不是在路上被别人修改的面目全非。

17、喜欢和爱有什么分别？喜欢一个人，不至于渴望跟他共度余生。需要和爱有什么分别？需要一个人，还不至于希望下辈子再跟他一起。——张小娴

18、我们这一生，会遇到很多人，缘分皆朝生暮死脆弱如露水。唯独与你，像是一条生生不息的河流。

19、世界上，唯独骗不了的，是自己的心，它总在你最没提防时，暴露你的欢喜忧愁。

20、我想用我的全部，换取一条通往你心里的路。
",
          "wp:post_id": "317",
          "wp:post_date": "2013-02-04 08:38:03",
          "wp:post_date_gmt": "2013-02-04 00:38:03",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "%e5%bf%83%e8%af%ad%ef%bc%9a%e6%88%91%e6%83%b3%e7%94%a8%e6%88%91%e7%9a%84%e5%85%a8%e9%83%a8%ef%bc%8c%e6%8d%a2%e5%8f%96%e4%b8%80%e6%9d%a1%e9%80%9a%e5%be%80%e4%bd%a0%e5%bf%83%e9%87%8c%e7%9a%84%e8%b7%af",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "%e5%bf%83%e8%af%ad",
            "#cdata-section": "心语"
          }
        },
        {
          "title": "心语：用你和他的幸福，盖过他和她的曾经",
          "link": "http://www.pernav.com/%e5%bf%83%e8%af%ad%ef%bc%9a%e7%94%a8%e4%bd%a0%e5%92%8c%e4%bb%96%e7%9a%84%e5%b9%b8%e7%a6%8f%ef%bc%8c%e7%9b%96%e8%bf%87%e4%bb%96%e5%92%8c%e5%a5%b9%e7%9a%84%e6%9b%be%e7%bb%8f/",
          "pubDate": "Mon, 04 Feb 2013 00:40:28 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://localhost/wordpress/?p=321"
          },
          "content:encoded": "1、有些事，不说是个结，说了是个疤。

2、少走了弯路，也就错过了风景，无论如何，感谢经历。

3、人生最大的勇敢之一，就是经历欺骗和伤害之后，还能保持信任和爱的能力。

4、一句话出口前，你是它的主人，出口之后，它是你的主人。钉子可以从木板中拔出，说出去的话却无法收回。多思、多想、多听、多看、谨言、慎行，这么做的好处就是让自己少一点后悔。

5、生活有时并非那么复杂，只是因为我们想多了，想深了，人为地给自己编织了一道道网，然后在里面奋力地挣扎；爱情有时并非那么美好，可是我们喜欢沉湎于它的浪漫，于是给它披上了绚丽的外衣，其实就算走到天荒地老，也离不开平淡稀松的日子。走过才知道，有些事简单点，现实点，你才能轻松点，走远点。

6、有期待的人，每一天都是崭新的一天。

7、有时候你觉得别人是什么样子的，不代表他们就是你所想的那样。从外表看起来，他们可能欢笑，也可能流泪，但你要为发现他们内在的真实而感到惊奇。所以，仔细观察你在乎和你爱的人，只因为他们原本的样子，而不是你希望他们成为的样子。

8、人最大的痛苦，就是心灵没有归属。

9、或许，最美的事不是留住时光，而是留住记忆，如最初相识的感觉一样，哪怕一个不经意的笑容，便是我们最怀念的故事。但愿，时光，如初见。

10、你走，我不送你。你来，无论多大风多大雨，我要去接你。——梁实秋

11、没有结果的感情，总要消逝；无法拥有的人，总会遗忘。人生没有永远的痛，没有过不去的坎，没有忘不掉的情殇。不要急，不要哭，不要怕，相信时间，相信你自己，相信上天会善待每一段生命。你一定要等，总有一天，会有一双手温柔地牵着你，带你走出回忆。

12、你在乎他，他才那么闪耀。你不在乎他，他就什么都不是。

13、人生的路，靠的是自己一步步去走，真正能保护你的，是你自己的选择。而真正能伤害你的，也是一样，自己的选择。决定人生的，不是命运，而是你自己的每一次抉择。

14、需要你的人，才是你需要的人。

15、不要轻易去爱，更不要轻易去恨，让自己活得轻松些，让青春多留下些潇洒的印痕。你是快乐的，因为你很单纯，你是迷人的，因为你有一颗宽容的心。——汪国真

16、真正爱你的人，绝不会离开你，他纵有千百个理由放弃，却也总会找一个理由坚持下去。

17、心若不动，风又奈何；你若不伤，岁月无恙。

18、有些人，你以为可以再见面的；有些事，你以为可以一直继续的。然而，也许在你转身的那个刹那，有些人，你就再也见不到了。当太阳落下，又升起来的时候，一切都变了，一不小心就再也回不去了。

19、最遗憾的不是把理想丢在路上，而是理想从未上路。

20、前女友、前男友，是男人女人心中的一道伤疤，既不忍去看，又无法挥之而去。爱上了一个曾经经历过“长恋”的人，最好的办法就是：用你和他的幸福经历，去盖过他和她的曾经。既然注定无法更早一点地遇上他，那就用更快乐的方式拥有他。
",
          "wp:post_id": "321",
          "wp:post_date": "2013-02-04 08:40:28",
          "wp:post_date_gmt": "2013-02-04 00:40:28",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "%e5%bf%83%e8%af%ad%ef%bc%9a%e7%94%a8%e4%bd%a0%e5%92%8c%e4%bb%96%e7%9a%84%e5%b9%b8%e7%a6%8f%ef%bc%8c%e7%9b%96%e8%bf%87%e4%bb%96%e5%92%8c%e5%a5%b9%e7%9a%84%e6%9b%be%e7%bb%8f",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "%e5%bf%83%e8%af%ad",
            "#cdata-section": "心语"
          }
        },
        {
          "title": "午后咖啡：Sometimes we avoid those that we miss the most",
          "link": "http://www.pernav.com/%e5%8d%88%e5%90%8e%e5%92%96%e5%95%a1%ef%bc%9asometimes-we-avoid-those-that-we-miss-the-most/",
          "pubDate": "Mon, 04 Feb 2013 00:43:04 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://localhost/wordpress/?p=323"
          },
          "content:encoded": "1、Telling someone the truth is an act of love.
说真话，也是爱的一种表达。

2、A girl should be two things: classy and fabulous.
每个女孩都该做到两点：有品位并光芒四射。

3、All the art of living lies in a fine mingling of letting go and holding on.
生活的艺术在于，好好把握每一次的让步与坚持。

4、You don’t get another chance. Life is not Nintendo game.
你不会有第二次机会，因为生活可不是任天堂游戏。

5、Fate determines who enters your life, your actions decide who stays.
谁走进你的生命，是由命运决定；谁停留在你生命中，却是由你自己决定。

6、Do not dwell in the past, do not dream of the future, concentrate your mind on the present moment.
不要沉溺于过去，不要幻想未来，集中精力，过好眼下的每一分每一秒！

7、Maybe you had to leave in order to really miss a place; maybe you had to travel to figure out how beloved your starting point was.
或许该要离开，离开才能让人真正怀念一个地方；或许该去旅行，旅行才能让人看清起点竟是那么珍贵。

8、Best way to not get your heart broken, is pretend you don’t have one.
避免心碎最好的办法，就是假装自己没有心。

9、If your reasons are big enough and your desire intense enough and you persist long enough nothing can stop you. You will achieve your goal.
如果你的动机足够强大，你的愿望足够强烈，而你又能够坚持不懈，不屈不挠，没有什么能够阻止你完成你的目标。

10、Always believe that something wonderful is about to happen.
永远坚信，会有很棒的事情发生。

11、Everything negative-pressure, challenges-is all an opportunity for me to rise.
压力、挑战，这一切消极的东西，都是我能够取得成功的催化剂。

12、Troughout my life, I have always been afraid of losing the people I love. But then, sometimes I wonder, is there anyone out there afraid of losing me?
我这一辈子都在害怕，害怕会失去我爱的人。但有时我也会想，是否有人也害怕失去我呢？

13、Sometimes you just need to be with the person who makes you smile even if it means waiting.
有时候，你就该找个让你开心的人，就算需要等待。

14、I held tight to the world, but rejected. If I had saved the effort, would the pain be less?
我用力抓紧世界，最终却仍被世界淘汰。如果一开始就松手，我的痛苦会不会少些？

15、Life is made up of sobs, sniffles and smiles with sniffles predominating.
人生是由呜咽，抽泣和微笑组成，而在三者之中，抽泣处于支配地位。

16、No need to have a reason to love you.Anything can be a reason not to love you.
喜欢你，不需要理由；不喜欢你，什么都可以成为理由。

17、Love is my sickness and you are my drug, I’m addicted.
爱是一种病，我赶上了。你是我的药，我上瘾了。

18、No matter how serious life gets, you still gotta have that one person who you can be completely stupid with.
无论生活有多么严峻，我们都需要找到一个能傻傻相伴的人。

19、You should never sacrifice three things: your family, your heart, or your dignity.
人决不能放弃的三样东西：家庭，真心还有尊严。

20、Sometimes we avoid those that we miss the most.
有一种想念，叫避而不见。",
          "wp:post_id": "323",
          "wp:post_date": "2013-02-04 08:43:04",
          "wp:post_date_gmt": "2013-02-04 00:43:04",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "%e5%8d%88%e5%90%8e%e5%92%96%e5%95%a1%ef%bc%9asometimes-we-avoid-those-that-we-miss-the-most",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "%e5%92%96%e5%95%a1",
            "#cdata-section": "咖啡"
          }
        },
        {
          "title": "2013年2月4日:宋茜（Victoria）",
          "link": "http://www.pernav.com/2013%e5%b9%b42%e6%9c%884%e6%97%a5%e5%ae%8b%e8%8c%9c%ef%bc%88victoria%ef%bc%89/",
          "pubDate": "Mon, 04 Feb 2013 00:56:46 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://localhost/wordpress/?p=325"
          },
          "content:encoded": "<img src=\"http://farm9.staticflickr.com/8222/8443406198_4a693c9462_z.jpg\"  alt=\"2013年2月4日\">",
          "wp:post_id": "325",
          "wp:post_date": "2013-02-04 08:56:46",
          "wp:post_date_gmt": "2013-02-04 00:56:46",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "2013%e5%b9%b42%e6%9c%884%e6%97%a5%e5%ae%8b%e8%8c%9c%ef%bc%88victoria%ef%bc%89",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "beauty",
            "#cdata-section": "爱美人"
          }
        },
        {
          "title": "心语：我想触动你的心，就像你触动了我的心那样",
          "link": "http://www.pernav.com/%e5%bf%83%e8%af%ad%ef%bc%9a%e6%88%91%e6%83%b3%e8%a7%a6%e5%8a%a8%e4%bd%a0%e7%9a%84%e5%bf%83%ef%bc%8c%e5%b0%b1%e5%83%8f%e4%bd%a0%e8%a7%a6%e5%8a%a8%e4%ba%86%e6%88%91%e7%9a%84%e5%bf%83%e9%82%a3%e6%a0%b7/",
          "pubDate": "Tue, 05 Feb 2013 00:52:33 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://localhost/wordpress/?p=327"
          },
          "content:encoded": "1、每天醒来都要比前一天更强大，直视自己的畏惧，擦干自己的泪水。

2、生活就像是跟老天对弈，对你而言，你走棋，那叫选择；老天走棋，那叫挑战。

3、人生就是一列开往坟墓的列车，路途上会有很多站，很难有人可以至始至终陪着走完，当陪你的人要下车时，即使不舍，也该心存感激，然后挥手道别。

4、有些人经过我身旁，住在我脑中，在我心里钻洞；有些人变成相片，堆在角落，灰尘像雪一般冰冻。总要有一首我的歌，大声唱过，再看天地辽阔，活着不多不少，幸福刚好够用。——阿信

5、你可以随时转身，但是不能一直后退。——鲍勃·迪伦

6、爱就是，无论你怎么抵挡，它还是要来的东西。爱就是，无论你怎么诋毁，它还是高尚的东西。

7、一直觉得女王才能真正得到幸福，因为人生是自己掌控的。我可以小鸟依人，可以为你洗衣做饭，但是这些都是建立在我爱你的基础上。我爱你，所以我心甘情愿的为你做这些事，而不是因为我害怕你离开。

8、为什么有些人就是不懂，并不是只要把真心话说出来就可以互相了解的，了解是要心对心的。

9、面对远方的暗影，却藏起心中的恐惧，不经意地挡住你的视线，温柔地执手，指给你看路边的繁花。生命中很多浪漫都是这样，任身边滔天巨浪，他却默默给你温柔守护，不声不响。

10、生命太短，没留时间给遗憾。若不是终点，请微笑一直向前。

11、每一个人生下来都是“原创”，长着长着就成了“赝品”。在这个世界上有许多人，因为各种各样的原因，他们的生活故事没有机会展开，就销声匿迹了。要让人生真正开花结果，我们最需要的是敢于与众不同的勇气。

12、修己，以清心为要。涉世，以慎言为先。

13、人生有各种各样的活法，有人辞官归故里，有人星夜赶科场。有人一辈子逆来顺受，也有的人放浪不羁，还有的人自甘平庸，但也有人孜孜以求。我们无须评判什么样的人生才是成功的人生。其实，任何一种活法都是人的自由选择，只要从心出发，活得适意而满足，求仁得仁，是谓幸福。

14、不管他有没有出现，都要靠自己在时间中稳步成长，变成自己期待的样子，过好自己想要的生活。有没有他的喝彩，你的光芒都绽放。

15、太用力的爱情，让人看不清内心。用力过度就是不自信，不信任，怕来不及表达自己的情绪，怕没有时间耐心等待。但其实，细水长流，平静而深刻，才更容易看到内心。

16、如果我爱你，我必将抓紧你的手，即使我思绪万千，担忧过去，害怕未来，我都愿放下一切顾虑，只为和你谈一场在我心里地老天荒的恋爱，哪管他明日会如何。

17、你要知道，你拥有的，就是最好的。不是因为一件东西好，你才千方百计去拥有它。而是因为你已拥有了它，才一心一意觉得它最好。

18、我一直知道世界上存在着这么一个人，能给我真正的幸福，同时又因为跟我在一起而幸福，而我一定要把他找出来。

19、我越来越相信，这就是所有爱情、友情和亲情的全部要义：谢谢你陪我度过的时光。

20、我想触动你的心，就像你触动了我的心那样。",
          "wp:post_id": "327",
          "wp:post_date": "2013-02-05 08:52:33",
          "wp:post_date_gmt": "2013-02-05 00:52:33",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "%e5%bf%83%e8%af%ad%ef%bc%9a%e6%88%91%e6%83%b3%e8%a7%a6%e5%8a%a8%e4%bd%a0%e7%9a%84%e5%bf%83%ef%bc%8c%e5%b0%b1%e5%83%8f%e4%bd%a0%e8%a7%a6%e5%8a%a8%e4%ba%86%e6%88%91%e7%9a%84%e5%bf%83%e9%82%a3%e6%a0%b7",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "%e5%bf%83%e8%af%ad",
            "#cdata-section": "心语"
          }
        },
        {
          "title": "心语：爱情无药可医，唯有爱得更深",
          "link": "http://www.pernav.com/%e5%bf%83%e8%af%ad%ef%bc%9a%e7%88%b1%e6%83%85%e6%97%a0%e8%8d%af%e5%8f%af%e5%8c%bb%ef%bc%8c%e5%94%af%e6%9c%89%e7%88%b1%e5%be%97%e6%9b%b4%e6%b7%b1/",
          "pubDate": "Tue, 05 Feb 2013 00:54:37 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://localhost/wordpress/?p=329"
          },
          "content:encoded": "1、我的愿望是，一觉睡到小时候。

2、把所有的不快给昨天，把所有的希望给明天，把所有的努力给今天。

3、不要轻易说一辈子。我也曾经说过一辈子，信过一辈子。可其实一辈子太长了，长得足够改变一个人，忘掉一个人，甚至，再爱上另一个人。

4、所有男人都爱美人，所有女人都爱富人。但爱却不等于真的要。男人虽爱美人，但不一定会娶，到最后，男人娶的都是适合做老婆的。女人虽然爱钱，但不一定会嫁富人，到最后嫁的都是待她们好的。所以，做人到最后，拼的不是富和美，而是人品。人品是最美的内心，最贵的灵魂。——陆琪

5、总有那么一些歌，让我们悲伤，让我们哭泣。但其实让我们哭泣的并不是那些歌本身，而是藏在回忆里的那些人。

6、爱上一个人容易，等平淡了后，还坚守那份诺言，就不容易了。爱，从来不是迎合。吵不散，骂不走，才算是真爱。其实，真爱一个人，你会陷入情不自禁的旋涡中。他让你流泪，让你失望，即便这样，他站在那里，你还是会走过去牵他的手，不由自主。

7、快乐的时候，你就尽情地欢笑。伤心的时候，你就痛声地哭。不要因为世界的虚伪，你也变得虚伪。

8、记住：不是眼泪就可以挽回失去的，所以不要轻易流下你的泪；不是伤心就一定要哭泣，所以不要那么吝啬你的微笑；不是你认为可以给予就给予，所以不要那么轻易许下承诺；不是你做的不够好。所以不要悲悯的以为自己一事无成；不是只有你一个人在努力。所以不要轻易的就放弃。

9、付出真心，才会得到真心，却可能伤的彻底；保持距离，才能保护自己，却注定永远寂寞。

10、不管你对多少异性失望，你都没有理由对爱情失望。因为爱情本身就是希望，永远是生命的一种希望。爱情是你自己的品质，是你自己的心魂，是你自己的处境，与别人无关。

11、最痛苦的真相，也好过最甜蜜的谎言。

12、一段感情的成功与否，不是看是否还牵手，而是由感情品质而定，很多时候牵手不代表成功，分手不代表失败。关键是看在这段感情中你是否完成了两件重要的恋爱心理任务。你是否更了解自己的需求，你是否已学会疼爱别人。

13、常相知，才能不相疑；不相疑，才能常相知。

14、我多么希望：在一个干净的早晨，阳光照在草地上，露珠在草叶上闪闪发亮，我们扶着门框并肩站立。门很低，但太阳是明亮的，草在结它的种子，风在摇它的叶子。我们只是站着，不说话，就十分美好。

15、有时候，同样的一件事情，我们可以去安慰别人，却说服不了自己。

16、一辈子的爱人，不是一场轰轰烈烈的爱情，也不是什么承诺和誓言。而是当所有人都离弃你的时候，只有他在默默陪伴着你。当所有人都在赞赏你的时候，只有他牵着你的手，嘴角上扬，仿佛骄傲的说，我早知道。不要因爱人的沉默和不解风情而郁闷，因为时间会告诉你：越是平凡的陪伴，就越长久。—— 安妮宝贝

17、人在得不到的时候，什么都可以不介意，得到之后，什么都会有点介意。这是爱情，请你不要介意。有人问，分离的时候，到底是离开的那个人比较痛苦，还是留下来的那个人比较痛苦？应该说，爱的最深的那个人比较痛苦。

18、伤心，是一种最堪咀嚼的滋味。如果不经历这种疼痛——度日如年般的经过，不可能玩味其他人生的欣喜。——三毛《伤》

19、选爱人不需要太多标准，只要三样：不骗你，不伤害你，和陪着你。

20、爱情无药可医，唯有爱得更深。——梭罗《瓦尔登湖》
",
          "wp:post_id": "329",
          "wp:post_date": "2013-02-05 08:54:37",
          "wp:post_date_gmt": "2013-02-05 00:54:37",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "%e5%bf%83%e8%af%ad%ef%bc%9a%e7%88%b1%e6%83%85%e6%97%a0%e8%8d%af%e5%8f%af%e5%8c%bb%ef%bc%8c%e5%94%af%e6%9c%89%e7%88%b1%e5%be%97%e6%9b%b4%e6%b7%b1",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "%e5%bf%83%e8%af%ad",
            "#cdata-section": "心语"
          }
        },
        {
          "title": "2013年2月5日:柳岩",
          "link": "http://www.pernav.com/2013%e5%b9%b42%e6%9c%885%e6%97%a5%e6%9f%b3%e5%b2%a9/",
          "pubDate": "Tue, 05 Feb 2013 01:02:37 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://localhost/wordpress/?p=331"
          },
          "content:encoded": "<img src=\"http://farm9.staticflickr.com/8374/8445480165_15f83f010c_z.jpg\" alt=\"2013年2月5日\">",
          "wp:post_id": "331",
          "wp:post_date": "2013-02-05 09:02:37",
          "wp:post_date_gmt": "2013-02-05 01:02:37",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "2013%e5%b9%b42%e6%9c%885%e6%97%a5%e6%9f%b3%e5%b2%a9",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "beauty",
            "#cdata-section": "爱美人"
          }
        },
        {
          "title": "2013年1月26日:周星驰",
          "link": "http://www.pernav.com/2013%e5%b9%b41%e6%9c%8826%e6%97%a5%e5%91%a8%e6%98%9f%e9%a9%b0/",
          "pubDate": "Tue, 05 Feb 2013 01:31:08 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://localhost/wordpress/?p=342"
          },
          "content:encoded": "<img src=\"http://farm9.staticflickr.com/8214/8446630374_c6d1393724_z.jpg\" alt=\"2013年1月26日\">",
          "wp:post_id": "342",
          "wp:post_date": "2013-02-05 09:31:08",
          "wp:post_date_gmt": "2013-02-05 01:31:08",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "2013%e5%b9%b41%e6%9c%8826%e6%97%a5%e5%91%a8%e6%98%9f%e9%a9%b0",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "beauty",
            "#cdata-section": "爱美人"
          }
        },
        {
          "title": "心语：你为他倾尽年华，谁为你执手天下",
          "link": "http://www.pernav.com/%e5%bf%83%e8%af%ad%ef%bc%9a%e4%bd%a0%e4%b8%ba%e4%bb%96%e5%80%be%e5%b0%bd%e5%b9%b4%e5%8d%8e%ef%bc%8c%e8%b0%81%e4%b8%ba%e4%bd%a0%e6%89%a7%e6%89%8b%e5%a4%a9%e4%b8%8b/",
          "pubDate": "Thu, 07 Feb 2013 00:20:18 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=361"
          },
          "content:encoded": "1、我明白你会来，所以我等。

2、一个人自以为刻骨铭心的回忆，别人早已已经忘记了。

3、人生最糟的不是失去爱的人，而是因为太爱一个人而失去了自己。

4、即使在千万人中行走，我也能一眼认出是你。因为别人都是踩着地走路，而你是踩着我的心在走。

5、不去抱怨，不浮躁，不害怕孤单，能很好的处理寂寞，沉默却又努力，那时说不定你想要苦苦追寻的梦想，已经握在你手中了。

6、爱怕撒谎。当我们不爱的时候，假装爱，是一件痛苦而倒霉的事情。假如别人识破，我们就成了虚伪的坏蛋。你骗了别人的钱，可以退赔，你骗了别人的爱，就成了无赦的罪人。假如别人不曾识破，那就更惨。除非你已良心丧尽，否则便要承诺爱的假象，那心灵深处的绞杀，永无宁日。—— 毕淑敏

7、有的人为了你把心掏了，你却假装没看见，因为你不喜欢。有的人把你的心掏了，你还假装不难过，因为你太爱。

8、做一个安静细微的人，于角落里自在开放，默默悦人，却始终不引起过分热闹的关注，保有独立而随意的品格，这就很好。

9、每个人心里，都住着这么一个人，遥远的爱着。这辈子也许都无法在一起，也许都没有说过几句话，也没有一起吃饭看电影，可就是这个遥远的人支撑了青春里最重要，最灿烂的那些日子。以至于让以后的我们想起来，都没有遗憾后悔，只是暖暖的回忆。

10、不管全世界所有人怎么说，我都认为自己的感受才是正确的。无论别人怎么看，我绝不打乱自己的节奏。喜欢的事自然可以坚持，不喜欢的怎么也长久不了。

11、一件事无论太晚或者太早，都不会阻拦你成为你想成为的那个人，这个过程没有时间的期限，只要你想，随时都可以开始。要改变或者保留原状都无所谓，做事本不应该有所束缚，我们可以办好这件事却也可以把它搞砸，但我希望最终你能成为你想成为的人。——《返老还童》

12、该得到的要付出努力抓到手，不该得到的想也不要去想。

13、世上除了生死，都是小事。从今天开始，每天微笑吧。不管遇到了什么烦心事，都不要自己为难自己；无论今天发生多么糟糕的事，都不应该感到悲伤。今天是你往后日子里最年轻的一天了，因为有明天，今天永远只是起跑线。记住一句话：越努力，越幸运。

14、不是所有的人都能知道时光的涵意，不是所有的人都懂得珍惜；这世间并没有分离与衰老的命运，只有肯爱与不肯去爱的心。

15、如果有醒不了的梦，我一定去做；如果有走不完的路，我一定去走；如果有变不了的爱，我一定去求。如果如果什么都没有，那就让我回到宿命的泥土，让懂的人懂，让不懂的人不懂，让世界是世界，我甘心是我的茧。——简媜

16、有些话，适合烂在心里，有些痛苦，适合无声无息的忘记。当经历过，你成长了，自己知道就好。很多改变，不需要你自己说，别人会看得到。

17、无论你是怎样的性格或是多么怪戾的脾性，这人世，总会有与你处得来的一些人出现，因此，谁都不会是永远孤单的存在。

18、不要因为也许会改变，就不肯说那句美丽的誓言；不要因为也许会分离，就不敢求一次倾心的相遇。

19、时间并不残忍，只是美与真之间若只能二选一的话，总是留下真。

20、你为他倾尽年华，谁为你执手天下？",
          "wp:post_id": "361",
          "wp:post_date": "2013-02-07 08:20:18",
          "wp:post_date_gmt": "2013-02-07 00:20:18",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "%e5%bf%83%e8%af%ad%ef%bc%9a%e4%bd%a0%e4%b8%ba%e4%bb%96%e5%80%be%e5%b0%bd%e5%b9%b4%e5%8d%8e%ef%bc%8c%e8%b0%81%e4%b8%ba%e4%bd%a0%e6%89%a7%e6%89%8b%e5%a4%a9%e4%b8%8b",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "%e5%bf%83%e8%af%ad",
            "#cdata-section": "心语"
          }
        },
        {
          "title": "心语：我们后来怨的，常是最初爱的",
          "link": "http://www.pernav.com/%e5%bf%83%e8%af%ad%ef%bc%9a%e6%88%91%e4%bb%ac%e5%90%8e%e6%9d%a5%e6%80%a8%e7%9a%84%ef%bc%8c%e5%b8%b8%e6%98%af%e6%9c%80%e5%88%9d%e7%88%b1%e7%9a%84/",
          "pubDate": "Thu, 07 Feb 2013 00:24:31 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=363"
          },
          "content:encoded": "1、夜是温婉的姑娘，不吵不闹，静待黎明。

2、在这世上，最容易变的是人心，但最天荒地老的也是人心。

3、长大成人这件事最恐怖的地方之一在于，你或许会变成自己曾经最看不起的那种人。

4、一个人生命的范围，就是他所走过的路、遇过的人、见过的风景、发生的故事和收获的回忆。

5、杀了公鸡，也阻止不了天亮。历史将会记录，在这个社会转型期，最大的悲哀不是坏人的嚣张，而是好人的过度沉默。

6、很多人，因为寂寞而错爱了一人，但更多的人，因为错爱一人，而寂寞一生。我们可以彼此相爱，却注定了无法相守。不是我不够爱你，只是我不敢肯定，这爱，是不是最正确的。

7、没有到手的东西，总是比到手的稀奇，但不一定比到手的更好。

8、人生是痛苦的，别迷。活着是短暂的，别慌。欲望是无穷的，别贪。身体是自己的，别懒。工作是大家的，别抢。钞票是消费的，别存。生活是丰富的，别烦。假期是休闲的，别忙。朋友是永远的，别忘。

9、有些人在想一个人，有些人在等一个人，有些人敏感的心拒绝任何人，或者说，习惯了一个人。

10、我曾经爱过你，爱情，也许，在我的心灵里还没有完全消亡。但愿它不会再打扰你，我也不想再使你难过悲伤。我曾经默默无语，毫无指望地爱过你，我既忍受着羞怯，又忍受着嫉妒的折磨，我曾经那样真诚，那样温柔地爱过你，但愿上帝保佑你，另一个人也会像我爱你一样。

11、我在等一个人，一个可以把我的寂寞故事画上休止符的人，一个可以陪我听遍所有悲伤情歌，却不会让我想哭的人。

12、在我们四周，能够真正关注你的，就那么廖廖几个。所以，我们无须在意别人的评说，只要把自己的事情做好；无须看别人的眼神，只需走自己的路；无须有过多的抱怨，那样会使自己活得更累。不必一味讨好别人，不管走在何处，都不要迷失自己。——假如你讨厌我，我一点也不介意，我活着不是为了取悦你。

13、如果你明明知道这个故事的结局，你或者选择说出来，或者装作不知道，千万不要欲言又止。有时候留给别人的伤害，选择沉默比选择坦白要痛多了。

14、年轻的时候，如果你爱上了一个人，请一定要温柔地对待他。不管你们相爱的时间有久，若能始终温柔地相待，那么，所有的时刻都将是无瑕的美丽。若不得不分离，也要好好说再见，要心里存着感谢，感谢他给了你一份记忆。长大以后，你才会知道在蓦然回首的刹那，没有怨恨的青春才会无遗憾。

15、如果你一定要与一个人相依为命，直到永远，那么让我成为这个幸运儿。

16、我们都是这样一点一滴长大的。成长是过程，路途上会走歪、走丢、无助、不安、质疑、反叛、抗衡、自虐、赌气、自私、恐惧、自大、伤害、求助、绝望、不甘、放弃、再来、落泪、欢笑、生离、死别、去爱、被爱……每个人都要经历，亲自上路，不能借谁的腿，谁的光阴。

17、最爱的未必适合在一起，相爱是让彼此做自己。你来过一阵子，我却怀念了一辈子。

18、我仍固执地在寻找着那份触电的感觉，在渴望那份女人终生企求的爱情，我无法放低这个最低的要求。朋友说：你的要求其实很高，两情相悦如今已经不多了，尤其在物欲横流的今天这已是奢望。但我仍然带着我的热情跟向往在等待那个风雨夜归的人。——柴静《用我一辈子去忘记》

19、宁愿像个孩子，不肯看太多的事，听太多的不是，就这样单纯一辈子。

20、我们后来怨的，常是最初爱的。东西没变环境变了，景色没变眼睛变了，别人没变自己变了。只是当我们怨的时候，如果能回头想想当初为什么选他、爱他、欣赏他。他如果依然是当初的那个他，就让我们用年轻时的眼睛，试着再看看吧。——刘墉",
          "wp:post_id": "363",
          "wp:post_date": "2013-02-07 08:24:31",
          "wp:post_date_gmt": "2013-02-07 00:24:31",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "%e5%bf%83%e8%af%ad%ef%bc%9a%e6%88%91%e4%bb%ac%e5%90%8e%e6%9d%a5%e6%80%a8%e7%9a%84%ef%bc%8c%e5%b8%b8%e6%98%af%e6%9c%80%e5%88%9d%e7%88%b1%e7%9a%84",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "%e5%bf%83%e8%af%ad",
            "#cdata-section": "心语"
          }
        },
        {
          "title": "2013年2月6日:官恩娜",
          "link": "http://www.pernav.com/2013%e5%b9%b42%e6%9c%886%e6%97%a5%e5%ae%98%e6%81%a9%e5%a8%9c/",
          "pubDate": "Thu, 07 Feb 2013 00:25:25 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=365"
          },
          "content:encoded": "<img src=\"http://farm9.staticflickr.com/8222/8448368135_a8444e3934_z.jpg\"  alt=\"2013年2月6日\">",
          "wp:post_id": "365",
          "wp:post_date": "2013-02-07 08:25:25",
          "wp:post_date_gmt": "2013-02-07 00:25:25",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "2013%e5%b9%b42%e6%9c%886%e6%97%a5%e5%ae%98%e6%81%a9%e5%a8%9c",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "beauty",
            "#cdata-section": "爱美人"
          }
        },
        {
          "title": "2013年2月7日:艾薇儿",
          "link": "http://www.pernav.com/2013%e5%b9%b42%e6%9c%887%e6%97%a5%e8%89%be%e8%96%87%e5%84%bf/",
          "pubDate": "Thu, 07 Feb 2013 06:17:32 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=370"
          },
          "content:encoded": "<img src=\"http://farm9.staticflickr.com/8521/8451758925_e49c75fa9e_z.jpg\" alt=\"2013年2月7日\">",
          "wp:post_id": "370",
          "wp:post_date": "2013-02-07 14:17:32",
          "wp:post_date_gmt": "2013-02-07 06:17:32",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "2013%e5%b9%b42%e6%9c%887%e6%97%a5%e8%89%be%e8%96%87%e5%84%bf",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "beauty",
            "#cdata-section": "爱美人"
          }
        },
        {
          "title": "IE6bug:demo1双边距bug",
          "link": "http://www.pernav.com/ie6bugdemo1%e5%8f%8c%e8%be%b9%e8%b7%9d/",
          "pubDate": "Thu, 07 Feb 2013 09:09:36 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=374"
          },
          "content:encoded": "<pre class=\"lang:default decode:true crayon-selected\">&lt;!DOCTYPE HTML&gt;
&lt;html lang=\"zh-CN\"&gt;
&lt;head&gt;
	&lt;meta charset=\"UTF-8\"&gt;
	&lt;title&gt;IE6双边距&lt;/title&gt;
	&lt;link rel=\"stylesheet\" href=\"base.css\" /&gt;
	&lt;style type=\"text/css\"&gt;
	/* demo*/
	.demo{
		height: 100px;width: 300px;background: #95cfef;border: 1px solid #36f;
		float: left;			/*bug产生条件*/			
		margin: 30px 0 0 30px;	/*bug产生条件*/	
		display:inline;			/*解决方案*/		
	}	
	&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h1&gt;产生条件&lt;/h1&gt;
&lt;p&gt;浮动元素的双倍Margin的Bug是IE6以及其以下版本的一个经典Bug了，触发这个Bug的产生是给元素设置了float并且同时和float同一方向设置了margin值，此时在IE6(IE6以下版本我们飘过不理了)就会产一个双倍margin值的Bug。&lt;/p&gt;
&lt;h2&gt;解决方法&lt;/h2&gt;
&lt;p&gt;在浮动元素中增加一个“display:inline”属性&lt;/p&gt;
&lt;div class=\"demo\"&gt;&lt;/div&gt;	
&lt;/body&gt;
&lt;/html&gt;</pre>",
          "wp:post_id": "374",
          "wp:post_date": "2013-02-07 17:09:36",
          "wp:post_date_gmt": "2013-02-07 09:09:36",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "ie6bugdemo1%e5%8f%8c%e8%be%b9%e8%b7%9d",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "bugs",
            "#cdata-section": "BUGS"
          }
        },
        {
          "title": "2013年2月8日:王力宏",
          "link": "http://www.pernav.com/2013%e5%b9%b42%e6%9c%888%e6%97%a5%e7%8e%8b%e5%8a%9b%e5%ae%8f/",
          "pubDate": "Fri, 08 Feb 2013 14:54:57 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=387"
          },
          "content:encoded": "<img src=\"http://farm9.staticflickr.com/8386/8455149305_44f9208758_z.jpg\" alt=\"2013年2月8日\">",
          "wp:post_id": "387",
          "wp:post_date": "2013-02-08 22:54:57",
          "wp:post_date_gmt": "2013-02-08 14:54:57",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "2013%e5%b9%b42%e6%9c%888%e6%97%a5%e7%8e%8b%e5%8a%9b%e5%ae%8f",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "beauty",
            "#cdata-section": "爱美人"
          }
        },
        {
          "title": "工作笔记:表格注意知识",
          "link": "http://www.pernav.com/%e5%b7%a5%e4%bd%9c%e7%ac%94%e8%ae%b0%e8%a1%a8%e6%a0%bc%e6%b3%a8%e6%84%8f%e7%9f%a5%e8%af%86/",
          "pubDate": "Fri, 08 Feb 2013 15:03:38 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=389"
          },
          "content:encoded": "表格注意知识：2011-5-4

<span style=\"color: #ff6600;\"><strong>Table样式</strong></span>

1、table中表格Colspan（合并行），Rowspan（合并列），以及Border大小给td定义
2、在css样式里面定义Table样式：Width 和Height以及Background，Margin，Border定义外边框

<span style=\"color: #ff6600;\"><strong>Td样式</strong></span>

1、在每个Td中加&amp;nbsp; 防止表格因为没有内容而变形
2、在css中定义TD的Border样式，给表格内边框颜色以及样式",
          "wp:post_id": "389",
          "wp:post_date": "2013-02-08 23:03:38",
          "wp:post_date_gmt": "2013-02-08 15:03:38",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "%e5%b7%a5%e4%bd%9c%e7%ac%94%e8%ae%b0%e8%a1%a8%e6%a0%bc%e6%b3%a8%e6%84%8f%e7%9f%a5%e8%af%86",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "%e5%b7%a5%e4%bd%9c%e7%ac%94%e8%ae%b0",
            "#cdata-section": "工作笔记"
          }
        },
        {
          "title": "工作笔记:图片按钮",
          "link": "http://www.pernav.com/%e5%b7%a5%e4%bd%9c%e7%ac%94%e8%ae%b0%e5%9b%be%e7%89%87%e6%8c%89%e9%92%ae/",
          "pubDate": "Sat, 09 Feb 2013 07:36:14 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=401"
          },
          "content:encoded": "图片按钮:2011-5-14

<strong><span style=\"color: #ff6600;\">1：在一般情况下按钮提交表单：</span></strong>
<pre class=\"lang:default decode:true\">&lt;form id=\"form1\" name=\"form1\" method=\"post\" action=\"index.html\"&gt;
    &lt;input type=\"submit\" name=\"button\" id=\"button\" value=\"提交\" /&gt;
&lt;/form&gt;</pre>
这样提交按钮是标签 &lt;input type=\"submit\"&gt;，如果想换成图片加上样式，把value=\"提交\" 改成value=\" \"（这样“提交”两个字就不会显示在这张背景图片的上面）
#button{background:url(12.jpg) no-repeat;width:100px;height:50px;border:0px;cursor:pointer;}

<strong><span style=\"color: #ff6600;\">2：直接使用图片标签按钮</span></strong>
<pre class=\"lang:default decode:true crayon-selected\">&lt;form id=\"form1\" name=\"form1\" method=\"post\" action=\"index.html\"&gt;
    &lt;input name=\"submit\" type=\"image\" value=\"ee\" src=\"12.jpg\" /&gt;
&lt;/form&gt;</pre>
<em id=\"__mceDel\"><em id=\"__mceDel\"><em id=\"__mceDel\"> 这样子直接写在html页面上就能直接看到按钮是图片的！</em></em></em>

由于上面第二种图片按钮直接使用 “src”链接，但是如果一个网站很多需要到表单图片按钮展示的话，这样就会增加网页显示的时间！所以最好使用第一种方法。直接定义button的background。",
          "wp:post_id": "401",
          "wp:post_date": "2013-02-09 15:36:14",
          "wp:post_date_gmt": "2013-02-09 07:36:14",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "%e5%b7%a5%e4%bd%9c%e7%ac%94%e8%ae%b0%e5%9b%be%e7%89%87%e6%8c%89%e9%92%ae",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "%e5%b7%a5%e4%bd%9c%e7%ac%94%e8%ae%b0",
            "#cdata-section": "工作笔记"
          }
        },
        {
          "title": "2013年2月9日:张俪",
          "link": "http://www.pernav.com/2013%e5%b9%b42%e6%9c%889%e6%97%a5%e5%bc%a0%e4%bf%aa%e6%a2%a6/",
          "pubDate": "Sat, 09 Feb 2013 07:40:24 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=407"
          },
          "content:encoded": "<img alt=\"2013年2月9日\" src=\"http://farm9.staticflickr.com/8093/8457027697_4f8d3396d4_z.jpg\" />",
          "wp:post_id": "407",
          "wp:post_date": "2013-02-09 15:40:24",
          "wp:post_date_gmt": "2013-02-09 07:40:24",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "2013%e5%b9%b42%e6%9c%889%e6%97%a5%e5%bc%a0%e4%bf%aa%e6%a2%a6",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "beauty",
            "#cdata-section": "爱美人"
          }
        },
        {
          "title": "工作笔记:新闻列表",
          "link": "http://www.pernav.com/%e5%b7%a5%e4%bd%9c%e7%ac%94%e8%ae%b0%e6%96%b0%e9%97%bb%e5%88%97%e8%a1%a8/",
          "pubDate": "Sun, 10 Feb 2013 14:39:11 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=416"
          },
          "content:encoded": "日新闻列表:2011-6-20<a id=\"homepage1_HomePageDays_DaysList_DayItem_1_DayList_1_TitleUrl_4\" href=\"http://www.cnblogs.com/dounai/archive/2012/10/19/2731114.html\"></a>
<div>

<strong><span style=\"color: #ff6600;\">第一种方法：传统方法，右浮动，先日期后标题</span></strong>

Html Code
<pre class=\"lang:default decode:true crayon-selected\">&lt;li&gt;&lt;span&gt;2010-07-30&lt;/span&gt;&lt;a href=\"#\"&gt;css基础-基本知识点梳理&lt;/a&gt;&lt;/li&gt;</pre>
然后就是设置日期span向右浮动，这种方法相信大家都会，就不用多说了。当然也有初学者把span写在a标签后面然后设置float为right，在这种情况下如果不设置标题a向左浮动，那样在ie6,7下日期的span是在下一行显示的。

当然如果要对标题和日期都设置浮动的话，那么也可以是先标题后时间。

<span style=\"color: #ff6600;\"><strong>第二种方法：相对绝对定位</strong></span>

Html Code
<pre class=\"lang:default decode:true\">&lt;li&gt;&lt;a href=\"#\"&gt;css基础-基本知识点梳理&lt;/a&gt;&lt;span&gt;2010-07-30&lt;/span&gt;&lt;/li&gt;</pre>
这个方法就是设置li为相对定位，然后span为绝对定位到右边，当然也可以解决了。实现起来也比较简单，一说就可以明白。

<span style=\"color: #ff6600;\"><strong>第三种方法：text-align为right</strong></span>

Html Code
<pre class=\"lang:default decode:true\">&lt;li&gt;&lt;a href=\"#\"&gt;css基础-基本知识点梳理&lt;/a&gt;2010-07-30&lt;/li&gt;</pre>
这个是个人推荐的方法，其一先标题后时间，其二时间的span标签如果不做额外处理的话可以直接不要。

这个方法的实现原理是：先设置li的text-align为right，然后对标题a进行左浮动并设置text-align为left

<strong><span style=\"color: #00ccff;\">新闻列表demo，运用第三种方法</span></strong>
<ul id=\"newslist_demo\">
	<li>Lorem ipsum dolor sit amet, consectetuer adipiscing elit.2011-01-05</li>
	<li>Aliquam tincidunt mauris eu risus.2011-01-05</li>
	<li>Vestibulum auctor.2011-01-05</li>
</ul>
Html Code
<pre class=\"lang:default decode:true\">&lt;ul id=\"newslist_demo\"&gt;
   &lt;li&gt;&lt;a href=\"#\"&gt;Lorem ipsum dolor sit amet, consectetuer adipiscing elit.&lt;/a&gt;2011-01-05&lt;/li&gt;
   &lt;li&gt;&lt;a href=\"#\"&gt;Aliquam tincidunt mauris eu risus.&lt;/a&gt;2011-01-05&lt;/li&gt;
   &lt;li&gt;&lt;a href=\"#\"&gt;Vestibulum auctor.&lt;/a&gt;2011-01-05&lt;/li&gt;
&lt;/ul&gt;</pre>
Css Code
<pre class=\"lang:default decode:true crayon-selected\">#newslist_demo{width:500px;padding:10px;}
#newslist_demo li{text-align:right;color:#ccc;}
#newslist_demo li a{float:left;width:270px;text-align:left;white-space:nowrap;text-overflow:ellipsis;-o-text-overflow:ellipsis;overflow: hidden;}</pre>
注：这个demo还加入了text-overflow:ellipsis;效果，即超过的文字以省略号方式隐藏；

</div>",
          "wp:post_id": "416",
          "wp:post_date": "2013-02-10 22:39:11",
          "wp:post_date_gmt": "2013-02-10 14:39:11",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "%e5%b7%a5%e4%bd%9c%e7%ac%94%e8%ae%b0%e6%96%b0%e9%97%bb%e5%88%97%e8%a1%a8",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "%e5%b7%a5%e4%bd%9c%e7%ac%94%e8%ae%b0",
            "#cdata-section": "工作笔记"
          }
        },
        {
          "title": "2013年2月10日:王紫",
          "link": "http://www.pernav.com/2013%e5%b9%b42%e6%9c%8810%e6%97%a5%e7%8e%8b%e7%b4%ab/",
          "pubDate": "Sun, 10 Feb 2013 14:54:01 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=422"
          },
          "content:encoded": "<img src=\"http://farm9.staticflickr.com/8385/8460769569_afd9d4c49d_z.jpg\"  alt=\"2013年2月10日\">",
          "wp:post_id": "422",
          "wp:post_date": "2013-02-10 22:54:01",
          "wp:post_date_gmt": "2013-02-10 14:54:01",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "2013%e5%b9%b42%e6%9c%8810%e6%97%a5%e7%8e%8b%e7%b4%ab",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "beauty",
            "#cdata-section": "爱美人"
          }
        },
        {
          "title": "工作笔记:CSS缩写",
          "link": "http://www.pernav.com/%e5%b7%a5%e4%bd%9c%e7%ac%94%e8%ae%b0ie6ie7%e4%b8%8b%e8%ae%be%e7%bd%aebodyoverflowhidden%e4%b8%8d%e8%a6%81%e6%bb%9a%e5%8a%a8%e6%9d%a1%e5%a4%b1%e6%95%88bug/",
          "pubDate": "Wed, 13 Feb 2013 14:00:12 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=425"
          },
          "content:encoded": "常见CSS缩写属性：2011-8-10

作用：减少页面请求和css解析次数，提高页面响应速度

<strong><span style=\"color: #ff6600;\">1、CSS 文本：</span></strong>

body {font-family: Arial, Helvetica, sans-serif;font-size: 13px;font-weight:normal;font-variant: small-caps;font-style: italic;line-height: 150%;}

即可简写缩写为：<span style=\"color: #00ccff;\">font:font-style font-variant font-weight font-size/line-height font-family;</span>

<strong><span style=\"color: #ff6600;\">2、CSS 背景：</span></strong>

background-color:#F00;background-image:url(图片地址);background-position:bottom;background-repeat:no-repeat;

即可将背景CSS属性缩写为：<span style=\"color: #00ccff;\">background:#F00 url(图片地址) no-repeat left bottom;</span>

<span style=\"color: #ff6600;\"><strong>3、CSS 内补距(CSS padding):</strong></span>

padding-top:5px; padding-bottom:10px; padding-left:15px; padding-right:20px;

即可缩写为：<span style=\"color: #00ccff;\">padding:5px 20px 10px 15px;(顺序是上，右，下，左)</span>

padding-top:5px; padding-bottom:10px; padding-left:15px; padding-right:15px;

即可缩写为：<span style=\"color: #00ccff;\">padding:5px 15px 10px;(顺序是上，左右，下)</span>

或padding-top:5px; padding-bottom:5px; padding-left:10px; padding-right:10px;

缩写为：<span style=\"color: #00ccff;\">padding:5px 10px;(顺序是上下，左右)</span>

<strong><span style=\"color: #ff6600;\">4、CSS 外边距(CSS margin):</span></strong>

margin-top:5px; margin-bottom:10px; margin-left:15px; margin-right:20px;

即可缩写为：<span style=\"color: #00ccff;\">margin:5px 20px 10px 15px;(顺序是上，右，下，左)</span>

margin-top:5px; margin-bottom:10px; margin-left:15px; margin-right:15px;

即可缩写为：<span style=\"color: #00ccff;\">margin:5px 15px 10px;(顺序是上，左右，下)</span>

或margin-top:5px; margin-bottom:5px; margin-left:10px; margin-right:10px;

缩写为：<span style=\"color: #00ccff;\">margin:5px 10px;(顺序是上下，左右)</span>

<strong><span style=\"color: #ff6600;\">5、CSS 边框：</span></strong>

border-left:1px solid #000;border-right:1px solid #000;border-top:1px solid #000;border-bottom:1px solid #000;

即可缩写为：<span style=\"color: #00ccff;\">border:1px solid #000;</span>",
          "wp:post_id": "425",
          "wp:post_date": "2013-02-13 22:00:12",
          "wp:post_date_gmt": "2013-02-13 14:00:12",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "%e5%b7%a5%e4%bd%9c%e7%ac%94%e8%ae%b0ie6ie7%e4%b8%8b%e8%ae%be%e7%bd%aebodyoverflowhidden%e4%b8%8d%e8%a6%81%e6%bb%9a%e5%8a%a8%e6%9d%a1%e5%a4%b1%e6%95%88bug",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "%e5%b7%a5%e4%bd%9c%e7%ac%94%e8%ae%b0",
            "#cdata-section": "工作笔记"
          }
        },
        {
          "title": "2013年2月13日:少女时代",
          "link": "http://www.pernav.com/2013%e5%b9%b42%e6%9c%8813%e6%97%a5%e5%b0%91%e5%a5%b3%e6%97%b6%e4%bb%a3/",
          "pubDate": "Wed, 13 Feb 2013 14:20:57 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=434"
          },
          "content:encoded": "<img src=\"http://farm9.staticflickr.com/8240/8471122642_c7dd56d634_z.jpg\"  alt=\"2013年2月13日\">",
          "wp:post_id": "434",
          "wp:post_date": "2013-02-13 22:20:57",
          "wp:post_date_gmt": "2013-02-13 14:20:57",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "2013%e5%b9%b42%e6%9c%8813%e6%97%a5%e5%b0%91%e5%a5%b3%e6%97%b6%e4%bb%a3",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "beauty",
            "#cdata-section": "爱美人"
          }
        },
        {
          "title": "工作笔记:清除浮动解决方案",
          "link": "http://www.pernav.com/%e5%b7%a5%e4%bd%9c%e7%ac%94%e8%ae%b0%e6%b8%85%e9%99%a4%e6%b5%ae%e5%8a%a8%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88/",
          "pubDate": "Thu, 14 Feb 2013 15:05:25 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=437"
          },
          "content:encoded": "清除浮动解决方案:2011-9-1
<h3>两种情况</h3>
清除浮动包括清除子元素的浮动和清除上级元素的浮动，其中清除上级元素的浮动，只需设置clear为both就可以了，而清除子元素的浮动则可以用空标签法、clearfix方法或overflow方法。因清除上级元素的浮动比较简单，而空标签法清除子元素浮动会增加额外标签，所以在这里主要说clearfix方法、overflow方法。

<strong>为什么要清除浮动</strong>

一个块级元素的高度如果没有设置height，那么其高度就是由里面的子元素来撑开的，如果子元素使用浮动，脱离了标准的文档流，那么父元素的高度会将其忽略，你可以使用firebug查看下如果不清除浮动，父元素会出现高度不够，那样如果设置border或者background都得不到正确的解析。

<strong><span style=\"color: #ff6600;\">一、清除子元素浮动clearfix方法</span></strong>

/*简洁版*/
<pre class=\"lang:default decode:true\">.clearfix:before, .clearfix:after{content:\"\";display:table;}
.clearfix:after{clear:both;overflow:hidden;}
.clearfix{zoom:1;}</pre>
/* 经典版 */
<pre class=\"lang:default decode:true\">.clearfix{visibility:hidden;display:block;font-size:0;content:\".\";clear:both;height:0;}</pre>
注：clearfix的方法主要就是在浮动元素的父元素上加上一个clearfix class，然后这个父元素的框就会包括所有的浮动子元素。

<strong><span style=\"color: #ff6600;\">二、清除子元素浮动overflow方法</span></strong>

/* overflow:auto */
<pre class=\"lang:default decode:true\">#demo2{overflow:auto;*zoom:1;}</pre>
/*或 overflow:hidden */
<pre class=\"lang:default decode:true\">#demo2{overflow:hidden;*zoom:1;}</pre>
注：这种方法主要是对父元素设置css，所以不需要加个class，下面的inline-block方法相同，只需设置父元素的css即可",
          "wp:post_id": "437",
          "wp:post_date": "2013-02-14 23:05:25",
          "wp:post_date_gmt": "2013-02-14 15:05:25",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "%e5%b7%a5%e4%bd%9c%e7%ac%94%e8%ae%b0%e6%b8%85%e9%99%a4%e6%b5%ae%e5%8a%a8%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "%e5%b7%a5%e4%bd%9c%e7%ac%94%e8%ae%b0",
            "#cdata-section": "工作笔记"
          }
        },
        {
          "title": "2013年2月14日:黄晓明",
          "link": "http://www.pernav.com/2013%e5%b9%b42%e6%9c%8814%e6%97%a5/",
          "pubDate": "Thu, 14 Feb 2013 15:17:17 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=446"
          },
          "content:encoded": "<img src=\"http://farm9.staticflickr.com/8374/8472819591_91603280a6_z.jpg\"  alt=\"2013年2月14日\">",
          "wp:post_id": "446",
          "wp:post_date": "2013-02-14 23:17:17",
          "wp:post_date_gmt": "2013-02-14 15:17:17",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "2013%e5%b9%b42%e6%9c%8814%e6%97%a5",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "beauty",
            "#cdata-section": "爱美人"
          }
        },
        {
          "title": "工作笔记:单行省略号纯css解决方案",
          "link": "http://www.pernav.com/%e5%b7%a5%e4%bd%9c%e7%ac%94%e8%ae%b0%e5%8d%95%e8%a1%8c%e7%9c%81%e7%95%a5%e5%8f%b7%e7%ba%afcss%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88/",
          "pubDate": "Sat, 16 Feb 2013 01:10:26 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=474"
          },
          "content:encoded": "单行省略号纯css解决方案:2011-10-12

<strong>核心css代码</strong>

<strong></strong>firefox从7.0开始兼容text-overflow:ellipsis;这样的话，以后单行的省略号就可以不借助后台程序或者js来做到浏览器兼容了，其核心代码为：
<pre class=\"lang:default decode:true crayon-selected\">.selector{
text-overflow: ellipsis;/*这就是省略号喽,opera也已校正对它的支持,可大胆使用*/ 
overflow: hidden;/*设置超过的隐藏*/
white-space: nowrap;/*设置不折行*/
width:200px;/*设置宽度*/
}</pre>
<strong><span style=\"color: #ff6600;\">一、demo1 宽度为350px</span></strong>

Html Code
<pre class=\"lang:default decode:true\">&lt;ul id=\"demo1\"&gt;
&lt;li&gt;Lorem ipsum dolor sit amet, consectetuer adipiscing elit.&lt;/li&gt;
&lt;li&gt;Aliquam tincidunt mauris eu risus.&lt;/li&gt;
&lt;li&gt;Vestibulum auctor dapibus.&lt;/li&gt;
&lt;/ul&gt;</pre>
Css Code
<pre class=\"lang:default decode:true\">#demo1 li{
text-overflow: ellipsis; 
overflow: hidden;
white-space: nowrap;
width:250px;
margin-left:12px;
list-style:disc inside none; 
}</pre>
注：因为设置了li的overflow为hidden，所以如果要设置其list-style，则需要设置为inside，而不是outside，不然将会看不见你设置的list-style效果

<strong><span style=\"color: #ff6600;\">二、demo2 宽度为104px，设置链接标题在一行显示超过省略号</span></strong>

Html Code
<pre class=\"lang:default decode:true\">&lt;ul id=\"demo2\" class=\"nostyle clearfix\"&gt;
&lt;li&gt;&lt;a href=\"#\"&gt;&lt;img src=\"demo\" alt=\"img1\"&gt;&lt;strong&gt;解决方案&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=\"#\"&gt;&lt;img src=\"demo\" alt=\"img2\"&gt;&lt;strong&gt;解决方案&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=\"#\"&gt;&lt;img src=\"demo\" alt=\"img3\"&gt;&lt;strong&gt;解决方案&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</pre>
Css Code
<pre class=\"lang:default decode:true\">#demo2 li{width:104px;float:left;margin-right:20px;display:inline;}
#demo2 img{padding:2px;border:1px solid #ccc;}
#demo2 strong{text-overflow: ellipsis; overflow: hidden;white-space: nowrap;width:104px;display:block;}
.nostyle{list-style:none outside none;}
.clearfix:after{visibility: hidden;display: block;font-size:0;content: \".\";clear: both;height:0;}</pre>
注：请注意不要在行内元素里面使用块级元素，如这个demo我们使用strong作为标题的标签而不是h或者p.",
          "wp:post_id": "474",
          "wp:post_date": "2013-02-16 09:10:26",
          "wp:post_date_gmt": "2013-02-16 01:10:26",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "%e5%b7%a5%e4%bd%9c%e7%ac%94%e8%ae%b0%e5%8d%95%e8%a1%8c%e7%9c%81%e7%95%a5%e5%8f%b7%e7%ba%afcss%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "%e5%b7%a5%e4%bd%9c%e7%ac%94%e8%ae%b0",
            "#cdata-section": "工作笔记"
          }
        },
        {
          "title": "IE6bug:demo2min-height最小高度max-height最大高度max-width最大宽度min-width最小宽度bug",
          "link": "http://www.pernav.com/ie6bugdemo2min-height%e6%9c%80%e5%b0%8f%e9%ab%98%e5%ba%a6max-height%e6%9c%80%e5%a4%a7%e9%ab%98%e5%ba%a6max-width%e6%9c%80%e5%a4%a7%e5%ae%bd%e5%ba%a6min-width%e6%9c%80%e5%b0%8f%e5%ae%bd%e5%ba%a6/",
          "pubDate": "Sat, 16 Feb 2013 01:22:48 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=478"
          },
          "content:encoded": "<strong><span style=\"color: #ff6600;\">一、demo2Amin-height最小高度</span></strong>
<pre class=\"lang:default decode:true\">&lt;!DOCTYPE HTML&gt;
&lt;html lang=\"zh-CN\"&gt;
&lt;head&gt;
	&lt;meta charset=\"UTF-8\"&gt;
	&lt;title&gt;min-height&lt;/title&gt;
	&lt;link rel=\"stylesheet\" href=\"base.css\" /&gt;
	&lt;style type=\"text/css\"&gt;
	/* demo1 */
	.demo1{
		width: 300px;background: #95cfef;border: 1px solid #36f;
		min-height: 100px;		
		height: auto !important;/*现代浏览器下，内容高度超过100px时自动获得其高度	*/				height:100px;/*此值设置和min-height值一样，因为IE6下元素高度会根据内容自己的高度而定，所以内容高度低于min-height值时，为了达到min-height效果，需要给元素一个显式的高度值*/	}
	/* demo2 */
	.demo2{
		width: 300px;background: #95cfef;border: 1px solid #36f;
		min-height: 100px;	height:100px;/*此值设置和min-height值一样，因为IE6下元素高度会根据内容自己的高度而定，所以内容高度低于min-height值时，为了达到min-height效果，需要给元素一个显式的高度值*/}
	html&gt;body .demo2{
		height: auto;/*只有现代浏览器才能识别*/}
	&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
	&lt;h1&gt;产生条件&lt;/h1&gt;
	&lt;p&gt;在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min-height和max-height,min-width,max-width来控制元素的最小高度和最小宽度值。在别的浏览器都运行正常，可唯独这个IE6不识别人家。&lt;/p&gt;
	&lt;h2&gt;解决方法&lt;/h2&gt;
	&lt;h3&gt;min-height解决方法一&lt;/h3&gt;
	&lt;p&gt;采用!important方法修复&lt;/p&gt;
	&lt;div class=\"demo1\"&gt;在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min&lt;/div&gt;
	&lt;h3&gt;min-height解决方法二&lt;/h3&gt;
	&lt;p&gt;采用子选择器方法来修复&lt;/p&gt;
	&lt;div class=\"demo2\"&gt;在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</pre>
<strong><span style=\"color: #ff6600;\"> 二、demo2Bmax-height最大高度</span></strong>
<pre class=\"lang:default decode:true\">&lt;!DOCTYPE HTML&gt;
&lt;html lang=\"zh-CN\"&gt;
&lt;head&gt;
	&lt;meta charset=\"UTF-8\"&gt;
	&lt;title&gt;max-height最大高度&lt;/title&gt;
	&lt;link rel=\"stylesheet\" href=\"base.css\" /&gt;
	&lt;style type=\"text/css\"&gt;
	/* max-height for standards-compliant browsers */
	.demo1{
		background: #95cfef;border: 1px solid #36f;
		max-height:100px;	
		_height:expression(document.body.clientHeight &gt; 100? \"100px\":\"auto\");/* 解决方案 */
		overflow:hidden; /* 必须加 */
	}	
	&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
	&lt;h1&gt;产生条件&lt;/h1&gt;
	&lt;p&gt;在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min-height和max-height,min-width,max-width来控制元素的最小高度和最小宽度值。在别的浏览器都运行正常，可唯独这个IE6不识别人家。&lt;/p&gt;
	&lt;h2&gt;解决方法&lt;/h2&gt;
	&lt;h3&gt;max-height解决方法&lt;/h3&gt;
	&lt;p&gt;采用JS表达式：三目修复&lt;/p&gt;
	&lt;div class=\"demo1\"&gt;在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</pre>
<strong><span style=\"color: #ff6600;\">三、demo2Cmax-width最大宽度</span></strong>
<pre class=\"lang:default decode:true\">&lt;!DOCTYPE HTML&gt;
&lt;html lang=\"zh-CN\"&gt;
&lt;head&gt;
	&lt;meta charset=\"UTF-8\"&gt;
	&lt;title&gt;max-width最大高度&lt;/title&gt;
	&lt;link rel=\"stylesheet\" href=\"base.css\" /&gt;
	&lt;style type=\"text/css\"&gt;	
	.demo1{		
		height:100px;background:#95cfef;border: 1px solid #36f;
		max-width:400px;
		width:expression(document.body.clientWidth &gt; 399 ? \"400px\" : \"auto\");/* 解决方案 */
		overflow:hidden; /* 必须加 */
	}
	&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
	&lt;h1&gt;产生条件&lt;/h1&gt;
	&lt;p&gt;在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min-height和max-height,min-width,max-width来控制元素的最小高度和最小宽度值。在别的浏览器都运行正常，可唯独这个IE6不识别人家。&lt;/p&gt;
	&lt;h2&gt;解决方法&lt;/h2&gt;
	&lt;h3&gt;max-width解决方法一&lt;/h3&gt;
	&lt;p&gt;采用JS修复&lt;/p&gt;
	&lt;div class=\"demo1\"&gt;在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</pre>
<strong><span style=\"color: #ff6600;\">四、demo2Dmin-width最小宽度</span></strong>
<pre class=\"lang:default decode:true\">&lt;!DOCTYPE HTML&gt;
&lt;html lang=\"zh-CN\"&gt;
&lt;head&gt;
	&lt;meta charset=\"UTF-8\"&gt;
	&lt;title&gt;max-width最大高度&lt;/title&gt;
	&lt;link rel=\"stylesheet\" href=\"base.css\" /&gt;
	&lt;style type=\"text/css\"&gt;
	.demo1{
		height:150px;
		background:#95cfef;border: 1px solid #36f;
		min-width:300px;
		width:expression(document.body.clientWidth &lt; 301 ? \"300px\":\"auto\");
	}
	&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
	&lt;h1&gt;产生条件&lt;/h1&gt;
	&lt;p&gt;在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min-height和max-height,min-width,max-width来控制元素的最小高度和最小宽度值。在别的浏览器都运行正常，可唯独这个IE6不识别人家。&lt;/p&gt;
	&lt;h2&gt;解决方法&lt;/h2&gt;
	&lt;h3&gt;max-width解决方法一&lt;/h3&gt;
	&lt;p&gt;采用JS修复&lt;/p&gt;
	&lt;div class=\"demo1\"&gt;在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min在Web页面设计中，有时为了达到元素的的统一渲染的风格，我们有时需要使用min&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</pre>",
          "wp:post_id": "478",
          "wp:post_date": "2013-02-16 09:22:48",
          "wp:post_date_gmt": "2013-02-16 01:22:48",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "ie6bugdemo2min-height%e6%9c%80%e5%b0%8f%e9%ab%98%e5%ba%a6max-height%e6%9c%80%e5%a4%a7%e9%ab%98%e5%ba%a6max-width%e6%9c%80%e5%a4%a7%e5%ae%bd%e5%ba%a6min-width%e6%9c%80%e5%b0%8f%e5%ae%bd%e5%ba%a6",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "bugs",
            "#cdata-section": "BUGS"
          }
        },
        {
          "title": "IE6bug:demo3列表li的楼梯bug",
          "link": "http://www.pernav.com/ie6bugdemo3%e5%88%97%e8%a1%a8li%e7%9a%84%e6%a5%bc%e6%a2%afbug/",
          "pubDate": "Sat, 16 Feb 2013 01:31:57 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=482"
          },
          "content:encoded": "<pre class=\"lang:default decode:true crayon-selected\">&lt;!DOCTYPE HTML&gt;
&lt;html lang=\"zh-CN\"&gt;
&lt;head&gt;
	&lt;meta charset=\"UTF-8\"&gt;
	&lt;title&gt;IE6列表li的楼梯Bug&lt;/title&gt;
	&lt;link rel=\"stylesheet\" href=\"base.css\" /&gt;
	&lt;style type=\"text/css\"&gt;
	/* demo1 */
	.demo1{  
        list-style: none;  
    }  
    .demo1 li{float:left;}  /* 解决方案 */
    .demo1 li a {  
        display: block;  
        width: 130px;  
        height: 30px;  
        text-align: center;  
        color: #fff;  
        float: left;  
        background: #95CFEF;  
        border: solid 1px #36F;  
        margin: 30px 5px;  
    }
	/* demo2 */
	.demo2{  
        list-style: none;  
    }  
    .demo2 li{display:inline;}  /* 解决方案 */
    .demo2 li a {  
        display: block;  
        width: 130px;  
        height: 30px;  
        text-align: center;  
        color: #fff;  
        float: left;  
        background: #95CFEF;  
        border: solid 1px #36F;  
        margin: 30px 5px;  
    }
	&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h1&gt;产生条件&lt;/h1&gt;
&lt;p&gt;li在IE6下呈楼梯状的效果，也可以算是IE6的一个经典Bug了吧。他通常发生在li中放置了一些元素内容（比如说a）而且对其进行浮动，但li本身不浮动，此时在IE下就会有楼梯上了。&lt;/p&gt;
&lt;h2&gt;解决方法&lt;/h2&gt;
&lt;h3&gt;修复方法一：&lt;/h3&gt;
&lt;p&gt;解决这个bug最简单的方法，只需要在li元素中也加上一个浮动，所以你只需这样做就能解决&lt;/p&gt;
&lt;ul class=\"demo1 clearfix\"&gt;  
	&lt;li&gt;&lt;a href=\"#\"&gt;&lt;/a&gt;&lt;/li&gt;  
	&lt;li&gt;&lt;a href=\"#\"&gt;&lt;/a&gt;&lt;/li&gt;  
	&lt;li&gt;&lt;a href=\"#\"&gt;&lt;/a&gt;&lt;/li&gt;  
&lt;/ul&gt;
&lt;h3 class=\"cb\"&gt;修复方法二&lt;/h3&gt;
&lt;p&gt;这个方法二也很简单，就是在li元素上应用“display:inline”&lt;/p&gt;
&lt;ul class=\"demo2\"&gt;  
	&lt;li&gt;&lt;a href=\"#\"&gt;&lt;/a&gt;&lt;/li&gt;  
	&lt;li&gt;&lt;a href=\"#\"&gt;&lt;/a&gt;&lt;/li&gt;  
	&lt;li&gt;&lt;a href=\"#\"&gt;&lt;/a&gt;&lt;/li&gt;  
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</pre>",
          "wp:post_id": "482",
          "wp:post_date": "2013-02-16 09:31:57",
          "wp:post_date_gmt": "2013-02-16 01:31:57",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "ie6bugdemo3%e5%88%97%e8%a1%a8li%e7%9a%84%e6%a5%bc%e6%a2%afbug",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "bugs",
            "#cdata-section": "BUGS"
          }
        },
        {
          "title": "IE6bug:demo4li空白间距bug",
          "link": "http://www.pernav.com/ie6bugdemo4li%e7%a9%ba%e7%99%bd%e9%97%b4%e8%b7%9d/",
          "pubDate": "Sat, 16 Feb 2013 01:47:36 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=489"
          },
          "content:encoded": "<pre class=\"lang:default decode:true\">&lt;!DOCTYPE HTML&gt;
&lt;html lang=\"zh-CN\"&gt;
&lt;head&gt;
	&lt;meta charset=\"UTF-8\"&gt;
	&lt;title&gt;IE6li空白间距&lt;/title&gt;
	&lt;link rel=\"stylesheet\" href=\"base.css\" /&gt;
	&lt;style type=\"text/css\"&gt;
	/* demo1*/     
	.demo1 li a{  
		width: 200px;/* 解决方案 */
		background: #95CFEF;  
		display: block;  
	}
	/* demo2*/   
	.demo2 li a{  		
		background: #95CFEF;  
		display:block;
		float: left; /* 解决方案 */
		clear: left;/* 解决方案 */
	}
	/* demo3*/  	
	.demo3 li a{
		background: #95CFEF;  
		display: block;
	}	
	.demo3 li{
		display:inline;/* 解决方案 *	/
	}
	/* demo4*/
	.demo4 li a{
		background: #95CFEF;  
		display: block;
	}	
	.demo4 li{
	border-bottom: 1px solid #666;/*解决方案，但生成了一个新的问题，就是li底部有一条实现，如果实线颜色和页面背景色不一致将会给你带来视觉上的不同，所以最好底线颜色设置成你页面相同的背景色；*/}
	/*不能直接写在这个样式里面，要再写一个样式*/
	.demo4 li {border-bottom: 1px solid #ffffff; display:block; margin-bottom: -1px;}
	&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
	&lt;h1&gt;产生条件&lt;/h1&gt;
	&lt;p&gt;这个Bug也是针对于li的，在IE下会无端增中li与li之间的垂直距离。&lt;/p&gt;
	&lt;h2&gt;解决方法&lt;/h2&gt;
	&lt;h3&gt;方法一&lt;/h3&gt;
	&lt;p&gt;最简单的办法就是给&lt;a&gt;标签显式的定义一个宽度，用声明宽度的方法来触发IE浏览器的hasLayout，当然你也可以显式的定义一个高度，同样也可以解决&lt;/p&gt;
	&lt;ul class=\"demo1\"&gt;  
		&lt;li&gt;&lt;a href=\"#\"&gt;Link 1&lt;/a&gt;&lt;/li&gt;  
		&lt;li&gt;&lt;a href=\"#\"&gt;Link 2&lt;/a&gt;&lt;/li&gt;  
		&lt;li&gt;&lt;a href=\"#\"&gt;Link 3&lt;/a&gt;&lt;/li&gt;  
	&lt;/ul&gt;
	&lt;h3&gt;方法二&lt;/h3&gt;
	&lt;p&gt;在&lt;a&gt;标签上进行浮动，并且清除浮动&lt;/p&gt;
	&lt;ul class=\"demo2 clearfix\"&gt;  
		&lt;li&gt;&lt;a href=\"#\"&gt;Link 1&lt;/a&gt;&lt;/li&gt;  
		&lt;li&gt;&lt;a href=\"#\"&gt;Link 2&lt;/a&gt;&lt;/li&gt;  
		&lt;li&gt;&lt;a href=\"#\"&gt;Link 3&lt;/a&gt;&lt;/li&gt;  
	&lt;/ul&gt;
	&lt;h3&gt;方法三&lt;/h3&gt;
	&lt;p&gt;只在li标签上加上一个行内元素display:inline;显示&lt;/p&gt;
	&lt;ul class=\"demo3\"&gt;  
		&lt;li&gt;&lt;a href=\"#\"&gt;Link 1&lt;/a&gt;&lt;/li&gt;  
		&lt;li&gt;&lt;a href=\"#\"&gt;Link 2&lt;/a&gt;&lt;/li&gt;  
		&lt;li&gt;&lt;a href=\"#\"&gt;Link 3&lt;/a&gt;&lt;/li&gt;  
	&lt;/ul&gt;
	&lt;h3&gt;方法四&lt;/h3&gt;
	&lt;p&gt;在每个列表li上设置一个底边实线&lt;/p&gt;
	&lt;ul class=\"demo4\"&gt;  
		&lt;li&gt;&lt;a href=\"#\"&gt;Link 1&lt;/a&gt;&lt;/li&gt;  
		&lt;li&gt;&lt;a href=\"#\"&gt;Link 2&lt;/a&gt;&lt;/li&gt;  
		&lt;li&gt;&lt;a href=\"#\"&gt;Link 3&lt;/a&gt;&lt;/li&gt;  
	&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</pre>",
          "wp:post_id": "489",
          "wp:post_date": "2013-02-16 09:47:36",
          "wp:post_date_gmt": "2013-02-16 01:47:36",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "ie6bugdemo4li%e7%a9%ba%e7%99%bd%e9%97%b4%e8%b7%9d",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "bugs",
            "#cdata-section": "BUGS"
          }
        },
        {
          "title": "IE6bug:demo5无法设置元素的微高bug",
          "link": "http://www.pernav.com/ie6bugdemo5%e6%97%a0%e6%b3%95%e8%ae%be%e7%bd%ae%e5%85%83%e7%b4%a0%e7%9a%84%e5%be%ae%e9%ab%98/",
          "pubDate": "Sat, 16 Feb 2013 01:49:59 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=491"
          },
          "content:encoded": "<pre class=\"lang:default decode:true crayon-selected\">&lt;!DOCTYPE HTML&gt;
&lt;html lang=\"zh-CN\"&gt;
&lt;head&gt;
	&lt;meta charset=\"UTF-8\"&gt;
	&lt;title&gt;IE6设置元素的微高&lt;/title&gt;
	&lt;link rel=\"stylesheet\" href=\"base.css\" /&gt;
	&lt;style type=\"text/css\"&gt;
	/* demo1*/
	.demo1{
		background: #95CFEF;  
		border: solid 1px #36F;  
		width: 300px;  
		height: 2px;  
		margin: 30px 0;
		font-size: 0;/* 解决方案 */
		line-height: 0;/* 解决方案 */
	}
	/* demo2*/
	.demo2{
		background: #95CFEF;  
		border: solid 1px #36F;  
		width: 300px;  
		height: 2px;  
		margin: 30px 0;
		overflow: hidden;
	}	
	&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
	&lt;h1&gt;产生条件&lt;/h1&gt;
	&lt;p&gt;有时我们在Web页面中使用div元素来模拟line或者说制作白色间距，显显在元素中定义了好少的高度，比如说2px的height，可是在IE6下，他始终都不以2px的高度见世。&lt;/p&gt;
	&lt;h2&gt;解决方法&lt;/h2&gt;
	&lt;h3&gt;方法一&lt;/h3&gt;
	&lt;p&gt;造成这要的Bug其实很简单，因为在IE浏览器下，他会拒绝高度小于字号的设置，这样解决起来就很简单了，我们只需要把元素的字号设置为“0”，如果为了更安全，你最好加上“line-height”也为“0”。&lt;/p&gt;
	&lt;div class=\"demo1\"&gt;&lt;/div&gt;	
	&lt;h3&gt;方法二&lt;/h3&gt;
	&lt;p&gt;利用“overflow:hidden”将超过高度的部分直接切掉，从而达到2px的微高度设置。&lt;/p&gt;
	&lt;div class=\"demo2\"&gt;&lt;/div&gt;	
&lt;/body&gt;
&lt;/html&gt;</pre>",
          "wp:post_id": "491",
          "wp:post_date": "2013-02-16 09:49:59",
          "wp:post_date_gmt": "2013-02-16 01:49:59",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "ie6bugdemo5%e6%97%a0%e6%b3%95%e8%ae%be%e7%bd%ae%e5%85%83%e7%b4%a0%e7%9a%84%e5%be%ae%e9%ab%98",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "bugs",
            "#cdata-section": "BUGS"
          }
        },
        {
          "title": "IE6\\7bug:demo6overflowauto与positionrelative的碰撞bug",
          "link": "http://www.pernav.com/ie67bugdemo6overflowauto%e4%b8%8epositionrelative%e7%9a%84%e7%a2%b0%e6%92%9e/",
          "pubDate": "Sat, 16 Feb 2013 01:58:16 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=497"
          },
          "content:encoded": "<pre class=\"lang:default decode:true\">&lt;!DOCTYPE HTML&gt;
&lt;html lang=\"zh-CN\"&gt;
&lt;head&gt;
	&lt;meta charset=\"UTF-8\"&gt;
	&lt;title&gt;IE6 和 IE7距出边界的Bug&lt;/title&gt;
	&lt;link rel=\"stylesheet\" href=\"base.css\" /&gt;
	&lt;style type=\"text/css\"&gt;
	#wrap{
		border: 1px solid red;
		height: 150px;
		width: 200px;
		background: orange;
		overflow: auto;
		position:relative;/* 解决方案 */
	}
	#subDiv {
		border: 1px dotted blue;
		background: lime;
		height: 200px;
		width: 150px;
		position: relative;
	}
	&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
	&lt;h1&gt;产生条件&lt;/h1&gt;
	&lt;p&gt;这个Bug也称作“距出边界的Bug”,而这个Bug 只出现在 IE6 和 IE7 中,有两个块元素,元素设置了 overflow: auto;子元素设置 position:relative 并且其高度大于父元素,在 IE6 和 IE7 中会产生一个比较难看的 Bug,也就是子元素 块不被隐藏会溢出父元素块,而在 IE8 和 FF 还有 IE5.5 中又显示是正常,&lt;/p&gt;
	&lt;h2&gt;解决方法&lt;/h2&gt;
	&lt;p&gt;我们只要在父元素中也设置一个position:relative;属性,就会使 IE6 和 IE7 回复到正常状态。&lt;/p&gt;
	&lt;div id=\"wrap\"&gt;
		&lt;div id=\"subDiv\"&gt;&lt;/div&gt;
	&lt;/div&gt;	
&lt;/body&gt;
&lt;/html&gt;</pre>",
          "wp:post_id": "497",
          "wp:post_date": "2013-02-16 09:58:16",
          "wp:post_date_gmt": "2013-02-16 01:58:16",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "ie67bugdemo6overflowauto%e4%b8%8epositionrelative%e7%9a%84%e7%a2%b0%e6%92%9e",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "bugs",
            "#cdata-section": "BUGS"
          }
        },
        {
          "title": "IE6bug:demo7浮动层错位bug",
          "link": "http://www.pernav.com/ie6bugdemo7%e6%b5%ae%e5%8a%a8%e5%b1%82%e9%94%99%e4%bd%8d/",
          "pubDate": "Sat, 16 Feb 2013 02:01:16 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=500"
          },
          "content:encoded": "<pre class=\"lang:default decode:true \" >&lt;!DOCTYPE HTML&gt;
&lt;html lang=\"zh-CN\"&gt;
&lt;head&gt;
	&lt;meta charset=\"UTF-8\"&gt;
	&lt;title&gt;IE6浮动层错位&lt;/title&gt;
	&lt;link rel=\"stylesheet\" href=\"base.css\" /&gt;
	&lt;style type=\"text/css\"&gt;
	 #container{  
		background: #C2DFEF;  
		border: solid 1px #36F;  
		width: 365px;  
		margin: 30px;  
		padding: 5px;  
		overflow: auto;  
    }
	#left,#right{  
		background: #95CFEF;  
		border: solid 1px #36F;  
		width: 100px;  
		height: 150px;  
		margin: 30px;  
		padding: 10px;  
		float: left;  
		display:inline;		/* 双边距解决方案 */
		overflow:hidden;	/* 超出解决方案 */
	}	
	&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
	&lt;h1&gt;产生条件&lt;/h1&gt;
	&lt;p&gt;在 Firefox、IE7、IE8 及其他标准浏览 器里,超出的内容仅仅只是超出边缘;但在 IE6 中容器会忽 视定义的 width 值,宽度会错误地随内 容宽度增长而增长。如果在这个浮动元素之后还跟着一个 浮动元素,那么就会导致错位问题。&lt;/p&gt;
	&lt;h2&gt;解决方法&lt;/h2&gt;
	&lt;p&gt;解决这样的bug没有什么好方法，只能在元素中加上overflow:hidden，将多出来的内容直接切掉&lt;/p&gt;
	&lt;div id=\"container\"&gt;  
		&lt;div id=\"left\"&gt;文字内容太长了，文字内容太长了fdasdfadsfadsssssssssssssssssss&lt;/div&gt;  
		&lt;div id=\"right\"&gt;&lt;/div&gt;  
	&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</pre> 
",
          "wp:post_id": "500",
          "wp:post_date": "2013-02-16 10:01:16",
          "wp:post_date_gmt": "2013-02-16 02:01:16",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "ie6bugdemo7%e6%b5%ae%e5%8a%a8%e5%b1%82%e9%94%99%e4%bd%8d",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "bugs",
            "#cdata-section": "BUGS"
          }
        },
        {
          "title": "IE6bug:demo8绝对定位、浮动元素混用时bug",
          "link": "http://www.pernav.com/ie6bugdemo8%e7%bb%9d%e5%af%b9%e5%ae%9a%e4%bd%8d%e3%80%81%e6%b5%ae%e5%8a%a8%e5%85%83%e7%b4%a0%e6%b7%b7%e7%94%a8%e6%97%b6bug/",
          "pubDate": "Sat, 16 Feb 2013 02:05:09 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=502"
          },
          "content:encoded": "<pre class=\"lang:default decode:true \" >&lt;!DOCTYPE HTML&gt;
&lt;html lang=\"zh-CN\"&gt;
&lt;head&gt;
	&lt;meta charset=\"UTF-8\"&gt;
	&lt;title&gt;IE6中绝对定位、浮动元素混用时的BUG&lt;/title&gt;
	&lt;link rel=\"stylesheet\" href=\"base.css\" /&gt;
	&lt;style type=\"text/css\"&gt;    
	*{ padding:0; margin:0;}
	.content{
		width:600px;			
		height:300px;
		background:pink;
		position:relative;
		/*display:inline; 解决方案1 */
	}
	.abs{position:absolute; left:0; top:0; width:600px; height:120px; background:#1f3a87; }
	.main{float:left; width:300px; height:200px; background:#f3f3f3; }
	.sub{float:left;width:300px; height:200px; background:#bc2931;
	/*margin-right:-3px;解决方案2 */}
	&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
	&lt;h1&gt;产生条件&lt;/h1&gt;
	&lt;p&gt;一个内容区块，其中包含两个浮动的box，外加一个绝对定位的box，设置如下样式时会发生IE6浮动元素消失的BUG。&lt;/p&gt;
	&lt;h2&gt;解决方法&lt;/h2&gt;
	&lt;p&gt;1、给content加一个display:inline样式可解决。&lt;/p&gt;
	&lt;p&gt;2、各元素的宽度main + sub + 2&amp;lt;content。给sub加一个margin-right:-3px样式，让main和sub不要撑满content可解决。&lt;/p&gt;
	&lt;p&gt;3、在main元素之前加一个空的&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;，如…&amp;ltdiv&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class=”main”&amp;gt;&lt;/p&gt;
	&lt;div class=\"content\"&gt;
	  &lt;div class=\"abs\"&gt;abs&lt;/div&gt; 
	  &lt;div&gt;&lt;/div&gt;&lt;!-- 解决方案3 --&gt;
	  &lt;div class=\"main\"&gt;main&lt;/div&gt;
	  &lt;div class=\"sub\"&gt;sub&lt;/div&gt;
	&lt;/div&gt; 
&lt;/body&gt;
&lt;/html&gt;</pre> 
",
          "wp:post_id": "502",
          "wp:post_date": "2013-02-16 10:05:09",
          "wp:post_date_gmt": "2013-02-16 02:05:09",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "ie6bugdemo8%e7%bb%9d%e5%af%b9%e5%ae%9a%e4%bd%8d%e3%80%81%e6%b5%ae%e5%8a%a8%e5%85%83%e7%b4%a0%e6%b7%b7%e7%94%a8%e6%97%b6bug",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "bugs",
            "#cdata-section": "BUGS"
          }
        },
        {
          "title": "IE6bug:demo9克隆文本的Bug",
          "link": "http://www.pernav.com/ie6bugdemo9%e5%85%8b%e9%9a%86%e6%96%87%e6%9c%ac%e7%9a%84bug/",
          "pubDate": "Sat, 16 Feb 2013 02:08:32 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=512"
          },
          "content:encoded": "<pre class=\"lang:default decode:true \" >&lt;!DOCTYPE HTML&gt;
&lt;html lang=\"zh-CN\"&gt;
&lt;head&gt;
	&lt;meta charset=\"UTF-8\"&gt;
	&lt;title&gt;IE6克隆文本的Bug&lt;/title&gt;
	&lt;link rel=\"stylesheet\" href=\"base.css\" /&gt;
	&lt;style type=\"text/css\"&gt;
	/* demo1*/
	.demo1{
		height: 100px;width: 300px;height:100px;background: #95cfef;border: 1px solid #36f;		
	}	
	/* demo2*/
	.demo2{
		height:100px;width: 300px;height:100px;background: #95cfef;border: 1px solid #36f;	
	}
	&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
	&lt;h1&gt;产生条件&lt;/h1&gt;
	&lt;p&gt;这个Bug在IE6下碰到代码的注释常发生.&lt;/p&gt;
	&lt;h2&gt;解决方法&lt;/h2&gt;
	&lt;h3&gt;方法一&lt;/h3&gt;
	&lt;p&gt;使用条件注释，这样可以轻松的避开这个Bug。&lt;/p&gt;
	&lt;!--[if IE6]&gt;IE6 does not like comments&lt;![endif]--&gt;
	&lt;div class=\"demo1\"&gt;
		&lt;... some markup ...&gt;  
	&lt;/div&gt;
	&lt;!--[if IE6]&gt;IE6 does not like comments&lt;![endif]--&gt;
	&lt;h3&gt;方法二&lt;/h3&gt;
	&lt;p&gt;去掉注释&lt;/p&gt;
	&lt;div class=\"demo2\"&gt;
		&lt;... some markup ...&gt;  
	&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</pre> 
",
          "wp:post_id": "512",
          "wp:post_date": "2013-02-16 10:08:32",
          "wp:post_date_gmt": "2013-02-16 02:08:32",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "ie6bugdemo9%e5%85%8b%e9%9a%86%e6%96%87%e6%9c%ac%e7%9a%84bug",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "bugs",
            "#cdata-section": "BUGS"
          }
        },
        {
          "title": "IE6\\7bug:demo10图片缩放Bug",
          "link": "http://www.pernav.com/ie6ie7bugdemo10%e5%9b%be%e7%89%87%e7%bc%a9%e6%94%bebug/",
          "pubDate": "Sat, 16 Feb 2013 02:14:51 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=518"
          },
          "content:encoded": "<pre class=\"lang:default decode:true crayon-selected\">&lt;!DOCTYPE HTML&gt;
&lt;html lang=\"zh-CN\"&gt;
&lt;head&gt;
	&lt;meta charset=\"UTF-8\"&gt;
	&lt;title&gt;图片在IE下缩放&lt;/title&gt;
	&lt;link rel=\"stylesheet\" href=\"base.css\" /&gt;
	&lt;style type=\"text/css\"&gt;
	/* demo*/
	.demo{
		height:200px;border: 1px solid #36f;
		-ms-interpolation-mode: bicubic;/*解决方案*/	
	}	
	&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
	&lt;h1&gt;产生条件&lt;/h1&gt;
	&lt;p&gt;图片在IE下缩放时会影响其质量，你可以让他和别的浏览器对比一下，IE下看起图片质量极差。&lt;/p&gt;
	&lt;h2&gt;解决方法&lt;/h2&gt;
	&lt;p&gt;给缩放图片添加属性-ms-interpolation-mode: bicubic;&lt;/p&gt;
	&lt;img class=\"demo\" src=\"images/demo10.jpg\" alt=\"\" title=\"\" /&gt;	
&lt;/body&gt;
&lt;/html&gt;</pre>",
          "wp:post_id": "518",
          "wp:post_date": "2013-02-16 10:14:51",
          "wp:post_date_gmt": "2013-02-16 02:14:51",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "ie6ie7bugdemo10%e5%9b%be%e7%89%87%e7%bc%a9%e6%94%bebug",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "bugs",
            "#cdata-section": "BUGS"
          }
        },
        {
          "title": "2013年2月16日:闫鹿杨",
          "link": "http://www.pernav.com/2013%e5%b9%b42%e6%9c%8816%e6%97%a5%e9%97%ab%e9%b9%bf%e6%9d%a8/",
          "pubDate": "Sat, 16 Feb 2013 14:45:11 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=522"
          },
          "content:encoded": "<img src=\"http://farm9.staticflickr.com/8243/8479201642_c0591ecd60_z.jpg\" alt=\"2013年2月16日\">",
          "wp:post_id": "522",
          "wp:post_date": "2013-02-16 22:45:11",
          "wp:post_date_gmt": "2013-02-16 14:45:11",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "2013%e5%b9%b42%e6%9c%8816%e6%97%a5%e9%97%ab%e9%b9%bf%e6%9d%a8",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "beauty",
            "#cdata-section": "爱美人"
          },
          "wp:postmeta": {
            "wp:meta_key": "_edit_last",
            "wp:meta_value": "1"
          }
        },
        {
          "title": "IE6bug:demo11PNG图片透明Bug",
          "link": "http://www.pernav.com/ie6bugdemo11png%e5%9b%be%e7%89%87%e9%80%8f%e6%98%8ebug/",
          "pubDate": "Sun, 17 Feb 2013 00:56:19 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=524"
          },
          "content:encoded": "<pre class=\"lang:default decode:true crayon-selected\">&lt;!DOCTYPE HTML&gt;
&lt;html lang=\"zh-CN\"&gt;
&lt;head&gt;
	&lt;meta charset=\"UTF-8\"&gt;
	&lt;title&gt;图片在IE下缩放&lt;/title&gt;
	&lt;link rel=\"stylesheet\" href=\"base.css\" /&gt;
	&lt;!-- 方法一--&gt;
	&lt;!--[if lt IE 7]&gt;
	&lt;script type=\"text/javascript\" src=\"js/IE6png24_min.js\"&gt;&lt;/script&gt;
	&lt;script type=\"text/javascript\"&gt;
		//让IE6支持PNG24的JS
		//DD_belatedPNG.fix('CSS选择器, img或background');
		DD_belatedPNG.fix(\"*,img,background\");
	&lt;/script&gt;
	&lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;
	&lt;h1&gt;产生条件&lt;/h1&gt;
	&lt;p&gt;有时需要使用透明图片，别然gif和png8都可以制作透明图片，但这两者对于要求强美感的你来说一定达不到你的要求，因为会有杂边，那么使用png24或png32图片，质量是没有问题了，可引发另一个头痛的问题，就是IE6下面显示图片会有一层淡兰色的背景.&lt;/p&gt;
	&lt;h2&gt;解决方法&lt;/h2&gt;
	&lt;h3&gt;方法一&lt;/h3&gt;
	&lt;p&gt;DD_belatedPNG.js使用这个js的时候需要注意,不要使用sprite大图,因为图片之间的填充位置,iE6不能解析.故都应该使用单张图片.&lt;/p&gt;
	&lt;img src=\"images/demo11.png\" alt=\"\" title=\"\" /&gt;	
&lt;/body&gt;
&lt;/html&gt;</pre>",
          "wp:post_id": "524",
          "wp:post_date": "2013-02-17 08:56:19",
          "wp:post_date_gmt": "2013-02-17 00:56:19",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "ie6bugdemo11png%e5%9b%be%e7%89%87%e9%80%8f%e6%98%8ebug",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "bugs",
            "#cdata-section": "BUGS"
          },
          "wp:postmeta": {
            "wp:meta_key": "_edit_last",
            "wp:meta_value": "1"
          }
        },
        {
          "title": "IE6\\7bug:demo12禁用IE浏览器默认的垂直滚动条",
          "link": "http://www.pernav.com/ie67bugdemo12%e7%a6%81%e7%94%a8ie%e6%b5%8f%e8%a7%88%e5%99%a8%e9%bb%98%e8%ae%a4%e7%9a%84%e5%9e%82%e7%9b%b4%e6%bb%9a%e5%8a%a8%e6%9d%a1/",
          "pubDate": "Sun, 17 Feb 2013 01:27:41 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=527"
          },
          "content:encoded": "<pre class=\"lang:default decode:true \" >&lt;!DOCTYPE HTML&gt;
&lt;html lang=\"zh-CN\"&gt;
&lt;head&gt;
	&lt;meta charset=\"UTF-8\"&gt;
	&lt;title&gt;禁用IE6\\7浏览器默认的垂直滚动条&lt;/title&gt;
	&lt;link rel=\"stylesheet\" href=\"base.css\" /&gt;
	&lt;style type=\"text/css\"&gt;
	html{overflow:auto;}/*解决方案,加载html上的哦*/
	&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
	&lt;h1&gt;产生条件&lt;/h1&gt;
	&lt;p&gt;IE显示垂直滚动条，即使内容很好地适合窗口。必须要再加html上面,否则IE7，IE6不识别,你可以使用overflow:auto来改变，设置他需要时显示出来。&lt;/p&gt;
	&lt;h2&gt;解决方法&lt;/h2&gt;
	&lt;p&gt;必须要再加html上面,否则IE7，IE6不识别&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</pre> 
",
          "wp:post_id": "527",
          "wp:post_date": "2013-02-17 09:27:41",
          "wp:post_date_gmt": "2013-02-17 01:27:41",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "ie67bugdemo12%e7%a6%81%e7%94%a8ie%e6%b5%8f%e8%a7%88%e5%99%a8%e9%bb%98%e8%ae%a4%e7%9a%84%e5%9e%82%e7%9b%b4%e6%bb%9a%e5%8a%a8%e6%9d%a1",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "bugs",
            "#cdata-section": "BUGS"
          },
          "wp:postmeta": {
            "wp:meta_key": "_edit_last",
            "wp:meta_value": "1"
          }
        },
        {
          "title": "IE6bug:demo13修复margin的负值",
          "link": "http://www.pernav.com/ie6bugdemo13%e4%bf%ae%e5%a4%8dmargin%e7%9a%84%e8%b4%9f%e5%80%bc/",
          "pubDate": "Sun, 17 Feb 2013 01:30:40 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=529"
          },
          "content:encoded": "<pre class=\"lang:default decode:true \" >&lt;!DOCTYPE HTML&gt;
&lt;html lang=\"zh-CN\"&gt;
&lt;head&gt;
	&lt;meta charset=\"UTF-8\"&gt;
	&lt;title&gt;IE6下修复负的margin值&lt;/title&gt;
	&lt;link rel=\"stylesheet\" href=\"base.css\" /&gt;
	&lt;style type=\"text/css\"&gt;	
	.demo {
		margin: -1.5em;
		width:100px;
		height:100px;
		background:pink;
		position: relative;/*解决方案*/
		zoom: 1;
	}
	&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
	&lt;h1&gt;产生条件&lt;/h1&gt;
	&lt;p&gt;负边距在我们平时的Web制作中，为了达到一定的效果也时常用到，而在现代浏览器中使用负的边距并不会有任何问题，但是在IE6下对负的margin值并不友好，除非你在目标元素上使用“position:relative”属性&lt;/p&gt;
	&lt;h2&gt;解决方法&lt;/h2&gt;
	&lt;p&gt;在IE6下对对负的margin值并不友好，除非你在目标元素上使用“position:relative”属性&lt;/p&gt;
	&lt;div class=\"demo\"&gt;&lt;/div&gt;	
&lt;/body&gt;
&lt;/html&gt;</pre> 
",
          "wp:post_id": "529",
          "wp:post_date": "2013-02-17 09:30:40",
          "wp:post_date_gmt": "2013-02-17 01:30:40",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "ie6bugdemo13%e4%bf%ae%e5%a4%8dmargin%e7%9a%84%e8%b4%9f%e5%80%bc",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "bugs",
            "#cdata-section": "BUGS"
          },
          "wp:postmeta": {
            "wp:meta_key": "_edit_last",
            "wp:meta_value": "1"
          }
        },
        {
          "title": "IE6\\7bug:demo14Select中Option的宽度",
          "link": "http://www.pernav.com/ie67bugdemo14select%e4%b8%adoption%e7%9a%84%e5%ae%bd%e5%ba%a6/",
          "pubDate": "Sun, 17 Feb 2013 01:33:02 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=531"
          },
          "content:encoded": "<pre class=\"lang:default decode:true \" >&lt;!DOCTYPE HTML&gt;
&lt;html lang=\"zh-CN\"&gt;
&lt;head&gt;
	&lt;meta charset=\"UTF-8\"&gt;
	&lt;title&gt;IE6\\7下Select中Option的宽度&lt;/title&gt;
	&lt;link rel=\"stylesheet\" href=\"base.css\" /&gt;
	&lt;style type=\"text/css\"&gt;
	/* demo*/
	.demo{width:100px;}	
	&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
	&lt;h1&gt;产生条件&lt;/h1&gt;
	&lt;p&gt;这个Bug是发生在&amp;lt;select&amp;gt;上的，而且是相当的明显，当你在&amp;lt;select&amp;gt;上设置了一个静态的宽度时，当其&amp;lt;option&amp;gt;选项内容超过设置的宽度时，其内容也将直接被截，这种现像只发生在Ie6-7中&lt;/p&gt;
	&lt;h2&gt;解决方法&lt;/h2&gt;
	&lt;p&gt;使用了jQuery方法来解决，当元素在静态下（未触发select中的option选项时）使用有一个宽度值来设置select，在IE下时，鼠标移动到select的option选项中，宽度变成自动，以适合内容字段的宽度，当鼠标移出时又回到表态宽度的设置&lt;/p&gt;
	&lt;select name=\"\" id=\"\" class=\"demo\"&gt;
		&lt;option value=\"1\"&gt;测试仪测试仪测试仪测试仪&lt;/option&gt;
		&lt;option value=\"2\"&gt;测试仪测试仪测试仪测试仪测试仪测试仪&lt;/option&gt;
		&lt;option value=\"3\"&gt;测试仪测试仪测试仪测试仪测试仪&lt;/option&gt;
	&lt;/select&gt;
	&lt;script type=\"text/javascript\" src=\"js/jquery-1.9.0.min.js\"&gt;&lt;/script&gt;
	&lt;script type=\"text/javascript\"&gt; 
	$(function() {
		$(\"select\").mouseover(function(){
		  $(this).data(\"origWidth\", $(this).css(\"width\")).css(\"width\", \"auto\");
		}).mouseout(function(){
		  $(this).css(\"width\", $(this).data(\"origWidth\"));
		});
	});
	&lt;/script&gt;	
&lt;/body&gt;
&lt;/html&gt;</pre> 
",
          "wp:post_id": "531",
          "wp:post_date": "2013-02-17 09:33:02",
          "wp:post_date_gmt": "2013-02-17 01:33:02",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "ie67bugdemo14select%e4%b8%adoption%e7%9a%84%e5%ae%bd%e5%ba%a6",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "bugs",
            "#cdata-section": "BUGS"
          },
          "wp:postmeta": {
            "wp:meta_key": "_edit_last",
            "wp:meta_value": "1"
          }
        },
        {
          "title": "IE6bug:demo15positionfixed的Bug",
          "link": "http://www.pernav.com/ie6bugdemo15positionfixed%e7%9a%84bug/",
          "pubDate": "Sun, 17 Feb 2013 01:36:11 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=533"
          },
          "content:encoded": "<pre class=\"lang:default decode:true \" >&lt;!DOCTYPE HTML&gt;
&lt;html lang=\"zh-CN\"&gt;
&lt;head&gt;
	&lt;meta charset=\"UTF-8\"&gt;
	&lt;title&gt;IE6完美兼容position:fixed&lt;/title&gt;
	&lt;link rel=\"stylesheet\" href=\"base.css\" /&gt;
	&lt;style type=\"text/css\"&gt;	
	/* demo*/
	.demo {border: 1px solid red; padding: 5px;}
	/* 修正IE6振动bug */		
	*html,*html body{background-image:url(about:blank);background-attachment:fixed}

	.ie6fixedLT{
		position:absolute;
		left:expression(eval(document.documentElement.scrollLeft));
		top:expression(eval(document.documentElement.scrollTop))
	}	
	.ie6fixedRT{
		position:absolute;
		right:expression(eval(document.documentElement.scrollLeft));
		top:expression(eval(document.documentElement.scrollTop))
	}	
	.ie6fixedLB{
		position:absolute;	left:expression(eval(document.documentElement.scrollLeft+document.documentElement.clientWidth-this.offsetWidth)-(parseInt(this.currentStyle.marginLeft,10)||0)-(parseInt(this.currentStyle.marginRight,10)||0));	top:expression(eval(document.documentElement.scrollTop+document.documentElement.clientHeight-this.offsetHeight-(parseInt(this.currentStyle.marginTop,10)||0)-(parseInt(this.currentStyle.marginBottom,10)||0)))
	}
	.ie6fixedRB{
		position:absolute;		right:expression(eval(document.documentElement.scrollLeft+document.documentElement.clientWidth-this.offsetWidth)-(parseInt(this.currentStyle.marginLeft,10)||0)-(parseInt(this.currentStyle.marginRight,10)||0));	top:expression(eval(document.documentElement.scrollTop+document.documentElement.clientHeight-this.offsetHeight-(parseInt(this.currentStyle.marginTop,10)||0)-(parseInt(this.currentStyle.marginBottom,10)||0)))
	}	
	html&gt;body	.ie6fixedLT{position:fixed;left:0;top:0}
	html&gt;body	.ie6fixedRT{position:fixed;right:0;top:0}
	html&gt;body	.ie6fixedLB{position:fixed;left:0;bottom:0}
	html&gt;body	.ie6fixedRB{position:fixed;right:0;bottom:0}
	&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
	&lt;h1&gt;产生条件&lt;/h1&gt;
	&lt;p&gt;position中取值为“fixed”时，IE6浏览器不能识别这个属性（IE6真是SB），这样一来给我们有时候的制作带来极大的了限制。&lt;/p&gt;
	&lt;h2&gt;解决方法&lt;/h2&gt;
	&lt;p&gt;通过CSS的expression表达式来解决IE6下的position:fixed效果。不过这种方法解决了问题，但也有一个不好的地方，极其占用你的性能资源，所以使用之时请考虑清楚.&lt;/p&gt;
	&lt;div class=\"ie6fixedLT demo\"&gt;IE6完美兼容position:fixed1&lt;/div&gt;
	&lt;div class=\"ie6fixedRT demo\"&gt;IE6完美兼容position:fixed2&lt;/div&gt;
	&lt;div class=\"ie6fixedLB demo\"&gt;IE6完美兼容position:fixed3&lt;/div&gt;
	&lt;div class=\"ie6fixedRB demo\"&gt;IE6完美兼容position:fixed4&lt;/div&gt;	
&lt;/body&gt;
&lt;/html&gt;</pre> 
",
          "wp:post_id": "533",
          "wp:post_date": "2013-02-17 09:36:11",
          "wp:post_date_gmt": "2013-02-17 01:36:11",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "ie6bugdemo15positionfixed%e7%9a%84bug",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "bugs",
            "#cdata-section": "BUGS"
          },
          "wp:postmeta": {
            "wp:meta_key": "_edit_last",
            "wp:meta_value": "1"
          }
        },
        {
          "title": "IE6\\7bug:demo16DOCTYPE引起的Bug",
          "link": "http://www.pernav.com/ie67bugdemo16doctype%e5%bc%95%e8%b5%b7%e7%9a%84bug/",
          "pubDate": "Sun, 17 Feb 2013 01:38:04 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=535"
          },
          "content:encoded": "<pre class=\"lang:default decode:true crayon-selected\">&lt;!DOCTYPE HTML&gt; &lt;!-- 解决方案 --&gt;
&lt;html lang=\"zh-CN\"&gt;
&lt;head&gt;
	&lt;meta charset=\"UTF-8\"&gt;
	&lt;title&gt;DOCTYPE引起的Bug&lt;/title&gt;
	&lt;link rel=\"stylesheet\" href=\"base.css\" /&gt;
	&lt;style type=\"text/css\"&gt;
	/* demo*/
	.demo{
		height: 100px;width: 300px;background: #95cfef;border: 1px solid #36f;		
	}	
	&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
	&lt;h1&gt;产生条件&lt;/h1&gt;
	&lt;p&gt;DOCTYPE引起的IE的bug一般来说只会发生在初学者的身上，因为那时候他还不太了解这个DOCTYPE的作用。往往页你的页面头部少了这个DOCTYPE时，你的IE就会以怪异模式去解析，从而产生的Bug就无法想像了。&lt;/p&gt;
	&lt;h2&gt;解决方法&lt;/h2&gt;
	&lt;p&gt;在每个(X)HTML页面的顶部放置一个DOCTYPE,&lt;/p&gt;
	&lt;div class=\"demo\"&gt;
	&lt;p&gt;&amp;lt;!DOCTYPE HTML&amp;gt;&lt;/p&gt;
	&lt;p&gt;&amp;lt;html lang=\"zh-CN\"&amp;gt;&lt;/p&gt;
	&lt;p&gt;&amp;lt;head&amp;gt;&lt;/p&gt;
	&lt;p&gt;&amp;lt;meta charset=\"UTF-8\"&amp;gt;&lt;/p&gt;
	&lt;p&gt;&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&lt;/p&gt;
	&lt;p&gt;&amp;lt;/head&amp;gt;&lt;/p&gt;
	&lt;p&gt;&amp;lt;body&amp;gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</pre>",
          "wp:post_id": "535",
          "wp:post_date": "2013-02-17 09:38:04",
          "wp:post_date_gmt": "2013-02-17 01:38:04",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "ie67bugdemo16doctype%e5%bc%95%e8%b5%b7%e7%9a%84bug",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "bugs",
            "#cdata-section": "BUGS"
          },
          "wp:postmeta": {
            "wp:meta_key": "_edit_last",
            "wp:meta_value": "1"
          }
        },
        {
          "title": "IE6bug:demo17避免百分比尺寸",
          "link": "http://www.pernav.com/ie6bugdemo17%e9%81%bf%e5%85%8d%e7%99%be%e5%88%86%e6%af%94%e5%b0%ba%e5%af%b8/",
          "pubDate": "Sun, 17 Feb 2013 01:39:54 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=537"
          },
          "content:encoded": "<pre class=\"lang:default decode:true \" >&lt;!DOCTYPE HTML&gt;
&lt;html lang=\"zh-CN\"&gt;
&lt;head&gt;
	&lt;meta charset=\"UTF-8\"&gt;
	&lt;title&gt;ie6避免百分比尺寸&lt;/title&gt;
	&lt;link rel=\"stylesheet\" href=\"base.css\" /&gt;
	&lt;style type=\"text/css\"&gt;
	/* demo*/
	.demo{
		height: 100px;width: 300px;background: #95cfef;border: 1px solid #36f;
		float: left;			/*bug产生条件*/			
		margin: 2% 0 !important;
		margin: 20px 0;			/*只有IE6才能识别*/
		display:inline;			/*双边距解决方案*/		
	}	
	&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
	&lt;h1&gt;产生条件&lt;/h1&gt;
	&lt;p&gt;百分比为单位对于IE6来说不怎么友好，容易混淆。除非你知道每一个父元素的尺寸，这样才能更好的避免，但你仍然可以在别的浏览器使用百分比，而在IE6下使用固定值。&lt;/p&gt;
	&lt;h2&gt;解决方法&lt;/h2&gt;
	&lt;p&gt;百分比为单位对于IE6来说不怎么友好，容易混淆。除非你知道每一个父元素的尺寸，这样才能更好的避免，但你仍然可以在别的浏览器使用百分比，而在IE6下使用固定值。&lt;/p&gt;
	&lt;div class=\"demo\"&gt;&lt;/div&gt;	
&lt;/body&gt;
&lt;/html&gt;</pre> ",
          "wp:post_id": "537",
          "wp:post_date": "2013-02-17 09:39:54",
          "wp:post_date_gmt": "2013-02-17 01:39:54",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "ie6bugdemo17%e9%81%bf%e5%85%8d%e7%99%be%e5%88%86%e6%af%94%e5%b0%ba%e5%af%b8",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "bugs",
            "#cdata-section": "BUGS"
          },
          "wp:postmeta": {
            "wp:meta_key": "_edit_last",
            "wp:meta_value": "1"
          }
        },
        {
          "title": "IE6bug:demo18 100%高度的Bug",
          "link": "http://www.pernav.com/ie6bugdemo18-100%e9%ab%98%e5%ba%a6%e7%9a%84bug/",
          "pubDate": "Sun, 17 Feb 2013 01:42:00 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=539"
          },
          "content:encoded": "<pre class=\"lang:default decode:true \" >&lt;!DOCTYPE HTML&gt;
&lt;html lang=\"zh-CN\"&gt;
&lt;head&gt;
	&lt;meta charset=\"UTF-8\"&gt;
	&lt;title&gt;ie6height的100%&lt;/title&gt;
	&lt;link rel=\"stylesheet\" href=\"base.css\" /&gt;
	&lt;style type=\"text/css\"&gt;
	/* demo*/
	.demo{height:100%;width: 100%;background: #95cfef;border: 1px solid #36f;}	
	.demo_box{width:100px;height:100px;}
	&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
	&lt;h1&gt;产生条件&lt;/h1&gt;
	&lt;p&gt;在IE6下，如果要给元素定义100%高度，必须要明确定义它的父级元素的高度，如果你需要给元素定义满屏的高度，就得先给html和body定义 height:100%;。&lt;/p&gt;
	&lt;h2&gt;解决方法&lt;/h2&gt;
	&lt;p&gt;在IE6下，如果要给元素定义100%高度，必须要明确定义它的父级元素的高度，如果你需要给元素定义满屏的高度，就得先给html和body定义 height:100%;。&lt;/p&gt;
	&lt;div class=\"demo_box\"&gt;
		&lt;div class=\"demo\"&gt;&lt;/div&gt;
	&lt;/div&gt;		
&lt;/body&gt;
&lt;/html&gt;</pre> ",
          "wp:post_id": "539",
          "wp:post_date": "2013-02-17 09:42:00",
          "wp:post_date_gmt": "2013-02-17 01:42:00",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "ie6bugdemo18-100%e9%ab%98%e5%ba%a6%e7%9a%84bug",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "bugs",
            "#cdata-section": "BUGS"
          },
          "wp:postmeta": {
            "wp:meta_key": "_edit_last",
            "wp:meta_value": "1"
          }
        },
        {
          "title": "IE6bug:demo19绝对定位元素的1像素间距bug",
          "link": "http://www.pernav.com/ie6bugdemo19%e7%bb%9d%e5%af%b9%e5%ae%9a%e4%bd%8d%e5%85%83%e7%b4%a0%e7%9a%841%e5%83%8f%e7%b4%a0%e9%97%b4%e8%b7%9dbug/",
          "pubDate": "Sun, 17 Feb 2013 01:43:37 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=541"
          },
          "content:encoded": "<pre class=\"lang:default decode:true \" >&lt;!DOCTYPE HTML&gt;
&lt;html lang=\"zh-CN\"&gt;
&lt;head&gt;
	&lt;meta charset=\"UTF-8\"&gt;
	&lt;title&gt;IE6绝对定位元素的1像素间距bug&lt;/title&gt;
	&lt;link rel=\"stylesheet\" href=\"base.css\" /&gt;
	&lt;style type=\"text/css\"&gt;
	/* demo*/
	.demo{
		height:50px;width: 50px;background: #95cfef;border: 1px solid #36f;	
		position:absolute;
		top:20px;
		left:20px;
	}	
	.demo_box{
		width:100px;	/* 解决方案 */
		height:100px; 	/* 解决方案 */
		border: 1px solid pink;	
		position:relative;
	}
	&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
	&lt;h1&gt;产生条件&lt;/h1&gt;
	&lt;p&gt;IE6下的这个错误是由于进位处理误差造成（IE7已修复），当绝对定位元素的父元素高或宽为奇数时，bottom和right会产生错误。&lt;/p&gt;
	&lt;h2&gt;解决方法&lt;/h2&gt;
	&lt;p&gt;唯一的解决办法就是给父元素定义明确的高宽值，但对于液态布局没有完美的解决方法。&lt;/p&gt;
	&lt;div class=\"demo_box\"&gt;
		&lt;div class=\"demo\"&gt;&lt;/div&gt;
	&lt;/div&gt;		
&lt;/body&gt;
&lt;/html&gt;</pre> 
",
          "wp:post_id": "541",
          "wp:post_date": "2013-02-17 09:43:37",
          "wp:post_date_gmt": "2013-02-17 01:43:37",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "ie6bugdemo19%e7%bb%9d%e5%af%b9%e5%ae%9a%e4%bd%8d%e5%85%83%e7%b4%a0%e7%9a%841%e5%83%8f%e7%b4%a0%e9%97%b4%e8%b7%9dbug",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "bugs",
            "#cdata-section": "BUGS"
          },
          "wp:postmeta": {
            "wp:meta_key": "_edit_last",
            "wp:meta_value": "1"
          }
        },
        {
          "title": "IE6bug:demo20 3像素间距bug",
          "link": "http://www.pernav.com/ie6bugdemo20-3%e5%83%8f%e7%b4%a0%e9%97%b4%e8%b7%9dbug/",
          "pubDate": "Sun, 17 Feb 2013 01:46:28 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=543"
          },
          "content:encoded": "<pre class=\"lang:default decode:true \" >&lt;!DOCTYPE HTML&gt;
&lt;html lang=\"zh-CN\"&gt;
&lt;head&gt;
	&lt;meta charset=\"UTF-8\"&gt;
	&lt;title&gt;ie6 3像素间距bug&lt;/title&gt;
	&lt;link rel=\"stylesheet\" href=\"base.css\" /&gt;
	&lt;style type=\"text/css\"&gt;
	/* demo*/
	.demol{
		height:50px;width: 50px;background:pink;border: 1px solid #36f;	
		float:left;		
		display:inline; 	/* 解决方案 */
		margin-right:-3px;	/* 解决方案 */
	}	
	.demor{height:50px;width:50px;background:deeppink;border:1px solid #36f;}	
	&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
	&lt;h1&gt;产生条件&lt;/h1&gt;
	&lt;p&gt;在IE6中，当文本(或无浮动元素)跟在一个浮动的元素之后，文本和这个浮动元素之间会多出3像素的间隔。&lt;/p&gt;
	&lt;h2&gt;解决方法&lt;/h2&gt;
	&lt;p&gt;给浮动层添加 display:inline 和 -3px 负值margin。给中间的内容层定义 margin-right 以纠正-3px。&lt;/p&gt;	
	&lt;div class=\"demol\"&gt;1111&lt;/div&gt;	
	&lt;span class=\"demor\"&gt;2222&lt;/span&gt;
&lt;/body&gt;
&lt;/html&gt;</pre> 
",
          "wp:post_id": "543",
          "wp:post_date": "2013-02-17 09:46:28",
          "wp:post_date_gmt": "2013-02-17 01:46:28",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "ie6bugdemo20-3%e5%83%8f%e7%b4%a0%e9%97%b4%e8%b7%9dbug",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "bugs",
            "#cdata-section": "BUGS"
          },
          "wp:postmeta": {
            "wp:meta_key": "_edit_last",
            "wp:meta_value": "1"
          }
        },
        {
          "title": "IE6bug:demo21调整窗口大小的 Bug",
          "link": "http://www.pernav.com/ie6bugdemo21%e8%b0%83%e6%95%b4%e7%aa%97%e5%8f%a3%e5%a4%a7%e5%b0%8f%e7%9a%84-bug/",
          "pubDate": "Sun, 17 Feb 2013 01:50:50 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=545"
          },
          "content:encoded": "<pre class=\"lang:default decode:true \" >&lt;!DOCTYPE HTML&gt;
&lt;html lang=\"zh-CN\"&gt;
&lt;head&gt;
	&lt;meta charset=\"UTF-8\"&gt;
	&lt;title&gt;ie6调整窗口大小的 Bug&lt;/title&gt;
	&lt;link rel=\"stylesheet\" href=\"base.css\" /&gt;
	&lt;style type=\"text/css\"&gt;
	/* demo*/
	.demo_box{
		height:500px;width: 500px;background:pink;border: 1px solid #36f;margin-left:auto;margin-right:auto;
		postion:relative;/* 解决方案 */
	}	
	.demo{width:100px;height:100px;background: #95cfef;postion:relative;}
	&lt;/style&gt;
&lt;/head&gt;
&lt;body class=\"demo_box\"&gt;
	&lt;h1&gt;产生条件&lt;/h1&gt;
	&lt;p&gt;当把body居中放置，改变IE浏览器大小的时候，任何在body里面的相对定位元素都会固定不动了。&lt;/p&gt;
	&lt;h2&gt;解决方法&lt;/h2&gt;
	&lt;p&gt;解决办法：给body定义 position:relative;就行了。&lt;/p&gt;	
	&lt;div class=\"demo\"&gt;&lt;/div&gt;
	&lt;div class=\"demo\"&gt;&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</pre> 
",
          "wp:post_id": "545",
          "wp:post_date": "2013-02-17 09:50:50",
          "wp:post_date_gmt": "2013-02-17 01:50:50",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "ie6bugdemo21%e8%b0%83%e6%95%b4%e7%aa%97%e5%8f%a3%e5%a4%a7%e5%b0%8f%e7%9a%84-bug",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "bugs",
            "#cdata-section": "BUGS"
          },
          "wp:postmeta": {
            "wp:meta_key": "_edit_last",
            "wp:meta_value": "1"
          }
        },
        {
          "title": "IE6\\7bug:demo22inline-block的深入理解",
          "link": "http://www.pernav.com/ie67bugdemo22inline-block%e7%9a%84%e6%b7%b1%e5%85%a5%e7%90%86%e8%a7%a3/",
          "pubDate": "Sun, 17 Feb 2013 01:53:35 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=547"
          },
          "content:encoded": "<pre class=\"lang:default decode:true \" >&lt;!DOCTYPE HTML&gt;
&lt;html lang=\"zh-CN\"&gt;
&lt;head&gt;
	&lt;meta charset=\"UTF-8\"&gt;
	&lt;title&gt;ie6\\7inline-block的深入理解&lt;/title&gt;
	&lt;link rel=\"stylesheet\" href=\"base.css\" /&gt;
	&lt;style type=\"text/css\"&gt;
	/* demo1*/
	.demo1{margin:10px 0;white-space:nowrap;word-wrap:normal;}
	.demo1 a,.demo1 span{border:1px solid #999;font-size:12px;background-color:#FCC;}	
	.dib-inline,.dib-block{width:100px;height:30px;line-height:30px;text-align:center;}
	.dib-inline{display:inline-block;} /* inline元素解决方案 */
	/* demo2*/
	.demo2{margin:10px 0;white-space:nowrap;word-wrap:normal;}	
	.demo2 li a{border:1px solid #999;font-size:12px;background-color:#FCC;display:block;}	
	.dib-block{
		display:inline-block; /* 现代浏览器 +IE6、7 inline 元素 */
		*display:inline; /* IE6、7 block 元素 */
		*zoom:1;}/* block元素解决方案 */
	/* demo3*/
	.demo3{margin:10px 0;white-space:nowrap;word-wrap:normal;font-size:0;}/* inline元素之间空隙解决方案 */
	.demo3 a,.demo3 span{border:1px solid #999;font-size:12px;background-color:#FCC;}	
	.demo3 li a{border:1px solid #999;font-size:12px;background-color:#FCC;display:block;}	
	/* demo4*/
	.demo4{margin:10px 0;white-space:nowrap;word-wrap:normal;font-size:0;*word-spacing:-1px;}/* inline元素之间空隙解决方案 word-spacing forIE6、7 */
	.demo4 a,.demo4 span{border:1px solid #999;font-size:12px;background-color:#FCC;}	
	.demo4 li a{border:1px solid #999;font-size:12px;background-color:#FCC;display:block;}	
	&lt;/style&gt;
&lt;/head&gt;
&lt;body class=\"demo_box\"&gt;
	&lt;h1&gt;产生条件&lt;/h1&gt;
	&lt;p&gt;display:inline-block 是可以触发 hasLayout 的，触发了 hasLayout 的元素表现出来的特征就是一个独立的矩形容器，可以设置宽高而且不受外部元素的影响;IE6 中 inline 元素和 block 元素的表现：&lt;/p&gt;
	&lt;h2&gt;解决方法&lt;/h2&gt;
	&lt;h3&gt;1）inline 元素 display:inline-block&lt;/h3&gt;	
	&lt;p&gt;IE6 中 inline 元素只要触发了 hasLayout 其表现就类似于 inline-block，这里设置 display:inline-block; 或者 zoom:1; 等其他属性值可以触发 hasLayout ，表现出来是一样的。&lt;/p&gt;
	&lt;div class=\"demo1\"&gt;
		&lt;a href=\"#\" class=\"dib-inline\"&gt;a 标签:&lt;/a&gt;
		&lt;a href=\"#\" class=\"dib-inline\"&gt;发现2：&lt;/a&gt;
		&lt;a href=\"#\" class=\"dib-inline\"&gt;发现1&lt;/a&gt;
		&lt;span class=\"dib-inline\"&gt;span 标签&lt;/span&gt;
	&lt;/div&gt;	
	&lt;h3&gt;2）block 元素 display:inline-block&lt;/h3&gt;	
	&lt;p&gt;IE6 中 block 元素即使触发了 hasLayout 也不能具有 inline-block 元素不换行的特性。想要 block 元素支持 inline-block 元素的特性，我们可以这样做：&lt;br /&gt;
	.demo2{display:inline; zoom:1;}
	&lt;/p&gt;	
	&lt;ul class=\"demo2\"&gt;
		&lt;li class=\"dib-block\"&gt;&lt;a href=\"#\"&gt;li 标签&lt;/a&gt;&lt;/li&gt;
		&lt;li class=\"dib-block\"&gt;&lt;a href=\"#\" style=\"color:red;\"&gt;发现2：&lt;/a&gt;&lt;/li&gt;
		&lt;li class=\"dib-block\"&gt;&lt;a href=\"#\"&gt;发现1&lt;/a&gt;&lt;/li&gt;
		&lt;li class=\"dib-block\"&gt;&lt;a href=\"#\"&gt;发现Xx2&lt;/a&gt;&lt;/li&gt;
		&lt;li class=\"dib-block\"&gt;&lt;a href=\"#\"&gt;发现3&lt;/a&gt;&lt;/li&gt;
	&lt;/ul&gt;
	&lt;h3&gt;3）inline元素display:inline-block 后的元素为什么会产生水平空隙?block元素木有这个问题&lt;/h3&gt;	
	&lt;p&gt;产生 inline-block 空隙的根本性原因是：HTML 中的换行符、空格符、制表符等合并为空白符，字体大小不为 0 的情况下，空白符自然占据一定的宽度，因此产生了元素间的空隙。&lt;/p&gt;	
	&lt;div class=\"demo3\"&gt;
		&lt;a href=\"#\" class=\"dib-inline\"&gt;a 标签:&lt;/a&gt;
		&lt;a href=\"#\" class=\"dib-inline\"&gt;发现2：&lt;/a&gt;
		&lt;a href=\"#\" class=\"dib-inline\"&gt;发现1&lt;/a&gt;
		&lt;span class=\"dib-inline\"&gt;span 标签&lt;/span&gt;
		&lt;ul&gt;
		&lt;li class=\"dib-block\"&gt;&lt;a href=\"#\"&gt;li 标签&lt;/a&gt;&lt;/li&gt;
		&lt;li class=\"dib-block\"&gt;&lt;a href=\"#\" style=\"color:red;\"&gt;发现2：&lt;/a&gt;&lt;/li&gt;
		&lt;li class=\"dib-block\"&gt;&lt;a href=\"#\"&gt;发现1&lt;/a&gt;&lt;/li&gt;
		&lt;li class=\"dib-block\"&gt;&lt;a href=\"#\"&gt;发现Xx2&lt;/a&gt;&lt;/li&gt;
		&lt;li class=\"dib-block\"&gt;&lt;a href=\"#\"&gt;发现3&lt;/a&gt;&lt;/li&gt;
		&lt;/ul&gt;
	&lt;/div&gt;
	&lt;h3&gt;4）inline元素display:inline-block 在使用font-size:0时会仍然有空隙,去除空隙终极解决方案&lt;/h3&gt;	
	&lt;div class=\"demo4\"&gt;
		&lt;a href=\"#\" class=\"dib-inline\"&gt;a 标签:&lt;/a&gt;
		&lt;a href=\"#\" class=\"dib-inline\"&gt;发现2：&lt;/a&gt;
		&lt;a href=\"#\" class=\"dib-inline\"&gt;发现1&lt;/a&gt;
		&lt;span class=\"dib-inline\"&gt;span 标签&lt;/span&gt;
	&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</pre> 
",
          "wp:post_id": "547",
          "wp:post_date": "2013-02-17 09:53:35",
          "wp:post_date_gmt": "2013-02-17 01:53:35",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "ie67bugdemo22inline-block%e7%9a%84%e6%b7%b1%e5%85%a5%e7%90%86%e8%a7%a3",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "bugs",
            "#cdata-section": "BUGS"
          },
          "wp:postmeta": {
            "wp:meta_key": "_edit_last",
            "wp:meta_value": "1"
          }
        },
        {
          "title": "2013年2月18日:莉顿·梅斯特",
          "link": "http://www.pernav.com/2013%e5%b9%b42%e6%9c%8818%e6%97%a5%e8%8e%89%e9%a1%bf%c2%b7%e6%a2%85%e6%96%af%e7%89%b9/",
          "pubDate": "Mon, 18 Feb 2013 03:00:46 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=563"
          },
          "content:encoded": "<img src=\"http://farm9.staticflickr.com/8527/8483569941_f14f5469c5_z.jpg\"  alt=\"2013年2月18日\">",
          "wp:post_id": "563",
          "wp:post_date": "2013-02-18 11:00:46",
          "wp:post_date_gmt": "2013-02-18 03:00:46",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "2013%e5%b9%b42%e6%9c%8818%e6%97%a5%e8%8e%89%e9%a1%bf%c2%b7%e6%a2%85%e6%96%af%e7%89%b9",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "beauty",
            "#cdata-section": "爱美人"
          },
          "wp:postmeta": {
            "wp:meta_key": "_edit_last",
            "wp:meta_value": "1"
          }
        },
        {
          "title": "2013年2月19日:王子文",
          "link": "http://www.pernav.com/2013%e5%b9%b42%e6%9c%8819%e6%97%a5%e7%8e%8b%e5%ad%90%e6%96%87/",
          "pubDate": "Tue, 19 Feb 2013 02:21:18 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=587"
          },
          "content:encoded": "<img src=\"http://farm9.staticflickr.com/8517/8483583221_60e82409a6_z.jpg\" alt=\"2013年2月19日王子文\">",
          "wp:post_id": "587",
          "wp:post_date": "2013-02-19 10:21:18",
          "wp:post_date_gmt": "2013-02-19 02:21:18",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "2013%e5%b9%b42%e6%9c%8819%e6%97%a5%e7%8e%8b%e5%ad%90%e6%96%87",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "beauty",
            "#cdata-section": "爱美人"
          },
          "wp:postmeta": {
            "wp:meta_key": "_edit_last",
            "wp:meta_value": "1"
          }
        },
        {
          "title": "2013年2月20日:唐嫣",
          "link": "http://www.pernav.com/2013%e5%b9%b42%e6%9c%8820%e6%97%a5%e5%94%90%e5%ab%a3/",
          "pubDate": "Wed, 20 Feb 2013 00:40:23 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=590"
          },
          "content:encoded": "<img src=\"http://farm9.staticflickr.com/8370/8490990756_391bdcc3f3_z.jpg\"  alt=\"2013年2月20日\">",
          "wp:post_id": "590",
          "wp:post_date": "2013-02-20 08:40:23",
          "wp:post_date_gmt": "2013-02-20 00:40:23",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "2013%e5%b9%b42%e6%9c%8820%e6%97%a5%e5%94%90%e5%ab%a3",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "beauty",
            "#cdata-section": "爱美人"
          },
          "wp:postmeta": {
            "wp:meta_key": "_edit_last",
            "wp:meta_value": "1"
          }
        },
        {
          "title": "心语：把想念变成想起，把想起变成忘记",
          "link": "http://www.pernav.com/%e5%bf%83%e8%af%ad%ef%bc%9a%e6%8a%8a%e6%83%b3%e5%bf%b5%e5%8f%98%e6%88%90%e6%83%b3%e8%b5%b7%ef%bc%8c%e6%8a%8a%e6%83%b3%e8%b5%b7%e5%8f%98%e6%88%90%e5%bf%98%e8%ae%b0/",
          "pubDate": "Fri, 22 Feb 2013 01:25:34 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=592"
          },
          "content:encoded": "1、此生，我们只有死别，再无生离。

2、要么承担，要么突破，剩余的时间就是对你的所经历的一切保持沉默。终有一天，这沉默里会获得道路和答案。

3、你现在所要做的不是去羡慕别人，而是好好去享受，去珍惜这几年美好的珍贵的时光，去做自己想做的事情，去自己想去的地方，去努力完成自己曾经的梦想，去为自己好好活。

4、爱情开始时脱口而出的诺言，都是真心的，如同季节到时，树梢结成的果实那么真实。只是你也知道，果实从离树的那一瞬，就开始快速地过期，若没能及时吃掉，再怎么香的果，都会变得腐坏难闻。

5、幸福不是催出来的，更不会无缘无故地从天而降。在没有相遇之前，尽可能让自己具备更多的美好素质，让自己成为一个更优秀的女人。这样，你才会跟另一个美好产生呼应。否则，即使遇见了，可能也只会擦肩而过。

6、两个人在一起，应该互相疼爱对方，女孩应该像一朵花，开出来让他赞赏。而不是把自己弄成一株仙人掌，擦肩而过都会令他遍体鳞伤。

7、有的爱情，活在相片里；有的爱情，活在你心里。但最能让人踏实幸福的爱情，还是要那个人，活在我们的身边。

8、你说过在最初的几年之后，一对夫妻怎样开始彼此厌恶，由于彼此太过了解或厌倦了对方的恶习，我觉得我恰恰相反。我对一个人越是了解就越是能真正地爱他，他会梳某种头发，他会穿哪件T恤，他在某种场合一定会讲的故事，我相信那会是我爱一个人最真实的境界。

9、一生之中一定会遇到某个人，他打破你的原则，改变你的习惯，成为你的例外。

&nbsp;

10、爱情原来只是人生的内容之一，另外还有亲情、友情、成就感、艺术审美、各种给你带来极大愉悦的兴趣爱好，只有这些的总和才是丰富的人生，如果爱情一枝独秀，就像一张一条腿比较长的椅子，坐不稳的。

11、如果有一天我们不能在一起了，那么请把我放在你心里，我将永驻于此。

12、我越是逃离，却越是靠近你。我越是背过脸，却越是看见你。我是一座孤岛，处在相思之水中，四面八方，隔绝我通向你，一千零一面镜子，转映着你的容颜。我从你开始，我在你结束。——埃姆朗·萨罗希

13、妈妈告诉我不能错过两样东西：一是爱你的人；二是回家的最后一班车。

14、我不羡慕也不嫉妒那些天天粘在一起的小情侣，我没有时间没有兴趣也没有精力跨过两地时差，去生气吵架发脾气闹分手。我能做的只是在起风的时候裹紧外套，不停地读书，参加各种活动，背很多单词，早睡早起，照顾好自己。我希望不论在未来的哪一天，我都能有资格，以最不容置疑的姿态站在你身边。

15、让我快乐的，都是微小的事情，一点一滴汇聚成了幸福。有时候，连眼泪也是幸福的，这些都是因为你。

16、有时候会想，为什么现在才遇到你，以至于我没有机会像小时候那样任性，没顾虑。有时候又想，还好现在遇到你，刚刚好的年纪，知道怎么去体谅去珍惜，也不用赶着结婚，还可以手牵着手心、贴着心一起走向未知的未来。

17、我一定不是这城市里唯一的怪人，一定有人和我一样，空虚时对着夜空唱歌到天明，也许我永远都遇不到他，但我熟悉他的心情。——几米

18、所有的故事，终变成回忆。而再深的回忆，也敌不过一世的时间。再长的时间，也敌不过错过的遗憾。

19、虽然我不能为你指明前路，却可以陪你一起走过这黑暗。

20、把想念变成想起，把想起变成忘记。<strong>
</strong>",
          "wp:post_id": "592",
          "wp:post_date": "2013-02-22 09:25:34",
          "wp:post_date_gmt": "2013-02-22 01:25:34",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "%e5%bf%83%e8%af%ad%ef%bc%9a%e6%8a%8a%e6%83%b3%e5%bf%b5%e5%8f%98%e6%88%90%e6%83%b3%e8%b5%b7%ef%bc%8c%e6%8a%8a%e6%83%b3%e8%b5%b7%e5%8f%98%e6%88%90%e5%bf%98%e8%ae%b0",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "%e5%bf%83%e8%af%ad",
            "#cdata-section": "心语"
          },
          "wp:postmeta": {
            "wp:meta_key": "_edit_last",
            "wp:meta_value": "1"
          }
        },
        {
          "title": "2013年2月22日:章子怡",
          "link": "http://www.pernav.com/2013%e5%b9%b42%e6%9c%8822%e6%97%a5%e7%ab%a0%e5%ad%90%e6%80%a1/",
          "pubDate": "Fri, 22 Feb 2013 01:35:03 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=600"
          },
          "content:encoded": "<img src=\"http://farm9.staticflickr.com/8098/8490991074_1ecc2d9ae7_z.jpg\" alt=\"2013年2月21日\">",
          "wp:post_id": "600",
          "wp:post_date": "2013-02-22 09:35:03",
          "wp:post_date_gmt": "2013-02-22 01:35:03",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "2013%e5%b9%b42%e6%9c%8822%e6%97%a5%e7%ab%a0%e5%ad%90%e6%80%a1",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "beauty",
            "#cdata-section": "爱美人"
          },
          "wp:postmeta": {
            "wp:meta_key": "_edit_last",
            "wp:meta_value": "1"
          }
        },
        {
          "title": "心语：有一种想念，叫避而不见",
          "link": "http://www.pernav.com/%e5%bf%83%e8%af%ad%ef%bc%9a%e6%9c%89%e4%b8%80%e7%a7%8d%e6%83%b3%e5%bf%b5%ef%bc%8c%e5%8f%ab%e9%81%bf%e8%80%8c%e4%b8%8d%e8%a7%81/",
          "pubDate": "Fri, 22 Feb 2013 01:36:35 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=602"
          },
          "content:encoded": "1、勇敢说出你的想法，哪怕声音会颤抖。

2、成功四要素：①自已要行。②要有人说你行。③说你行的人要行。④身体要行。

3、对自己好，就要用心；对别人好，就要关心。看别人，烦恼起；看自己，智慧生。体谅别人，就会做人；清楚自己，就会做事。人经不起考验，故不要轻易考验于人。

4、我们花了两年学会说话，却要花上六十年来学会闭嘴。大多数时候，我们说得越多，彼此的距离却越远，矛盾也越多。在沟通中，大多数人总是急于表达自己，一吐为快，却一点也不懂对方。两年学说话，一生学闭嘴。懂与不懂，不多说。心乱心静，慢慢说。若真没话，就别说。——海明威

5、一个懂得示弱的女人，能赢得男人的心；一个敢于坚强的女人，能赢得男人的尊重。

6、什么样的男人才真爱你？他也许无法立刻给你最好的生活，但他一定在为美好未来而努力；他也许不能立刻迎合你的习惯，但他一定在为你做着改变；他也许不能满足你所有愿望，但却从不忽视你的想法。两个人相爱着，最美好的莫过于此。那就是一起努力，一起改变，一起梦想。

7、你无法阻止潮起潮落，但你可以学会乘风破浪。

8、什么叫真正的放下？就是有一天，当你再次面对你过往的难堪、你恼怒憎恨的人，心如止水，不再起心动念，坦然面对，一笑了之。即便别人在你面前，复述你过往种种不幸时，你仿佛是在听别人的故事，心里一丝涟漪都没有泛起。放下，莫过如此。

9、喜欢谈论你的，往往是那些不了解你的人。

10、总有一些事，我们不愿它发生，却必须接受；总有些东西，我们不想知道，却必须了解；总有一些人，我们不能没有，却必须学着放手；总有些时间，我们不愿它流逝，却发现根本无能为力。

11、只有当自己处于一个最好的姿态，才会有一个最好的人来爱你。

12、遇到你之前，我以为爱是惊天动地，爱是轰轰烈烈抵死缠绵；我以为爱是荡气回肠，爱是热血沸腾幸福满满；我以为爱是窒息疯狂，爱是炙热的火炭。婚姻生活牵手走过酸甜苦辣温馨与艰难，我开始懂得，爱是经得起平淡的流年。——苏小懒《全世爱》

13、渴望一个笑容，期待一阵春风，你，就刚好经过。

14、友情和爱情一样，也是有保鲜期的，想一想，有多少已经不联系的朋友，默默地存在于你的通讯录中。不是不想联系，实在是人生残酷，时空变幻，你我再无交集。与其相见，不如怀念；与其攀缘，不如随缘。人生不过是一场旅行，你路过我，我路过你，然后，各自修行，各自向前。

15、不要轻易走进另一个人的秘密，除非你们有力量分担彼此的命运。

16、男人总会忽略身边最爱他的人，而宁愿花时间去应酬那些陌生人；女人总是把太多时间放在最爱的人身上，而完全忽略了身边其他的人。所以说，男人不要为全世界而活，真正属于男人的，或许只有那一个爱人，几个家人。女人也不要只为一个人而活，你的人生，还可以拥有全世界。

17、年轻时候应该能够作一些冒险。年轻时候最大的财富，不是你的青春，不是你的美貌，也不是你充沛的精力，而是你有犯错误的机会。如果你年轻时候都不能追随自己心里的那种强烈愿望，去为自己认为该干的事，冒一次风险，哪怕犯一次错误的话。那青春多么苍白啊！——杨澜

18、记得你是女子，你难过，就哭，狠狠的哭，午夜梦回，随你便，然后再忘记你是女子，站在太阳下，就要懂得什么是坚强。

19、专一不是一辈子只喜欢一个人，而是喜欢一个人的时候一心一意。

20、有一种想念，叫避而不见。<strong>
</strong>",
          "wp:post_id": "602",
          "wp:post_date": "2013-02-22 09:36:35",
          "wp:post_date_gmt": "2013-02-22 01:36:35",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "%e5%bf%83%e8%af%ad%ef%bc%9a%e6%9c%89%e4%b8%80%e7%a7%8d%e6%83%b3%e5%bf%b5%ef%bc%8c%e5%8f%ab%e9%81%bf%e8%80%8c%e4%b8%8d%e8%a7%81",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "%e5%bf%83%e8%af%ad",
            "#cdata-section": "心语"
          }
        },
        {
          "title": "2013年2月22日:孙红雷",
          "link": "http://www.pernav.com/2013%e5%b9%b42%e6%9c%8822%e6%97%a5%e5%ad%99%e7%ba%a2%e9%9b%b7/",
          "pubDate": "Fri, 22 Feb 2013 02:01:57 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=649"
          },
          "content:encoded": "<img src=\"http://farm9.staticflickr.com/8232/8489892019_3185e1d962_z.jpg\"  alt=\"2013年2月22日\">",
          "wp:post_id": "649",
          "wp:post_date": "2013-02-22 10:01:57",
          "wp:post_date_gmt": "2013-02-22 02:01:57",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "2013%e5%b9%b42%e6%9c%8822%e6%97%a5%e5%ad%99%e7%ba%a2%e9%9b%b7",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "beauty",
            "#cdata-section": "爱美人"
          }
        },
        {
          "title": "心语：像疯子一样过，忘记生命的颠簸",
          "link": "http://www.pernav.com/%e5%bf%83%e8%af%ad%ef%bc%9a%e5%83%8f%e7%96%af%e5%ad%90%e4%b8%80%e6%a0%b7%e8%bf%87%ef%bc%8c%e5%bf%98%e8%ae%b0%e7%94%9f%e5%91%bd%e7%9a%84%e9%a2%a0%e7%b0%b8/",
          "pubDate": "Sat, 23 Feb 2013 13:10:37 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=652"
          },
          "content:encoded": "1、慧极则伤，强极必辱，情深不寿。

2、有心的人，再远也会记挂对方；无心的人，近在咫尺却远在天涯。

3、好朋友就像是星星。你不一定总是能见到他们，但你知道，他们会一直在那里。

4、是你的，就是你的。越是紧握，越容易失去。我们努力了，珍惜了，问心无愧。其他的，交给命运。

5、你可以沉默不语，不管我的着急；你可以不回信息，不顾我的焦虑；你可以将我的关心，说成让你烦躁的原因；你可以把我的思念，丢在角落不屑一顾。你可以对着其他人微笑，你可以给别人拥抱，你可以对全世界好，却忘了我一直的伤心。你不过是仗着我喜欢你，而那，却是唯一让我变得卑微的原因。

6、抱最大希望，尽最大努力，做最坏打算，持最好心态。记住该记住的，忘记该忘记的，改变能改变的，接受成事实的。

7、最使人疲惫的往往不是道路的遥远，而是你心中的郁闷；最使人颓废的往往不是前途的坎坷，而是你自信的丧失；最使人痛苦的往往不是生活的不幸，而是你希望的破灭；最使人绝望的往往不是挫折的打击，而是你心灵的死亡；所以我们凡事要看淡些，心放开一点，一切都会慢慢变好的。

8、如果你想任性，那就先学会承受，能承受后果才可以任性。如果你想独立，那就先学会坚强，才可以独立。如果你想放肆的爱，那就先学会遗忘，只有能忘掉失恋痛楚，才可以大胆爱。你可以去做一切事情，但前提是不会为结果伤悲。一个人真正的强大，并非看他能做什么，而是看他能承担什么。

9、紧紧抓住旧伤痛不放，你就只是给那些伤害你的人力量，让他们控制你。可是当你原谅他们，你就切断了跟这些人的联结，他们就再也不能打击你。千万不要以为宽恕他们是放他们一马，你这样做不为别的，是为了你自己。

10、花开有时，花落有时，无需留恋，该走的终须会走；无需苛求，该来的迟早会来。

11、如果有一天，你学会了自给自足的平和和宁静，懂得用双手去创造的快乐，而不是因为一个男人的喜而喜，因为一个男人的悲而悲，那时候你才能真正的摆脱男人的桎梏。每个女人，都应该学会该如何转身，在适当的时候。

12、我们都有伤疤，内在的或外在的，无论因为什么原因伤在哪个部位，都不会让你和任何人有什么不同。除非你不敢面对，藏起伤口，让那伤在暗地里发脓溃烂，那会让你成为一个病人，而且无论如何假装，都永远正常不了。——《唐顿庄园》

13、我申请，加入你的人生。

14、誓言用来拴骚动的心，终就拴住了虚空。山林不向四季起誓，荣枯随缘。海洋不需对沙岸承诺，遇合尽兴。连语言都应该舍弃，你我之间，只有干干净净的缄默，与存在。——简祯《海誓》

15、每一个人降生到这个世界上来，一定有一个对于他最适宜的位置，只等他有一天来认领。一个位置对于他是否最适宜，应该去问自己的生命和灵魂，看它们是否感到快乐。——周国平《最合宜的位置》

16、如果我从没遇见你，如果我从没爱上你，如果我一开始没坚信，如果我一开始没坚持，也许我就不会是现在的这个自己。失去才知道你最珍贵，当真的要失去，才知道爱情是那么的娇气。如果有种方法可以不要失去，我都愿意。

17、有天你会遇到一个彩虹般绚丽的人，当你遇到这个人后，会觉得其他人只是浮云而已。——《怦然心动》

18、一个有缺角的圆，第一次找到合适的一角时错失了机会，第二次又因用力过猛而摧毁了那一角，最后终于得以完整，却发现完美的圆，因滚得太快而失去了沿途风景和原来的快乐，最后，他幡然醒悟：成熟，是时光的雕刻，原来不完美才是最大的完美。——谢尔·希尔弗斯坦《失落的一角》

19、亲情是不可以用加减计算的，有便是全然的不图回报的付出，没有则是零，并不存在中间斤斤计较的地带。

20、很多过去，如果一直放在心里，便永远不会释怀。那些给了我们生活烙印的人，我们记住他们一辈子，却不能为他们苦一辈子，新的生活还要展开。其实，生活就要像疯子一样的过，才能忘记生命给我们的颠簸。<strong>
</strong>",
          "wp:post_id": "652",
          "wp:post_date": "2013-02-23 21:10:37",
          "wp:post_date_gmt": "2013-02-23 13:10:37",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "%e5%bf%83%e8%af%ad%ef%bc%9a%e5%83%8f%e7%96%af%e5%ad%90%e4%b8%80%e6%a0%b7%e8%bf%87%ef%bc%8c%e5%bf%98%e8%ae%b0%e7%94%9f%e5%91%bd%e7%9a%84%e9%a2%a0%e7%b0%b8",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "%e5%bf%83%e8%af%ad",
            "#cdata-section": "心语"
          }
        },
        {
          "title": "2013年2月23日:高赫",
          "link": "http://www.pernav.com/2013%e5%b9%b42%e6%9c%8823%e6%97%a5%e9%ab%98%e8%b5%ab/",
          "pubDate": "Sun, 24 Feb 2013 11:25:45 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=656"
          },
          "content:encoded": "<img src=\"http://farm9.staticflickr.com/8376/8499534081_2c0c8e843e_z.jpg\" alt=\"2013年2月23日\">",
          "wp:post_id": "656",
          "wp:post_date": "2013-02-24 19:25:45",
          "wp:post_date_gmt": "2013-02-24 11:25:45",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "2013%e5%b9%b42%e6%9c%8823%e6%97%a5%e9%ab%98%e8%b5%ab",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "beauty",
            "#cdata-section": "爱美人"
          }
        },
        {
          "title": "心语：对于某个人，你就是他的整个世界",
          "link": "http://www.pernav.com/%e5%bf%83%e8%af%ad%ef%bc%9a%e5%af%b9%e4%ba%8e%e6%9f%90%e4%b8%aa%e4%ba%ba%ef%bc%8c%e4%bd%a0%e5%b0%b1%e6%98%af%e4%bb%96%e7%9a%84%e6%95%b4%e4%b8%aa%e4%b8%96%e7%95%8c/",
          "pubDate": "Mon, 25 Feb 2013 01:24:37 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=658"
          },
          "content:encoded": "1、人生艰难，但是如果你有笑对人生的能力，你就有享受人生的能力。

2、美是一种力量。真正的美，寻常人只能欣赏，无法占有。美是图腾，是希望，也转瞬即逝，脆弱不堪。所有的美，终究都有些令人惆怅。——《华丽苍凉 逆流而上》

3、曾经拥有的，不要忘记。不能得到的，更要珍惜。属于自己的，不要放弃。已经失去的，留作回忆。——电影《曾经》

4、每一个优秀的人，都有一段沉默的时光。那一段时光，是付出了很多努力，忍受了很多的孤独和寂寞，不抱怨不诉苦，只有自己知道。而当日后说起时，连自己都能被感动的日子。——《给自己的信》

5、每一次失败，都是成功的伏笔；每一次考验，都有一份收获；每一次泪水，都有一次醒悟；每一次磨难，都有生命的财富。每一次伤痛，都是成长的支柱。每一次打击，都是坚强的后盾；活着必定要经历一些挫折，而我们依然坚强战胜每一次挫折，只要我们还活着，就值得庆幸！

6、我们都不是对方唯一的选择，既然遇见了，就对彼此好一点。

7、人生中的挫折都是有其存在的意义的，它们让你重新步入人生的正轨。或许你还无法理解这些事情发生的原因，或许它们对你来说是痛苦难熬的。但是，当你回过头去审视这些负面的事件时，你会发现它们最终会让你变得更出色。所以，你要笑着面对人生中的困境。

8、好想有那么一个人，可以在我最害怕的时候，抱着我，对我说：“别怕，有我在”。

9、不要让别人的想法决定你的人生。永远不要忘记自己是谁，不要放弃自己的梦想，因为没有人比你更清楚这些。呵护自己的内心的选择，风雨无阻的前行。不经你的允许，没有人可以轻视你。你是自己梦想和幸福的唯一主宰。

10、思念别人是一种温馨，被别人思念是一种幸福，当然好的前提是，彼此思念。

11、生命的四季中我们身边的人来了去了，留下或长或短的记忆，最后都慢慢消失在岁月的褶皱里。时间在变迁，情感在离合，我们渐渐习惯了淡视云起云落，静看花开花谢。人生的很多时候是悄无声息的，有些风景错过了就是遗憾，有些人离开了就是永诀，还留在身边的，值得我们用心珍藏，倾情珍惜。

12、关于生活的经验只有通过你自己的实践之后，才能转化成你的智慧。所以，要去尝试并积累经验，而不是依赖别人的意见。这种亲身的体验，可以让你更加理智的思考，然后朝着正确的方向，更加成熟稳重的前进。

13、做一个安静细微的人，于角落里自在开放，默默悦人，却始终不引起过分热闹的关注，保有独立而随意的品格，这就很好。

14、思念一个人，不必天天见，不必互相拥有或相互毁灭，不是朝思暮想，而是一天总想起他几次。——张小娴

15、出去走走，看看世界，看着别人，思考着自己，旅行会让人谦卑，你会知道地球之大，不再愤世嫉俗，不与人为敌。旅行，为的就是让身体和心灵修炼。

16、有些感情，一直存在，只是不再轻易说出口。有些眼泪，始终不忘，只是不再轻易流下来。

17、所有的悲伤，总会留下一丝欢乐的线索，所有的遗憾，总会留下一处完美的角落，我在冰峰的深海，寻找希望的缺口，却在惊醒时，瞥见绝美的阳光！——几米

18、人生最痛苦的事，莫过于不断努力而梦想永远无法实现，而我们的人生正是如此。令人欣慰的是，我听见时间长廊另一端有个声音说，“也许今天无法实现，明天也不能。重要的是，它在你心里。重要的是，你一直在努力。”——《马丁•路德•金自传》

19、人是多么需要沉静呀。我们在奔波之中，虽然感受着各种冲击，但都不是条理的。若在静下来后，在灯下静悄悄打开一本书，琢磨其中的韵味，或者坐在那儿什么都不想，只是静静地待着，放下所有的心事，安享劳顿之后的静谧，何等释然。

20、对于世界而言，你是一个人；但是对于某个人，你是他的整个世界。",
          "wp:post_id": "658",
          "wp:post_date": "2013-02-25 09:24:37",
          "wp:post_date_gmt": "2013-02-25 01:24:37",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "%e5%bf%83%e8%af%ad%ef%bc%9a%e5%af%b9%e4%ba%8e%e6%9f%90%e4%b8%aa%e4%ba%ba%ef%bc%8c%e4%bd%a0%e5%b0%b1%e6%98%af%e4%bb%96%e7%9a%84%e6%95%b4%e4%b8%aa%e4%b8%96%e7%95%8c",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "%e5%bf%83%e8%af%ad",
            "#cdata-section": "心语"
          }
        },
        {
          "title": "2013年2月26日:宋慧乔",
          "link": "http://www.pernav.com/2013%e5%b9%b42%e6%9c%8826%e6%97%a5%e5%ae%8b%e6%85%a7%e4%b9%94/",
          "pubDate": "Tue, 26 Feb 2013 00:34:11 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=662"
          },
          "content:encoded": "<img src=\"http://farm9.staticflickr.com/8227/8508951494_0aeb3557a5_z.jpg\" alt=\"2013年2月25日\">",
          "wp:post_id": "662",
          "wp:post_date": "2013-02-26 08:34:11",
          "wp:post_date_gmt": "2013-02-26 00:34:11",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "2013%e5%b9%b42%e6%9c%8826%e6%97%a5%e5%ae%8b%e6%85%a7%e4%b9%94",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "beauty",
            "#cdata-section": "爱美人"
          }
        },
        {
          "title": "工作笔记:深入解析CSS样式层叠权重值",
          "link": "http://www.pernav.com/%e5%b7%a5%e4%bd%9c%e7%ac%94%e8%ae%b0%e6%b7%b1%e5%85%a5%e8%a7%a3%e6%9e%90css%e6%a0%b7%e5%bc%8f%e5%b1%82%e5%8f%a0%e6%9d%83%e9%87%8d%e5%80%bc/",
          "pubDate": "Tue, 26 Feb 2013 07:23:26 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=664"
          },
          "content:encoded": "常用权重顺序“important &gt; 内联 &gt; ID &gt; 类 &gt; 标签 | 伪类 | 属性选择 &gt; 伪对象 &gt; 继承 &gt; 通配符”。那么这个顺序是怎么得出来的呢？实际上在<a href=\"http://www.w3.org/TR/CSS2/\" target=\"_blank\">CSS2</a>规范关于具体性(<a href=\"http://www.w3.org/TR/CSS2/cascade.html#specificity\" target=\"_blank\">specificity</a>)的定义中，描述是非常明确的，但是很多中文版本的css图书中采用了10进制的简单相加计算方式（包括第一版《CSS权威指南》，第二版中已经纠正）。因此把规范中对CSS层叠优先级的相关定义意译一下，希望给初入门或对权重计算尚有疑惑的朋友提供一些参考。
根据CSS规范，具体性越明确的样式规则，权重值越高。计算权重值的依据，并不是许多文章所描述的那样“class是10，标签是1，ID是100”之类——虽然这样在大多数情况下能够得到正确的结果。
<h4><span style=\"color: #ff6600;\">选择器权重值的计算</span></h4>
<strong>A：如果规则是写在标签的style属性中（内联样式），则A=1，否则，A=0.</strong> 对于内联样式，由于没有选择器，所以B、C、D的值都为0，即A=1, B=0, C=0, D=0（简写为1,0,0,0，下同）。

<strong>B：计算该选择器中ID的数量。</strong>（例如，#header 这样的选择器，计算为0, 1, 0, 0）。

<strong>C：计算该选择器中伪类及其它属性的数量（包括class、属性选择器等，不包括伪元素）。 </strong>（例如， .logo[id='site-logo'] 这样的选择器，计算为0, 0, 2, 0）。

<strong>D：计算该选择器中伪元素及标签的数量。</strong>（例如，p:first-letter 这样的选择器，计算为0, 0, 0, 2）。

CSS2规范中给出的一些例子：
<pre class=\"lang:default decode:true  crayon-selected\">*             {}  /* a=0 b=0 c=0 d=0 -&gt; specificity = 0,0,0,0 */

li            {}  /* a=0 b=0 c=0 d=1 -&gt; specificity = 0,0,0,1 */

li:first-line {}  /* a=0 b=0 c=0 d=2 -&gt; specificity = 0,0,0,2 */

ul li         {}  /* a=0 b=0 c=0 d=2 -&gt; specificity = 0,0,0,2 */

ul ol+li      {}  /* a=0 b=0 c=0 d=3 -&gt; specificity = 0,0,0,3 */

h1 + *[rel=up]{}  /* a=0 b=0 c=1 d=1 -&gt; specificity = 0,0,1,1 */

ul ol li.red  {}  /* a=0 b=0 c=1 d=3 -&gt; specificity = 0,0,1,3 */

li.red.level  {}  /* a=0 b=0 c=2 d=1 -&gt; specificity = 0,0,2,1 */

#x34y         {}  /* a=0 b=1 c=0 d=0 -&gt; specificity = 0,1,0,0 */

style=”\"          /* a=1 b=0 c=0 d=0 -&gt; specificity = 1,0,0,0 */</pre>
根据这样的定义，所以很多文章简单地把规则归纳为：<em>内联样式的权重值是1000，ID选择器的权重值是100，class选择器的权重值是10，标签选择器的权重值是1. 整条规则中的所有选择器权重值相加得到整个样式规则的权重值，数字越大权重值越高。</em>

大多数情况下，按照这样的理解得出的结论没有问题，但是遇到下面这样的情况就出现问题了：

样式一：
<pre class=\"lang:default decode:true\">body header div nav ul li div p a span em {color: red}</pre>
样式二：
<pre class=\"lang:default decode:true\">.count {color: blue}</pre>
按照错误的计算方法，样式一的权重值是11，样式二的权重值是10，如果这两条规则用于同一个元素，则该元素应该是红色。实际结果却是蓝色。
<h4><span style=\"color: #ff6600;\">权重值的比较</span></h4>
按照四组计算的正确方法，上面例子中的样式一权重值应该是0, 0, 0, 11，样式二的权重值是0, 0, 1, 0。

根据规范，计算权重值时，<strong>A,B,C,D四组值，从左到右，分组比较，如果A相同，比较B，如果B相同，比较C，如果C相同，比较D，如果D相同，后定义的优先。</strong>

样式二和样式一的A、B相同，而样式二的C大于样式一，所以，不管D的值如何，样式二权重值都大于样式一。这就是正确的答案。
<h4><span style=\"color: #ff6600;\">特殊的 !important</span></h4>
在按照ABCD四组计算比较之外，在定义样式的时候，还可以对某一个属性应用 !important。对于一直从事编程而没做过重构的人，需要特别注意的是这里的“!”与其在编程语言中的意义刚好相反，不是代表“不重要”而是代表“很重要”。

CSS2规范中规定：!important 用于<strong>单独指定</strong>某条样式中的单个属性。对于被指定的属性，有 !important 指定的权重值大于所有未用 !important 指定的规则。

例如：

样式一：
<pre class=\"lang:default decode:true\">#header nav ul li.current {color: red; font-weight: bold;}</pre>
样式二：
<pre class=\"lang:default decode:true\">li:hover {color: blue !important; font-weight: normal;}</pre>
就整条规则而言，样式一的权重值为 0, 1, 1, 3，而样式二的权重值仅为0, 0, 0, 2。所以应用于相同元素时，应该样式一生效。但是对于color这个属性，由于在样式二中用 !important 做了指定，因此color将应用样式二的规则。而font-weight则按照规定用样式一的规则。

如果多条规则中都对同一个属性指定了 !important 呢？这时候 !important 的作用相互抵销，依然按照ABCD四组计算比较。

因此 !important 的作用只有在具有唯一性时才能提现，但是我们永远无法预料自己什么时候又需要覆盖一个已经指定了 !important 的属性，所以最好的办法就是：不要使用 !important。
<h4><span style=\"color: #ff6600;\">总结</span></h4>
<ol>
	<li>一条样式规则的整体权重值包含四个独立的部分：[A, B, C, D];</li>
	<li>A表示内联样式，只有1或者0两个值；</li>
	<li>B表示规则中ID的数量；</li>
	<li>C表示规则中除了ID、标签和伪元素以外的其它选择器数量；</li>
	<li>D表示规则中标签和伪元素的数量；</li>
	<li>比较时从高位到低位（从A到D）分别比较，高位相同才需要比较低位；</li>
	<li>有 !important 标记的属性权重值无视没用 !important 指定的一切情况；</li>
	<li>多次指定 !important 时，相互抵销。</li>
</ol>
<strong>文章原始出处:<a href=\"http://www.ofcss.com/2011/05/26/css-cascade-specificity.html\" target=\"_blank\">http://www.ofcss.com/2011/05/26/css-cascade-specificity.html</a></strong>",
          "wp:post_id": "664",
          "wp:post_date": "2013-02-26 15:23:26",
          "wp:post_date_gmt": "2013-02-26 07:23:26",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "%e5%b7%a5%e4%bd%9c%e7%ac%94%e8%ae%b0%e6%b7%b1%e5%85%a5%e8%a7%a3%e6%9e%90css%e6%a0%b7%e5%bc%8f%e5%b1%82%e5%8f%a0%e6%9d%83%e9%87%8d%e5%80%bc",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "%e5%b7%a5%e4%bd%9c%e7%ac%94%e8%ae%b0",
            "#cdata-section": "工作笔记"
          },
          "wp:postmeta": {
            "wp:meta_key": "_edit_last",
            "wp:meta_value": "1"
          }
        },
        {
          "title": "心语：有时候，最好的安慰，就是无言的陪伴",
          "link": "http://www.pernav.com/%e5%bf%83%e8%af%ad%ef%bc%9a%e6%9c%89%e6%97%b6%e5%80%99%ef%bc%8c%e6%9c%80%e5%a5%bd%e7%9a%84%e5%ae%89%e6%85%b0%ef%bc%8c%e5%b0%b1%e6%98%af%e6%97%a0%e8%a8%80%e7%9a%84%e9%99%aa%e4%bc%b4/",
          "pubDate": "Wed, 27 Feb 2013 01:48:07 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=670"
          },
          "content:encoded": "1、一辈子，和同一个人，睡同一张床，吃同一锅饭。

2、幸福，其实很简单。当我失落、当我伤心、当我落泪，你会走到我身边给我一个拥抱，毫不犹豫。

3、我不知道的事，它就伤害不了我。我不去想的事，它就困扰不了我。就算是逃避吧，有时候，我宁愿做一只快乐的鸵鸟。

4、每一个今天，都将是明天的回忆。1440分钟，做该做的事，见想见的人，吃好吃的东西。丢开烦恼，认真欢乐，让今天成为最棒的回忆。

5、没有受过挫折的人很容易被打倒。碰壁、碰壁，然后超越过它，这样人会很坚强，可以茁壮成长。

6、一个聪明的女人，不会妄图去证明自己的男人坐怀不乱，而是让男人习惯拒绝除自己以外的女人来坐怀；一个聪明的朋友，不会让友人在自己与利益中做选择，而是竭力创造彼此共同的利益；只有愚蠢的人，才去考验别人的人性，然后，两败俱伤。

7、爱的深，容易看见伤痕，但只要真爱还在，那伤痕也就成了爱的纪念币。

8、人生的路上，谁的生活都不可能一成不变，所以不要笑话别人，说不定有一天被你笑话的人正是能帮到你的人。做人要给自己留条路，谁也不会完美无缺，谁也不敢保证自己一直都是人生得意的。不要把别人的不好，当做是你的笑柄。

9、选择只是短短几秒钟的事，然后用余下的时间来还债。

10、所有处在恋爱年龄的女孩子，总是分成两派：一派说，爱对方多一点是幸福的；另一派说，对方爱我多一点，才是幸福的。也许，我们都错了。爱的形式与分量从来不是设定在我们心里，你遇上一个怎样的男人，你便会谈一段怎样的恋爱。

11、当有人离开，要么是他们变了，要么是你变了。

12、在我们爱上一个人的时候，适当的卑微卑微没有什么，只要不犯贱，你的爱情就有未来。犯贱也没什么，只要两个人都犯贱，依然有未来。怕就怕的是一个人犯贱，另一个人不犯贱，单方面的犯贱没有任何未来。

13、有时明明气得要死，可是，面对某些人，那骂人的话也变成了情话。

14、有时候并不是不想接你的电话，而是不敢接——我怕我抑制不住对你想念，怕我辛苦筑起的防线在你的声音中融化。

15、人类的生命，并不能以时间长短来衡量，心中充满爱时，刹那即永恒。——尼采

16、每个人心底都有那么一个人，已不是恋人，也成不了朋友。时间过去，无关乎喜不喜欢，总会很习惯的想起你，然后希望你一切都好。——《虞美人盛开的山坡》

17、所有随风而逝的都属于昨天的，所有历经风雨留下来的才是面向未来的。——玛格丽特·米切尔《飘》

18、我越来越相信，创造美好的代价是：努力、失望以及毅力。首先是疼痛，然后才是欢乐。——梵高

19、人生最大的乐趣，在于“答案没有正式揭晓”前，什么都是可能的。——蔡康永

20、有时候，最好的安慰，就是无言的陪伴。",
          "wp:post_id": "670",
          "wp:post_date": "2013-02-27 09:48:07",
          "wp:post_date_gmt": "2013-02-27 01:48:07",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "%e5%bf%83%e8%af%ad%ef%bc%9a%e6%9c%89%e6%97%b6%e5%80%99%ef%bc%8c%e6%9c%80%e5%a5%bd%e7%9a%84%e5%ae%89%e6%85%b0%ef%bc%8c%e5%b0%b1%e6%98%af%e6%97%a0%e8%a8%80%e7%9a%84%e9%99%aa%e4%bc%b4",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "%e5%bf%83%e8%af%ad",
            "#cdata-section": "心语"
          }
        },
        {
          "title": "2013年2月27日:文根英",
          "link": "http://www.pernav.com/2013%e5%b9%b42%e6%9c%8827%e6%97%a5%e6%96%87%e6%a0%b9%e8%8b%b1/",
          "pubDate": "Wed, 27 Feb 2013 03:59:28 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=674"
          },
          "content:encoded": "<img src=\"http://farm9.staticflickr.com/8106/8511204427_9385b6fa3d_b.jpg\"  alt=\"2013年2月27日\">",
          "wp:post_id": "674",
          "wp:post_date": "2013-02-27 11:59:28",
          "wp:post_date_gmt": "2013-02-27 03:59:28",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "2013%e5%b9%b42%e6%9c%8827%e6%97%a5%e6%96%87%e6%a0%b9%e8%8b%b1",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "beauty",
            "#cdata-section": "爱美人"
          }
        },
        {
          "title": "心语：成年人的生活里，没有“容易”二字",
          "link": "http://www.pernav.com/%e5%bf%83%e8%af%ad%ef%bc%9a%e6%88%90%e5%b9%b4%e4%ba%ba%e7%9a%84%e7%94%9f%e6%b4%bb%e9%87%8c%ef%bc%8c%e6%b2%a1%e6%9c%89%e5%ae%b9%e6%98%93%e4%ba%8c%e5%ad%97/",
          "pubDate": "Fri, 01 Mar 2013 06:20:42 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=699"
          },
          "content:encoded": "1、早上最美好的部分，就是知道有那么一个人，正静静地等着你醒来。

2、不如就承认一下，我们没有那么坚强，也不像那样刀枪不入，我们只是想被温暖的抱一下。

3、当你每天醒来的时候都有两个选择：醒来，再睡，继续未完的美梦；醒来，站起来，去实现自己的梦想。

4、所有的时光都是被辜负被浪费后，才能从记忆里将某一段拎出来，拍拍上面沉积的灰尘，感叹它是最好的时光。

5、我们选择情人时眼光很好，选择不合适的情人时眼光更好。好像有种本能，想方设法寻找那不合适的人。当然，这些不合适的人，在有些方面倒是挺适合的——他们惩罚、恐吓或羞辱我们，让我们失望，离我们而去，或者最糟的，让我们误以为他们并非不合适。于是我们在爱情世界里摇摆不定。

6、最幸福的事，莫过于和相爱的人，制造一些比春天还温暖的记忆。

7、安全感不是你必须说全部密码给我知道，而是即使全部都不知道，我都确定你不会犯错。安全感不是吵架时候你拉着我搂着我，而是即使冷战，我都清楚知道你不会放走我。安全感就是我心甘情愿地全心信任你，同时你能毫无保留忠诚地珍惜我的信任。

8、如果你就此消失不见，我会找你半辈子，等你半辈子。

9、一句对不起，让我们的爱败给了时间，败给了距离。或许时间和距离都是借口，不爱了才是真正的理由。其实，只要你一句不爱了，我就会放手，我会给你自由，让你去追你的幸福。只是，不要骗我，我要的不是你假装还爱我。

10、友谊法则第一条：尽量不要让你的朋友感到孤单。所以啊，有事儿没事儿放心大胆去烦烦他们！

11、我跟自己说好，要活得真实，不管别人怎么看我，就算全世界否定我，我还有我自己相信我自己，无需去想是否有人在乎我。我跟自己说好，悲伤时可以哭的很狼狈，眼泪流干了后，要抬头笑得更漂亮。

12、孤独，是因为你心里没有人。寂寞，是因为你心里的那个人不在身边。

13、我以为终有一天，我会彻底将爱情忘记，将你忘记。可是忽然有一天，我听到了一首旧歌，我的眼泪就下来了。因为这首歌，我们一起听过。

14、遇到比你有钱的人，请不要自动的卑躬屈膝，除非他有要把他的钱给你。而通常有钱人，并不会把钱送给随便就对他们卑躬屈膝的人。所以，何必呢！——蔡康永

15、忍别人所不能忍的痛，吃别人所不能吃的苦，收获别人所得不到的收获。

16、人总是在遭遇一次重创之后，才会幡然醒悟，重新认识自己的坚强和隐忍。所以，无论你正在遭遇什么磨难，都不要一味抱怨上苍不公平，甚至从此一蹶不振。人生没有过不去的坎，只有过不去的人。

17、我觉得，这个世界已经待我极好。从前我也不曾这么认为，直到，我在芸芸众生之中遇见你。遇见一道光，让我此生再无遗憾，再不畏惧。

18、恋爱不是谈的，是坠入的。有一天，在没有察觉到的时候，头朝下坠下去。

19、和你打电话的时候，你长长的那声wei，听起来好像woaini。

20、成年人的生活里，没有“容易”二字。",
          "wp:post_id": "699",
          "wp:post_date": "2013-03-01 14:20:42",
          "wp:post_date_gmt": "2013-03-01 06:20:42",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "%e5%bf%83%e8%af%ad%ef%bc%9a%e6%88%90%e5%b9%b4%e4%ba%ba%e7%9a%84%e7%94%9f%e6%b4%bb%e9%87%8c%ef%bc%8c%e6%b2%a1%e6%9c%89%e5%ae%b9%e6%98%93%e4%ba%8c%e5%ad%97",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "%e5%bf%83%e8%af%ad",
            "#cdata-section": "心语"
          }
        },
        {
          "title": "CSS3选择器A之—基本选择器",
          "link": "http://www.pernav.com/css3%e9%80%89%e6%8b%a9%e5%99%a8a%e4%b9%8b-%e5%9f%ba%e6%9c%ac%e9%80%89%e6%8b%a9%e5%99%a8/",
          "pubDate": "Mon, 04 Mar 2013 01:32:55 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=702"
          },
          "content:encoded": "<pre class=\"lang:default decode:true\">&lt;div class=\"demo\"&gt;
	&lt;ul class=\"clearfix\"&gt;
		&lt;li id=\"first\" class=\"first\"&gt;1&lt;/li&gt;
		&lt;li class=\"active important\"&gt;2&lt;/li&gt;
		&lt;li class=\"important items\"&gt;3&lt;/li&gt;
		&lt;li class=\"important\"&gt;4&lt;/li&gt;
		&lt;li class=\"items\"&gt;5&lt;/li&gt;
		&lt;li&gt;6&lt;/li&gt;
		&lt;li&gt;7&lt;/li&gt;
		&lt;li&gt;8&lt;/li&gt;
		&lt;li&gt;9&lt;/li&gt;
		&lt;li id=\"last\" class=\"last\"&gt;10&lt;/li&gt;
	&lt;/ul&gt;
&lt;/div&gt;</pre>
<h4><span style=\"color: #ff6600;\">一、通配符选择器（＊）(所有浏览器支持通配符选择器(*))</span></h4>
通配符选择器是用来选择所有元素，，也可以选择某个元素下的所有元素。如：
<pre class=\"lang:default decode:true\">*{margin:0;padding: 0;}</pre>
<span style=\"color: #99cc00;\">上面代码</span>\"*\"大家在reset样式文件中看到的肯定不少，他所表示的是，所有元素的margin和padding都设置为0
<h4><span style=\"color: #ff6600;\">二、元素选择器(E)(所有浏览器支持元素选择器(E))</span></h4>
元素选择器，是css选择器中最常见而且最基本的选择器。元素选择器其实就是文档的元素，如html,body,p,div等等，比如我们这个demo：中元素包括了div,ul,li等。
<pre class=\"lang:default decode:true\">li {background-color: grey;color: orange;}</pre>
<span style=\"color: #99cc00;\">上面代码</span>\"li\"表示选择页面的li元素，并设置了背景色和前景色
<h4><span style=\"color: #ff6600;\">三、类选择器（.className）(所有浏览器都支持类选择器，但多类选择器（.className1.className2）不被ie6支持)</span></h4>
类选择器是以一独立于文档元素的方式来指定样式，使用类选择器之前需要在html元素上定义类名，换句话说需要保证类名在html标记中存在，这样才能选择类，如：
<pre class=\"lang:default decode:true\">&lt;li class=\"active important items\"&gt;2&lt;/li&gt;
.important {font-weight: bold; color: yellow;}</pre>
<span style=\"color: #99cc00;\">上面代码</span>\"important\"表示是给有important类名的元素加上一个“字体为粗体，颜色为黄色”的样式

类选择器还可以结合元素选择器来使用，比如说，你文档中有好多个元素使用了类名“items”，但你只想在p元素这个类名上修改样式，那么你可以这样进行选择并加上相应的样式：
<pre class=\"lang:default decode:true\">p.items {color: red;}</pre>
<span style=\"color: #99cc00;\">上面代码</span>“p.items”只会对p元素并且是其有一个类名叫“items”。不符合这两个条件的都不会被选择。

类选择器还有可以具备多类名，上面我们也看到了，我们li元素中同时有两个或多少类名，其中他们以空格隔开，那么选择器也可以使用多类连接在一起，如：
<pre class=\"lang:default decode:true\">.important.items {background:#ccc;}</pre>
<span style=\"color: #99cc00;\">上面代码</span>\".important.items\"这个选择器只对元素中同时包含了\"important\"和\"items\"两个类才能起作用
<h4><span style=\"color: #ff6600;\">四、id选择器（#ID）(所有浏览器都支持(#ID)选择器)</span></h4>
ID选择器和上面说的类选择器是很相似的，在使用ID选择器之前也需要先在html文档中加注ID名称，这样在样式选择器中才能找到相对应的元素，不同的是ID选择器是一个页面中唯一的值，我们在类使用时是在相对应的类名前加上一个“.”号（.className）而id选择器是在名称前使用\"#\"如(#id),
<pre class=\"lang:default decode:true\">#first {background: lime;color: #000;}
#last {background: #000;color: lime;}</pre>
ID选择器有几个地方需要特别注意的，第一：一个文档中一个id选择器只充许使用一次，因为id在页面中是唯一的；第二，id选择器不能像类选择器一样多个合并使用，一个元素只能命名一个id名；第三，可以在不同的文档中使用相同的id名，比如说在“test.html”中给h1定了“＃important”,也可以给“test1.html”中定义p的id为\"#important\"，但前提是不管在test.html还是test1.html中只充许有一个id叫\"#important\"的存在。
<h4><span style=\"color: #ff6600;\">五、后代选择器（Ｅ Ｆ）(所有浏览器都支的后代选择器(E F))</span></h4>
后代选择器也被称作包含选择器,所起作用就是可以选择某元素的后代元素，比如说:E F，前面E为祖先元素，Ｆ为后代元素，所表达的意思就是选择了Ｅ元素的所有后代Ｆ元素，请注意他们之间需要一个空格隔开。这里Ｆ不管是E元素的子元素或者是孙元素或者是更深层次的关系，都将被选中，换句话说，不论Ｆ在Ｅ中有多少层关系，都将被选中：
<pre class=\"lang:default decode:true\">.demo li{color: blue;}</pre>
<span style=\"color: #99cc00;\">上面代码</span>\".demo li\"，选中类名.demo中所有的li元素
<h4><span style=\"color: #ff6600;\">六、子元素选择器(E&gt;F)(IE6不支持子元素选择器(E&gt;F))</span></h4>
子元素选择器只能选择某元素的子元素，其中E为父元素，而F为子元素，其中E&gt;F所表示的是选择了Ｅ元素下的所有子元素Ｆ。这和后代选择器（Ｅ Ｆ）不一样，在后代选择器中Ｆ是Ｅ的后代元素，而子元素选择器Ｅ &gt; F，其中Ｆ仅仅是Ｅ的子元素而以。
<pre class=\"lang:default decode:true\">ul &gt; li {background: green;color: yellow;}</pre>
<span style=\"color: #99cc00;\">上面代码</span>\"ul &gt; li\"选择ul下的所有子元素li
<h4><span style=\"color: #ff6600;\">七、相邻兄弟元素选择器(E + F)(IE</span><span style=\"color: #ff6600;\">6不支持相邻兄弟元素选择器(E+F))</span></h4>
相邻兄弟选择器可以选择紧接在另一元素后的元素，而且他们具有一个相同的父元素，换句话说，EF两元素具有一个相同的父元素，而且Ｆ元素在Ｅ元素后面，而且相邻，这样我们就可以使用相邻兄弟元素选择器来选择Ｆ元素。
<pre class=\"lang:default decode:true\">li + li{background: green;color: yellow; border: 1px solid #ccc;}</pre>
<span style=\"color: #99cc00;\">上面代码</span>\"li + li\"表示选择li的相邻元素li，我们这里一共有十个li，那么上面的代码选择了从第2个li到 10 个li，一共九个.
<pre class=\"lang:default decode:true\">.active + li {background: green;color: yellow; border: 1px solid #ccc;}</pre>
<span style=\"color: #99cc00;\">上面代码</span>\".active + li\"选择了li.active后面相邻的li元素，注意了和li.active后面相邻的元素仅只有一个的。
<h4><span style=\"color: #ff6600;\">八、通用兄弟选择器（Ｅ 〜 Ｆ）</span><span style=\"color: #ff6600;\">(IE6不支持通用兄弟选择器(Ｅ 〜 Ｆ))</span></h4>
通用兄弟元素选择器是CSS3新增加一种选择器，这种选择器将选择某元素后面的所有兄弟元素，他们也和相邻兄弟元素类似，需要在同一个父元素之中，换句话说，E和F元素是属于同一父元素之内，并且F元素在Ｅ元素之后，那么E ~ F 选择器将选择中所有Ｅ元素后面的Ｆ元素。比如下面的代码：
<pre class=\"lang:default decode:true\">.active ~ li {background: green;color: yellow; border: 1px solid #ccc;}</pre>
<span style=\"color: #99cc00;\">上面代码</span>\".active ~ li\"表示选择选择中了li.active 元素后面的所有兄弟元素li.
<h4><span style=\"color: #ff6600;\">九、群组选择器（selector1,selector2,...,selectorN）(所有浏览器都支持群组选择器)</span></h4>
群组选择器是将具有相同样式的元素分组在一起，每个选择器之间使用逗号“，”隔开，如上面所示selector1,selector2,...,selectorN。这个逗号告诉浏览器，规则中包含多个不同的选择器，如果不有这个逗号，那么所表达的意就完全不同了，省去逗号就成了我们前面所说的后代选择器，这一点大家在使用中千万要小心加小心。我们来看一个简单的例子：
<pre class=\"lang:default decode:true\">.first, .last {background: green;color: yellow; border: 1px solid #ccc;}</pre>
<span style=\"color: #99cc00;\">上面代码</span>\".first\"和\".last\"具有相同的样式效果，所以我们把他们写到一个组里来.

上面九种选择器是CSS3中的基本选择器，而我们最常用的是元素选择器、类选择器、ID选择器、后代选择器、群组选择器，同时大家可以在实际应用中把这些选择器结合起来使用，达到目的就行了。

<strong> 文章原始出处:<a href=\"http://www.w3cplus.com/css3/basic-selectors\" target=\"_blank\">http://www.w3cplus.com/css3/basic-selectors</a></strong>",
          "wp:post_id": "702",
          "wp:post_date": "2013-03-04 09:32:55",
          "wp:post_date_gmt": "2013-03-04 01:32:55",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "css3%e9%80%89%e6%8b%a9%e5%99%a8a%e4%b9%8b-%e5%9f%ba%e6%9c%ac%e9%80%89%e6%8b%a9%e5%99%a8",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "css3",
            "#cdata-section": "CSS3"
          }
        },
        {
          "title": "CSS3选择器B之—属性选择器",
          "link": "http://www.pernav.com/css3%e9%80%89%e6%8b%a9%e5%99%a8b%e4%b9%8b-%e5%b1%9e%e6%80%a7%e9%80%89%e6%8b%a9%e5%99%a8/",
          "pubDate": "Mon, 04 Mar 2013 02:11:47 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=707"
          },
          "content:encoded": "这节主要和大家一起来学习CSS3选择器的第二部分——属性选择器。<strong><span style=\"color: #ff6600;\">属性选择器早在CSS2中就被引入了，其主要作用就是对带有指定属性的HTML元素设置样式</span>。</strong>使用CSS3属性选择器，你可以只指定元素的某个属性，或者你还可以同时指定元素的某个属性和其对应的属性值

从上一节展示的CSS3选择器的图表中，我们可以知道，<strong>CSS3的属性选择器主要包括以下几种：</strong>

1、E[attr]：只使用属性名，但没有确定任何属性值；

2、E[attr=\"value\"]：指定属性名，并指定了该属性的属性值；

3、E[attr~=\"value\"]：指定属性名，并且具有属性值，此属性值是一个词列表，并且以空格隔开，其中词列表中包含了一个value词，而且等号前面的“〜”不能不写；

4、E[attr^=\"value\"]：指定了属性名，并且有属性值，属性值是以value开头的；

5、E[attr$=\"value\"]：指定了属性名，并且有属性值，而且属性值是以value结束的；

6、E[attr*=\"value\"]：指定了属性名，并且有属性值，而且属值中包含了value；

7、E[attr|=\"value\"]：指定了属性名，并且属性值是value或者以“value-”开头的值（比如说zh-cn）;
<div class=\"demo clearfix\">
<pre class=\"lang:default decode:true\">&lt;div class=\"demo clearfix\"&gt;
	&lt;a href=\"http://www.w3cplus.com\" target=\"_blank\" class=\"links item first\" id=\"first\" title=\"w3cplus\"&gt;1&lt;/a&gt;
	&lt;a href=\"\" class=\"links active item\" title=\"test website\" target=\"_blank\" lang=\"zh\"&gt;2&lt;/a&gt;
	&lt;a href=\"sites/file/test.html\" class=\"links item\" title=\"this is a link\" lang=\"zh-cn\"&gt;3&lt;/a&gt;
	&lt;a href=\"sites/file/test.png\" class=\"links item\" target=\"_balnk\" lang=\"zh-tw\"&gt;4&lt;/a&gt;
	&lt;a href=\"sites/file/image.jpg\" class=\"links item\" title=\"zh-cn\"&gt;5&lt;/a&gt;
	&lt;a href=\"mailto:w3cplus@hotmail\" class=\"links item\" title=\"website link\" lang=\"zh\"&gt;6&lt;/a&gt;
	&lt;a href=\"\" class=\"links item\" title=\"open the website\" lang=\"cn\"&gt;7&lt;/a&gt;
	&lt;a href=\"\" class=\"links item\" title=\"close the website\" lang=\"en-zh\"&gt;8&lt;/a&gt;
	&lt;a href=\"\" class=\"links item\" title=\"http://www.sina.com\"&gt;9&lt;/a&gt;
	&lt;a href=\"\" class=\"links item last\" id=\"last\"&gt;10&lt;/a&gt;
&lt;/div&gt;</pre>
</div>
<div class=\"demo clearfix\"><span style=\"color: #ff6600;\"><strong><span style=\"font-size: 1em;\">一、E[attr](IE6不支持E[attr]这种选择器)</span></strong></span></div>
E[attr]属性选择器是CSS3属性选择器中最简单的一种。如果你希望选择有某个属性的元素，而不论这个属性值是什么，你就可以使用这个属性选择器，如：
<pre class=\"lang:default decode:true\">.demo a[id] {background: blue; color:yellow;font-weight:bold;}</pre>
<span style=\"color: #99cc00;\">上面代码</span>\".demo a[id]\"选择了div.demo下所有带有id属性的a元素，并在这个元素上使用背景色为兰色，前景色为黄色，字体加粗的样式，对照上面的html，我们不难发现，只有第一个和最后一个链接使用了id属性，所以选中了这两个a元素.

上面是单一属性的使用，你也可以使用多属性进行选择元素，如E[attr1][attr2], 这样只要是同时具有这两属性的元素都将被选中：
<pre class=\"lang:default decode:true\">.demo a[href][title] {background: yellow; color:green;}</pre>
<span style=\"color: #99cc00;\">上面代码</span>\".demo a[href][title]\"所表示的，选择了div.demo下的同时具有href,title两个属性的a元素。
<h4><strong><span style=\"color: #ff6600;\">二、Ｅ[attr=\"value\"](IE</span></strong><span style=\"color: #ff6600;\">6浏览器不支持Ｅ[attr=\"value\"]这种选</span><strong><span style=\"color: #ff6600;\">择器)</span></strong></h4>
E[attr=\"value\"]选择器和E[attr]选择器，从字面上就能很清楚的理解出来，E[attr=\"value\"]是指定了属性值“value”，而E[attr]只是选择了有对应的属性，并没有明确指其对应的属性值\"value\"，这也是这两种选择器的最大区是之处。从而缩小了选择 围，更能精确选择自己需要的元素，在前面实例基础上我们进行一下简单的修改：
<pre class=\"lang:default decode:true\">.demo a[id=\"first\"] {background: blue; color:yellow;font-weight:bold;}</pre>
<span style=\"color: #99cc00;\">上面代码</span>\".demo a[id=\"first\"] \"选中的是div.demo中的a元素，并且这个元素有一个\"id=\"first\"\"属性值.
E[attr=\"value\"]属性选择器也可以多个属性并写,<b>对于E[attr=\"value\"]这种属性值选择器有一点需要注意：属性和属性值必须完全匹配，特别是对于属性值是词列表的形式时.</b>
<pre class=\"lang:default decode:true\">.demo a[href=\"http://www.w3cplus.com\"][title] {background: yellow; color:green;}</pre>
<span style=\"color: #99cc00;\">上面代码</span>\".demo a[href=\"http://www.w3cplus.com\"][title] \"选中的是div.demo中的a元素，并且这个元素有一个\"href=\"http://www.w3cplus.com\"\"属性值和一个title值.
<pre class=\"lang:default decode:true\">&lt;a href=\"\" class=\"links item\" title=\"open the website\"&gt;7&lt;/a&gt;
.demo a[class=\"links item\"]{color:red};/*这样才是匹配的，记得中间的空格不能少的哟*/</pre>
<span style=\"color: #99cc00;\">上面代码</span>\".demo a[class=\"links item\"]\"才能匹配\"class=\"links item\" \"这个元素，<strong>必须完全匹配哦！！</strong>
<h4><span style=\"color: #ff6600;\">三、E[attr~=\"value\"](IE6不支持E[attr^=\"value\"]选择器)</span></h4>
如果你想根据属性值中的词列表的某个词来进行选择元素，那么就需要使用这种属性选择器：E[attr~=\"value\"]，这种属性选择器是属性值是一个或多个词列表，如果是列表时，他们需要用空格隔开，只要属性值中有一个value相匹配就可以选中该元素，而我们前面所讲的E[attr=\"value\"]是属性值需要完全匹配才会被选中，他们两者区别就是一个有“〜”号，一个没有“〜”号。我们来看一个这方面的实例：
<pre class=\"lang:default decode:true\">.demo a[title~=\"website\"]{background:orange;color:green;}</pre>
这个实例再次证明了E[attr=\"value\"]和E[attr~=\"value\"]之间的区别，和其中“〜”所取的作用，我总结了一句话：<b>属性选择器中有波浪（〜）时属性值有value时就相匹配，没有波浪（〜）时属性值要完全是value时才匹配。</b>

<span style=\"color: #99cc00;\">上面代码</span>“.demo a[title~=\"website\"]”表示的是，div.demo下的a元素的title属性中，只要其属性值中含有\"website\"这个词就会被选择，回头看看我们的html，不难发现所有a元素中“2，6，7，8”这四个a元素的title中都含有,所以被选中。

<span style=\"color: #ff6600;\">四、E[attr^=\"value\"](IE6不支持E[attr^=\"value\"]选择器)</span>

E[attr^=\"value\"]属性选择器，指的是选择attr属性值以“value”开头的所有元素，换句话说，选择的属性其以对应的属性值是以“value”开始的，一起来看个实例：
<pre class=\"lang:default decode:true\">.demo a[href^=\"http://\"]{background:orange;color:green;}
.demo a[href^=\"mailto:\"]{background:green;color:orange;}</pre>
<span style=\"color: #99cc00;\">上面代码</span>\".demo a[href^=\"http://\"]、.demo a[href^=\"mailto:\"]\"表示的是选择了以href属性，并且以\"http://\"和\"mailto:\"开头的属性值的所有a元素，换过更简单一点的呢？只要a元素中的href属性值是以\"http://\"或\"mailto:\"开头的a元素都会以选中。
<h4><span style=\"color: #ff6600;\">五、E[attr$=\"value\"](IE6不支持E[attr$=\"value\"]属性选择器)</span></h4>
Ｅ[attr$=\"value\"]属性选择器刚好与E[attr^=\"value\"]选择器相反，E[attr$=\"value\"]表示的是选择attr属性值以\"value\"结尾的所有元素，换句话说就是选择元素attr属性，并且他的属性值是以value结尾的，这个运用在给你一些特殊的链接加背景图片很方便的，比如说给pdf,png,doc等不同文件加上不同icon，我们就可以使用这个属性来实现，如：
<pre class=\"lang:default decode:true\">.demo a[href$=\"png\"]{background:orange;color:green;}</pre>
<span style=\"color: #99cc00;\">上面代码</span>“.demo a[href$=\"png\"]”表示的是，选择div.demo中元素有href属性，并以png值结尾的a元素。
<h4><span style=\"color: #ff6600;\">六、E[attr*=\"value\"](IE6不支持E[attr*=\"value\"]属性选择器)</span></h4>
E[attr*=\"value\"]属性选择器表示的是选择attr属性值中包含子串\"value\"的所有元素。也就是说，只要你所选择的属性，其属性值中有这个\"value\"值都将被选中，如：
<pre class=\"lang:default decode:true\">.demo a[title*=\"site\"]{background:black;color:white;}</pre>
<span style=\"color: #99cc00;\">上面代码</span>“.demo a[title*=\"site\"]”表示的是：选择了div.demo中a元素，而a元素的title属性中只要有\"site\"就符合选择条件
<h4><span style=\"color: #ff6600;\">七、E[attr|=\"value\"](IE6不支持E[attr|=\"value\"]选择器)</span></h4>
E[attr|=\"value\"]是属性选择器中的最后一种，在说这个选择器使用之前先提醒大家attr后面的是一个竖线“｜”而不是l，小心搞错了。E[attr|=\"value\"]被称作为特定属性选择器。这个选择器会选择attr属性值等于value或以value-开头的所有元素,我们来看个实例：
<pre class=\"lang:default decode:true\">.demo a[lang|=\"zh\"]{background:gray;color:yellow;}</pre>
<span style=\"color: #99cc00;\">上面代码</span>“.demo a[lang|=\"zh\"]”会选中了div.demo中lang属性等于zh或以zh-开头的所有a元素，大家可以对照前面的html代友，其中\"2,3,4,6\"被选中，因为他们都有一个lang属性，并且他们的属性值都符合以\"zh\"或\"zh-\"开始的元素。具体效果如下：

有关于属性选择器就上面这些内容了，属性选择器除了IE6不支持外，其他的浏览器都能支持，这样一来，如果你在你的页面上使用了属性选择器，而且你需要处理ie6兼容问题，那你就需要确保IE6用别的方法来实现或者你应该确保IE6用户将能获得一个可用的页面。<b>七种属性选择器中E[attr=\"value\"]和E[attr*=\"value\"]是最实用的，其中E[attr=\"value\"]能帮我们定位不同类型的元素，特别是表单form元素的操作，比如说input[type=\"text\"],input[type=\"checkbox\"]等，而E[attr*=\"value\"]能在网站中帮助我们匹配不同类型的文件，比如说你的网站上不同的文件类型的链接需要使用不同的icon图标，用来帮助你的网站提高用户体验，就像前面的实例，可以通过这个属性给\".doc\",\".pdf\",\".png\",\".ppt\"配置不同的icon图标。</b>

<strong><strong> 文章原始出处:</strong><a href=\"http://www.w3cplus.com/css3/attribute-selector\" target=\"_blank\">http://www.w3cplus.com/css3/attribute-selector</a></strong>",
          "wp:post_id": "707",
          "wp:post_date": "2013-03-04 10:11:47",
          "wp:post_date_gmt": "2013-03-04 02:11:47",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "css3%e9%80%89%e6%8b%a9%e5%99%a8b%e4%b9%8b-%e5%b1%9e%e6%80%a7%e9%80%89%e6%8b%a9%e5%99%a8",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "css3",
            "#cdata-section": "CSS3"
          }
        },
        {
          "title": "CSS3选择器C之—伪类选择器",
          "link": "http://www.pernav.com/css3%e9%80%89%e6%8b%a9%e5%99%a8c%e4%b9%8b-%e4%bc%aa%e7%b1%bb%e9%80%89%e6%8b%a9%e5%99%a8/",
          "pubDate": "Mon, 04 Mar 2013 03:39:38 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=716"
          },
          "content:encoded": "伪类选择器对于大家来说最熟悉的莫过于:link,:focus,:hover之类的了，因为这些在平时中是常用到的伪类选择器，那么先和大家一起简单总结一下CSS中常用的伪类选择器的使用方法，最后把重心放到CSS3新增加的\":nth-child\"选择器的使用方法。

<strong>CSS的伪类语法和别的语法有点不一样，其主要有两种语法表达方式</strong>
<h5><span style=\"color: #ff6600;\">第一种写法</span></h5>
E:pseudo-class {property:value}/*其中E为元素;pseudo-class为伪类名称;property是css的属性;value为css的属性值*/

示例：
<pre class=\"lang:default decode:true\">a:link {color:red;}</pre>
<h5><span style=\"color: #ff6600;\">第二种写法</span></h5>
E.class:pseudo-class{property:value}

示例：
<pre class=\"lang:default decode:true\">a.selected:hover {color: blue;}</pre>
下面开始我们一起来看看这些伪类的具体应用：
<h4><span style=\"color: #ff6600;\">一、动态伪类(对于:hover在IE6下只有a元素支持，:active只有IE7-6不支持，:focus在IE6-7下不被支持)</span></h4>
动态伪类，因为这些伪类并不存在于HTML中,而只有当用户和网站交互的时候才能体现出来，动态伪类包含两种，第一种是我们在链接中常看到的锚点伪类，如\":link\",\":visited\";另外一种被称作用户行为伪类，如“:hover”,\":active\"和\":focus\"。先来看最常见的锚点伪类
<pre class=\"lang:default decode:true\">.demo a:link {color:gray;}/*链接没有被访问时前景色为灰色*/
.demo a:visited{color:yellow;}/*链接被访问过后前景色为黄色*/
.demo a:hover{color:green;}/*鼠标悬浮在链接上时前景色为绿色*/
.demo a:active{color:blue;}/*鼠标点中激活链接那一下前景色为蓝色*/</pre>
<b>对于这四个锚点伪类的设置，有一点需要特别注意，那就是他们的先后顺序，要让他们遵守一个爱恨原则LoVe/HAte,也就是Link--visited--hover--active。对于:hover在IE6下只有a元素支持，:active只有IE7-6不支持，:focus在IE6-7下不被支持.</b>
<h4><span style=\"color: #ff6600;\">二、UI元素状态伪类(IE6-8不支持\":checked\",\":enabled\",\":disabled\"这三种选择器。)</span></h4>
我们把\":enabled\",\":disabled\",\":checked\"伪类称为UI元素状态伪类，这些主要是针对于HTML中的Form元素操作，最常见的比如我们\"type=\"text\"有enable和disabled两种状态，前者为可写状态后者为不可状态；另外\"type=\"radio\"和\"type=\"checkbox\"\"有\"checked\"和\"unchecked\"两种状态。来看两个实例，比如说你想将\"disabled\"的文本框与别的文本框区别出来，你就可以这样应用
<pre class=\"lang:default decode:true\">input[type=\"text\"]:disabled {border:1px solid #999;background-color: #fefefe;}</pre>
这样一来就把页面中禁用的文本框应用了一个不同的样式。那么对于其他几个用法是一样的，这里就不在讲述。<b>IE6-8不支持\":checked\",\":enabled\",\":disabled\"这三种选择器。</b>
<h4><span style=\"color: #ff6600;\">三、CSS3的:nth选择器(IE6不支持:first-child选择器)</span></h4>
这节内容才是关键，也是CSS3选择器最新部分，有人也称这种选择器为CSS3结构类，下面我们通过实际的应用来具体了解他们的使用和区别，首先列出他具有的选择方法：
<strong>1、:fist-child</strong>选择某个元素的第一个子元素；
<strong><strong>2、</strong>:last-child</strong>选择某个元素的最后一个子元素；
<strong><strong>3、</strong>:nth-child()</strong>选择某个元素的一个或多个特定的子元素；
<strong>4、:nth-last-child()</strong>选择某个元素的一个或多个特定的子元素，从这个元素的最后一个子元素开始算；
<strong>5、:nth-of-type()</strong>选择指定的元素；
<strong>6、:nth-last-of-type()</strong>选择指定的元素，从元素的最后一个开始计算；
<strong>7、:first-of-type</strong>选择一个上级元素下的第一个同类子元素；
<strong>8、:last-of-type</strong>选择一个上级元素的最后一个同类子元素；
<strong>9、:only-child</strong>选择的元素是它的父元素的唯一一个了元素；
<strong>10、:only-of-type</strong>选择一个元素是它的上级元素的唯一一个相同类型的子元素；
<strong>11、:empty</strong>选择的元素里面没有任何内容。
<h5>1、:first-child</h5>
:first-child是用来选择某个元素的第一个子元素，比如我们这里的这个demo，你想让列表中的\"1\"具有与从不同的样式，我们就可以使用:first-child来实现：
<pre class=\"lang:default decode:true\">.demo li:first-child {background: green; border: 1px dotted blue;}</pre>
<h5>2、:last-child</h5>
last-child选择器与:first-child选择器的作用类似，不同的是\":last-child\"选择是的元素的最后一个子元素。比如说，我们需要单独给列表最后一项一个不同的样式，我们就可以使用这个选择器，如：
<pre class=\"lang:default decode:true\">.demo li:last-child {background: green; border: 2px dotted blue;}</pre>
<strong> 3、:nth-child()(IE6-8和FF3-浏览器不支持\":nth-child\"选择器)</strong>

:nth-child()可以选择某个的一个或多个特定的子元素，你可以按这种方式进行选择：
<pre class=\"lang:default decode:true\">:nth-child(length);/*参数是具体数字*/
:nth-child(n);/*参数是n,n从0开始计算*/
:nth-child(n*length)/*n的倍数选择，n从0开始算*/
:nth-child(n+length);/*选择大于length后面的元素*/
:nth-child(-n+length)/*选择小于length前面的元素*/
:nth-child(n*length+1);/*表示隔几选一*/</pre>
//上面length为整数

<strong>a、:nth-child(3),</strong>选择某元素下的第三个子元素，（这里的3可以是你自己需要的数字），比如说，我需要选择列表中的第三个li元素，那么我们可以直接这样使用：
<pre class=\"lang:default decode:true\">.demo li:nth-child(3) {background: lime;}</pre>
<strong>这种不式不能引用负值，也就是说li:nth-child(-3)是不正确的使用方法。</strong>

<strong>b、:nth-child(n)，</strong>其中n是一个简单的表达式，那么\"n\"取值是从“0”开始计算的，到什么时候结束我也不知道，如果你在实际应用中直接这样使用的话，将会选中所有子元素，比如说，在我们的demo中，你在li中使用\":nth-child(n)\",那么将选中所有的\"li\",如：
<pre class=\"lang:default decode:true\">.demo li:nth-child(n) {background: lime;}等于.demo li {background: lime;}</pre>
我们来看一下其计算的过程：
<pre class=\"lang:default decode:true\">n=0 －－》 没有选择元素 
n=1 －－》 选择第一个li,
n=2 －－》 选择第二个li,后在的依此类推，这样下来就选中了所有的li</pre>
<b>请注意了，这里的“n”只能是\"n\"，不能使用其他字母代替，不然会没有任何效果的。</b>

<strong><strong>c、</strong>:nth-child(2n),</strong>这中方式是前一种的变身，我们可以选择n的2倍数，当然其中“2”可以换成你自己需要的数字，如：
<pre class=\"lang:default decode:true\">.demo li:nth-child(2n) {background: lime;}等于.demo li:nth-child(even) {background: lime;}</pre>
我们来看一下其计算的过程：
<pre class=\"lang:default decode:true\">n=0 －－》 2n=0 －－》 没有选中任何元素
n=1 －－》 2n=2 －－》 选择了第二个li 
n=2 －－》 2n＝4 －－》 选择了第四个li，后面的依此类推</pre>
<b>注:“:nth-child(2n)”也等于\":nth-child(even)\"效果</b>

<strong>d、:nth-child(2n-1)</strong>,这个选择器是在\":nth-child(2n)\"基础上演变过来的，上面说了人是选择偶数，那么我们在他的基础上减去“1”就变成奇数选择，如：
<pre class=\"lang:default decode:true\">.demo li:nth-child(2n-1) {background: lime;}</pre>
我们来看一下其计算的过程：
<pre class=\"lang:default decode:true\">n=0 －－》 2n-1=-1 －－》 也没有选中任何元素，
n=1 －－》 2n-1=1 －－》 选择第一个li
n=2 －－》 2n-1=3 －－》 选择第三个li,后面的依此类推</pre>
<strong>e、:nth-child(n+5)</strong>这个选择器是选择从第五个元素开始选择，这里的数字你可以自己定义，如：
<pre class=\"lang:default decode:true\">.demo li:nth-child(n+5) {background: lime;}</pre>
我们来看一下其计算的过程：
<pre class=\"lang:default decode:true\">n=0 －－》 n+5=5 －－》 选中第5个li
n=1 －－》 n+5=6 －－》 选择第6个li，后面的就不列出来了，原理一样</pre>
<strong>f、:nth-child(-n+5)</strong>这种选择器刚好和上面的选择器相反，这个是选择第5个前面的，如：

我们来看一下其计算的过程：
<pre class=\"lang:default decode:true\">n=0 －－》 -n+5=5 －－》 选择了第5个li
n=1 －－》 -n+5=4 －－》 选择了第4个li
n=2 －－》 -n+5=3 －－》 选择了第3个li
n=3 －－》 -n+5=2 －－》 选择了第2个li
n=4 －－》 -n+5=1 －－》 选择了第1个li
n=5 －－》 -n+5=0 －－》 没有选择任何元素</pre>
<strong>g、:nth-child(4n+1)</strong>这种方法是实现隔几选一的效果，比如我们这里是隔三选一，如果你把\"4\"换成别的数字那就是另外的一种隔法了，比如这个实例
<pre class=\"lang:default decode:true\">.demo li:nth-child(4n+1) {background: lime;}</pre>
我们来看一下其计算的过程：
<pre class=\"lang:default decode:true\">n=0 －－》4n+1=1 －－》选择了第一个li
n=1 －－》4n+1=5 －－》选择了第五个li
n=2 －－》4n+1=9 －－》选择了第九个li</pre>
<h5>4、:nth-last-child()</h5>
\":nth-last-child()\"选择器和前面的\":nth-child()\"很相似，只是这里多了一个last，所以他起的作用就和前面的\":nth-child\"不一样了，他只要是从最后一个元素开始算，来选择特定元素。我们来看几个实例：
<pre class=\"lang:default decode:true\">.demo li:nth-last-child(4) {background: lime;}</pre>
<span style=\"color: #99cc00;\">上面代码</span>表示选择倒数第四个列表项

<strong>a、:nth-last-child(2n),</strong>这个表示的是从元素后面计算，选择的是偶数个数，从而反过来说就是选择元素的奇数，和前面的\":nth-child(2n+1)\",\":nth-child(2n-1)\",\":nth-child(odd)\"所起的作用是一样的。
<pre class=\"lang:default decode:true\">.demo li:nth-last-child(2n) {background: lime;}
.demo li:nth-last-child(even) {background: lime;}
等于
.demo li:nth-child(2n+1) {background: lime;}
.demo li:nth-child(2n-1) {background: lime;}
.demo li:nth-child(odd) {background: lime;}</pre>
<strong>b、:nth-last-child(2n-1)</strong>这个选择器刚好跟上面的相反，从后面计算选择的是奇数，而从前面计算选择的就是偶数位了，这个前面的\":nth-child(2n)\"之类是相同的效果
<pre class=\"lang:default decode:true\">.demo li:nth-last-child(2n+1) {background: lime;}
.demo li:nth-last-child(2n-1) {background: lime;}
.demo li:nth-last-child(odd) {background: lime;}
等于：
.demo li:nth-child(2n) {background: lime;}
.demo li:nth-child(even) {background: lime;}</pre>
看了这几个实例，大家都知道\":nth-last-child()\"和\"nth-child()\"使用方法是一样的，只不过他们的<strong>区别是“:nth-child()”是从元素的第一个开始计算，而“:nth-last-child()”是从元素的最后一个开始计算，他们的计算方法都是一样的。同样在IE6-8和FF3.0-浏览器不支持“:nth-last-child()”选择器。</strong>
<h5>5、:nth-of-type</h5>
:nth-of-type类似于:nth-child，不同的是他只计算选择器中指定的那个元素,其实我们前面的实例都是指定了具体的元素，这个选择器主要对用来定位元素中包含了好多不同类型的元素是很有用处，比如说，我们div.demo下有好多p元素，li元素，img元素等，但我只需要选择p元素，并让他每隔一个p元素就有不同的样式，那我们就可以简单的写成：
<pre class=\"lang:default decode:true\">.demo p:nth-of-type(even) {background-color: lime;}</pre>
<b>其实这种使用和:nth-child使用是一样的，也可以使用:nth-child的那些表达式和使用方法，唯一不同的是这种指定了元素的类型而以。同样在IE6-8和FF3.0-浏览器不支持这种选择器</b>
<h5>6、:nth-last-of-type</h5>
这个选择器不用说大家都能想得到了，他和前面的:nth-last-child一样使用，只是他指一了元素的类型而以。

<b>同样在IE6-8和FF3.0-浏览器不支持这种选择器</b>
<h5>7、:first-of-type和:last-of-type</h5>
:first-of-type和:last-of-type这两个选择器就类似于:first-child和:last-child;不同之处就是指定了元素的类型。

<b>:nth-of-type,:nth-last-of-type;:first-of-type和:last-of-type实际意义并不是很大，我们前面讲的:nth-child之类选择器就能达到这此功能，不过大家要是感兴趣还是可以了解一下，个人认为实用价值并不是很大。此类说法仅供参考。</b>
<h5>8、:only-child和:only-of-type</h5>
<strong>a、\":only-child\"</strong>表示的是一个元素是它的父元素的唯一一个子元素。
<pre class=\"lang:default decode:true\">.demo .post p {background: lime;}</pre>
如果我需要在div.post只有一个p元素的时候，改变这个p的样式，那么我们现在就可以使用:only-child
<pre class=\"lang:default decode:true\">.demo .post p {background: lime;} 
.demo .post p:only-child {background: red;}</pre>
<strong>b、:only-of-type</strong>是表示一个元素他有很多个子元素，而其中只有一个子元素是唯一的，那么我们使用这种选择方法就可以选择中这个唯一的子元素，比如说
<pre class=\"lang:default decode:true\">p:only-of-type{background-color:red;}</pre>
<b>IE6-8浏览器不支持:only-child选择器；IE6-8和FF3.0-浏览器不支持:only-of-type选择器。</b>
<h5>9、:empty</h5>
:empty是用来选择没有任何内容的元素，这里没有内容指的是一点内容都没有，哪怕是一个空格，比如说，你有三个段落，其中一个段落什么都没有，完全是空的，你想这个p不显示，那你就可这样来写：
<pre class=\"lang:default decode:true\">p:empty {display: none;}</pre>
<strong>IE6-8浏览器不支持:empty选择器</strong>
<h4><span style=\"color: #ff6600;\">四、否定选择器（:not）</span></h4>
否定选择器和jq中的:not选择器一模一样，就拿form中的元素来说明这个选择器的用法，比如你想对form中所有input加边框，但又不想submit也起变化，此时就可以使用:not为实现
<pre class=\"lang:default decode:true\">input:not([type=\"submit\"]) {border: 1px solid red;}</pre>
<h4><strong>否定选择器 :not()，可以让你定位不匹配该选择器的元素。IE6-8浏览器不支持:not()选择器</strong></h4>
<h4><span style=\"color: #ff6600;\">五、伪元素(E::F)</span></h4>
CSS中的伪元素大家以前看过：:first-line,:first-letter,:before,:after;那么在CSS3中，他对伪元素进行了一定的调整，在以前的基础上增加了一个“：”也就是现在变成了“::first-letter,::first-line,::before,::after”另外他还增加了一个“::selection”,两个“：：”和一个“：”<strong>css3中主要用来区分伪类和伪元素，到目前来说，这两种方式都是被接受的，也就是说不管使用哪种写法所起的作用都是一样的，只是一个书写格式不同而以。</strong>

<span style=\"color: #99cc00;\">::first-line选择元素的第一行</span>，比如说改变每个段落的第一行文本的样式，我们就可以使用这个
<pre class=\"lang:default decode:true\">p::first-line {font-weight:bold;}</pre>
<span style=\"color: #99cc00;\">::first-letter选择文本块的第一个字母</span>，除非在同一行里面包含一些其它元素，不过这个主要运用于段落排版上多，比如说首字下沉，
<pre class=\"lang:default decode:true\">p::first-letter {font-size: 56px;float:left;margin-right:3px;}</pre>
<span style=\"color: #99cc00;\">::before和::after这两个主要用来给元素的前面或后面插入内容</span>，这两个常用\"content\"配合使用，见过最多的就是清除浮动，
<pre class=\"lang:default decode:true\">.clearfix:before,.clearfix:after {content \".\";display: block;height: 0;visibility: hidden;}
.clearfix:after {clear: both;}
.clearfix {zoom: 1;}</pre>
<span style=\"color: #99cc00;\">::selection用来改变浏览网页选中文的默认效果</span>

<strong> 文章原始出处：<a href=\"http://www.w3cplus.com/css3/pseudo-class-selector\" target=\"_blank\">http://www.w3cplus.com/css3/pseudo-class-selector</a></strong>",
          "wp:post_id": "716",
          "wp:post_date": "2013-03-04 11:39:38",
          "wp:post_date_gmt": "2013-03-04 03:39:38",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "css3%e9%80%89%e6%8b%a9%e5%99%a8c%e4%b9%8b-%e4%bc%aa%e7%b1%bb%e9%80%89%e6%8b%a9%e5%99%a8",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "css3",
            "#cdata-section": "CSS3"
          }
        },
        {
          "title": "CSS3选择器D之—选择器的优化",
          "link": "http://www.pernav.com/css3%e9%80%89%e6%8b%a9%e5%99%a8d%e4%b9%8b-%e9%80%89%e6%8b%a9%e5%99%a8%e7%9a%84%e4%bc%98%e5%8c%96/",
          "pubDate": "Mon, 04 Mar 2013 04:00:28 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=724"
          },
          "content:encoded": "首先我们需要清楚，浏览器是如何读取选择器，以识别样式，并将相应的样式附于对应的HTML元素，达到美化页面的效果。Chris Coyier曾在《Efficiently Rendering CSS》一文中说过“<b>浏览器读取你的选择器，遵循的原则是从选择器的右边到左边读取。换句话说，浏览器读取选择器的顺序是由右到左进行。</b>”

<b>综合下面的顺序，我们清楚的知道，id和类名用于关键选择器上效率是最高的，而CSS3的仿伪类和属性选择器，虽然使用方便，但其效率却是最低的。</b>
<ul>
	<li>id选择器（#myid）</li>
	<li>类选择器（.myclassname）</li>
	<li>标签选择器（div,h1,p）</li>
	<li>相邻选择器（h1+p）</li>
	<li>子选择器（ul &gt; li）</li>
	<li>后代选择器（li a）</li>
	<li>通配符选择器（*）</li>
	<li>属性选择器（a[rel=\"external\"]）</li>
	<li>伪类选择器（a:hover,li:nth-child）</li>
</ul>
<h4><b>来自Mozilla的几点建议:David在《Use efficient CSS selectors》中介绍了几种书写高效率的CSS选择器的方法，下面我将他们移到这里来让大家参考：</b></h4>
<ul>
	<li>避免普遍规则</li>
	<li>不要在ID选择器前加标签名或类名</li>
	<li>不要在类名选择器前加标签名</li>
	<li>尽可能使用具体的类别</li>
	<li>避免使用后代选择器</li>
	<li>标签分类规则中不应该包含一个子选择器</li>
	<li>子选择器的问题</li>
	<li>借助相关继承关系</li>
	<li>使用范围内的样式表</li>
</ul>
<b> 文章原始出处：<a href=\"http://www.w3cplus.com/css/css-selector-performance\">http://www.w3cplus.com/css/css-selector-performance</a></b>",
          "wp:post_id": "724",
          "wp:post_date": "2013-03-04 12:00:28",
          "wp:post_date_gmt": "2013-03-04 04:00:28",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "css3%e9%80%89%e6%8b%a9%e5%99%a8d%e4%b9%8b-%e9%80%89%e6%8b%a9%e5%99%a8%e7%9a%84%e4%bc%98%e5%8c%96",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "css3",
            "#cdata-section": "CSS3"
          }
        },
        {
          "title": "CSS3属性:Gradient渐变",
          "link": "http://www.pernav.com/css3%e5%b1%9e%e6%80%a7gradient%e6%b8%90%e5%8f%98/",
          "pubDate": "Wed, 06 Mar 2013 02:34:00 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=726"
          },
          "content:encoded": "CSS3 Gradient分为<b>linear-gradient(线性渐变)</b>和<b>radial-gradient(径向渐变)</b>为了更好的应用CSS3 Gradient,我们需要先了解一下目前的几种现代浏览器的内核，主流内容主要有Mozilla（熟悉的有Firefox，Flock等浏览器）、WebKit（熟悉的有Safari、Chrome等浏览器）、Opera（Opera浏览器）、Trident（讨厌的IE浏览器）.
<h2>A、<b>linear-gradient(线性渐变)</b></h2>
<h4><span style=\"color: #ff6600;\">一、线性渐变在Mozilla下的应用</span></h4>
<pre class=\"lang:default decode:true\">-moz-linear-gradient( [&lt;point&gt; || &lt;angle&gt;,]? &lt;stop&gt;, &lt;stop&gt; [, &lt;stop&gt;]* )</pre>
<span style=\"color: #99cc00;\">参数：</span>其共有三个参数，第一个参数表示线性渐变的方向，top是从上到下、left是从左到右，如果定义成left top，那就是从左上角到右下角。第二个和第三个参数分别是起点颜色和终点颜色。你还可以在它们之间插入更多的参数，表示多种颜色的渐变。
<pre class=\"lang:default decode:true\">.example1 {background: -moz-linear-gradient( top,#ccc,#000);}</pre>
<h4><span style=\"color: #ff6600;\">二、线性渐变在Webkit下的应用</span></h4>
<pre class=\"lang:default decode:true\">-webkit-linear-gradient( [&lt;point&gt; || &lt;angle&gt;,]? &lt;stop&gt;, &lt;stop&gt; [, &lt;stop&gt;]* )//最新发布书写语法</pre>
<span style=\"color: #99cc00;\">参数：</span>其共有三个参数，第一个参数表示线性渐变的方向，top是从上到下、left是从左到右，如果定义成left top，那就是从左上角到右下角。第二个和第三个参数分别是起点颜色和终点颜色。你还可以在它们之间插入更多的参数，表示多种颜色的渐变。
<pre class=\"lang:default decode:true\">.example1{background:-webkit-linear-gradient(top,#ccc,#000);}</pre>
<pre class=\"lang:default decode:true\">-webkit-gradient(&lt;type&gt;, &lt;point&gt; [, &lt;radius&gt;]?, &lt;point&gt; [, &lt;radius&gt;]? [, &lt;stop&gt;]*) //老式语法书写规则</pre>
<span style=\"color: #99cc00;\">参数：</span>-webkit-gradient是webkit引擎对渐变的实现参数，一共有五个。第一个参数表示渐变类型（type），可以是linear（线性渐变）或者radial（径向渐变）。第二个参数和第三个参数，都是一对值，分别表示渐变起点和终点。这对值可以用坐标形式表示，也可以用关键值表示，比如 left top（左上角）和left bottom（左下角）。第四个和第五个参数，分别是两个color-stop函数。color-stop函数接受两个参数，第一个表示渐变的位置，0为起点，0.5为中点，1为结束点；第二个表示该点的颜色。
<pre class=\"lang:default decode:true\">.example1{background: -webkit-gradient(linear,center top,center bottom,from(#ccc), to(#000));}</pre>
<h4><span style=\"color: #ff9900;\">三、线性渐变在Opera下的应用</span></h4>
<pre class=\"lang:default decode:true  crayon-selected\">-o-linear-gradient([&lt;point&gt; || &lt;angle&gt;,]? &lt;stop&gt;, &lt;stop&gt; [, &lt;stop&gt;]); /* Opera 11.10+ */</pre>
<span style=\"color: #99cc00;\">参数：</span>-o-linear-gradient有三个参数。第一个参数表示线性渐变的方向，top是从上到下、left是从左到右，如果定义成left top，那就是从左上角到右下角。第二个和第三个参数分别是起点颜色和终点颜色。你还可以在它们之间插入更多的参数，表示多种颜色的渐变。（注：Opera支持的版本有限，本例测试都是在Opera11.1版本下，后面不在提示）
<pre class=\"lang:default decode:true\">.example1{background: -o-linear-gradient(top,#ccc, #000);}</pre>
<h4><span style=\"color: #ff9900;\">四、线性渐变在Trident (IE)下的应用</span></h4>
<pre class=\"lang:default decode:true\">filter: progid:DXImageTransform.Microsoft.gradient(GradientType=0, startColorstr=#1471da, endColorstr=#1C85FB);/*IE9*/
-ms-filter: \"progid:DXImageTransform.Microsoft.gradient (GradientType=0, startColorstr=#1471da, endColorstr=#1C85FB)\";/*IE8+*/</pre>
IE依靠滤镜实现渐变。startColorstr表示起点的颜色，endColorstr表示终点颜色。GradientType表示渐变类型，0为缺省值，表示垂直渐变，1表示水平渐变。<b>起始点（Starting Point）的工作方式类似于background position。</b>您可以设置水平和垂直位置为百分比，或以像素为单位，或在水平方向上可以使用left/center/right，在垂直方向上可以使用top/center/bottom。位置起始于左上角。如果你不指定水平或垂直位置，它将默认为center。其工作方式主要包含：Top → Bottom、Left → Right、bottom → top、right → left等，接着我们主要一种一种来看其实现的效果：

<strong>1、开始于center（水平方向）和top（垂直方向）也就是Top → Bottom：</strong>
<pre class=\"lang:default decode:true\">/* Firefox 3.6+ */ 
background: -moz-linear-gradient(top, #ace, #f96); 
/* Safari 4-5, Chrome 1-9 */ 
/* -webkit-gradient(, [, ]?, [, ]? [, ]*) */
background: -webkit-gradient(linear,top,from(#ace),to(#f96));
/* Safari 5.1+, Chrome 10+ */
background: -webkit-linear-gradient(top, #ace, #f96);
/* Opera 11.10+ */
background: -o-linear-gradient(top, #ace, #f96);</pre>
<strong>2、始于left（水平方向）和center（垂直方向）也是就Left → Right：</strong>
<pre class=\"lang:default decode:true\">/* Firefox 3.6+ */
background: -moz-linear-gradient(left, #ace, #f96);
/* Safari 5.1+, Chrome 10+ */
background: -webkit-linear-gradient(left, #ace, #f96);
/* Opera 11.10+ */
background: -o-linear-gradient(left, #ace, #f96);</pre>
<strong>3、起始于left（水平方向）和top（垂直方向）:</strong>
<pre class=\"lang:default decode:true\">background: -moz-linear-gradient(left top, #ace, #f96);
background: -webkit-linear-gradient(left top, #ace, #f96);
background: -o-linear-gradient(left top, #ace, #f96);</pre>
<strong>4、Linear Gradient (with Even Stops):</strong>
<pre class=\"lang:default decode:true\">/* Firefox 3.6+ */ 
background: -moz-linear-gradient(left, #ace, #f96, #ace, #f96, #ace); 
/* Safari 4-5, Chrome 1-9 */ 
background: -webkit-gradient(linear, left top, right top, from(#ace), color-stop(0.25, #f96), color-stop(0.5, #ace), color-stop(0.75, #f96), to(#ace)); 
/* Safari 5.1+, Chrome 10+ */ 
background: -webkit-linear-gradient(left, #ace, #f96, #ace, #f96, #ace);
/* Opera 11.10+ */ 
background: -o-linear-gradient(left, #ace, #f96, #ace, #f96, #ace);</pre>
<strong>5、with Specified Arbitrary Stops：</strong>
<pre class=\"lang:default decode:true\">/* Firefox 3.6+ */ 
background: -moz-linear-gradient(left, #ace, #f96 5%, #ace, #f96 95%, #ace); 
/* Safari 4-5, Chrome 1-9 */ 
background: -webkit-gradient(linear, left top, right top, from(#ace), color-stop(0.05, #f96), color-stop(0.5, #ace), color-stop(0.95, #f96), to(#ace)); 
/* Safari 5.1+, Chrome 10+ */ 
background: -webkit-linear-gradient(left, #ace, #f96 5%, #ace, #f96 95%, #ace); 
/* Opera 11.10+ */ 
background: -o-linear-gradient(left, #ace, #f96 5%, #ace, #f96 95%, #ace);</pre>
<strong>6、角度(Angle)：</strong>

<span style=\"color: #ff6600;\"><strong>1.没有角度的示例代码：</strong></span>
<pre class=\"lang:default decode:true\">background: -moz-linear-gradient(left, #ace, #f96);
background: -webkit-linear-gradient(left,#ace,#f96);
background: -o-linear-gradient(left, #ace, #f96);</pre>
<span style=\"color: #ff6600;\"><strong>2.加上30度的角度代码</strong>：</span>
<pre class=\"lang:default decode:true\">background: -moz-linear-gradient(left 30deg, #ace, #f96);
background: -webkit-gradient(linear, 0 0, 100% 100%, from(#ace),to(#f96));
background: -o-linear-gradient(30deg, #ace, #f96);</pre>
<strong><span style=\"color: #ff6600;\">3.多重颜色渐变木有角度</span></strong>
<pre class=\"lang:default decode:true\">background: -moz-linear-gradient(left, red, #f96, yellow, green, #ace);
background: -webkit-linear-gradient(left,red,#f96,yellow,green,#ace);
background: -o-linear-gradient(left, red, #f96, yellow, green, #ace);</pre>
<h4>7、渐变上应用透明─透明度(Transparency)：</h4>
<strong>透明度还支持透明渐变，</strong>这对于制作一些特殊的效果是相当有用的，例如，当堆叠多个背景时。这里是两个背景的结合：一张图片，一个白色到透明的线性渐变。
<pre class=\"lang:default decode:true\">background: -moz-linear-gradient(right, rgba(255,255,255,0), rgba(255,255,255,1)),url(http://demos.hacks.mozilla.org/openweb/resources/images/patterns/flowers-pattern.jpg);
background: -webkit-linear-gradient(right, rgba(255,255,255,0), rgba(255,255,255,1)),url(http://demos.hacks.mozilla.org/openweb/resources/images/patterns/flowers-pattern.jpg);
background: -o-linear-gradient(right, rgba(255,255,255,0), rgba(255,255,255,1)),url(http://demos.hacks.mozilla.org/openweb/resources/images/patterns/flowers-pattern.jpg);</pre>
<h2>B、 CSS3的径向渐变</h2>
<h4>CSS3的径向渐变和其线性渐变是很相似的。我们首先来看其语法：</h4>
<pre class=\"lang:default decode:true\">-moz-radial-gradient([&lt;bg-position&gt; || &lt;angle&gt;,]? [&lt;shape&gt; || &lt;size&gt;,]? &lt;color-stop&gt;, &lt;color-stop&gt;[, &lt;color-stop&gt;]*);
-webkit-radial-gradient([&lt;bg-position&gt; || &lt;angle&gt;,]? [&lt;shape&gt; || &lt;size&gt;,]? &lt;color-stop&gt;, &lt;color-stop&gt;[, &lt;color-stop&gt;]*);</pre>
<b>（需要特别说明一点的是，径向渐变到目前还不支持Opera的内核浏览器，所以我们径向渐变都是在firefox,safari,chrome底下进行测试完成的。）</b>除了您已经在线性渐变中看到的起始位置，方向，和颜色，<b>径向梯度允许你指定渐变的形状（圆形或椭圆形）和大小（最近端，最近角，最远端，最远角，包含或覆盖 (closest-side, closest-corner, farthest-side, farthest-corner, contain or cover)）。</b> 颜色起止(Color stops)：就像用线性渐变，你应该沿着渐变线定义渐变的起止颜色。

<strong><span style=\"color: #ff6600;\">示例一：</span></strong>
<pre class=\"lang:default decode:true\">background: -moz-radial-gradient(#ace, #f96, #1E90FF);
background: -webkit-radial-gradient(#ace, #f96, #1E90FF);</pre>
<span style=\"color: #ff6600;\"><strong>示例二：</strong></span>
<pre class=\"lang:default decode:true\">background: -moz-radial-gradient(#ace 5%, #f96 25%, #1E90FF 50%);
background: -webkit-radial-gradient(#ace 5%, #f96 25%, #1E90FF 50%);</pre>
<strong><span style=\"color: #ff6600;\">示例三</span></strong>
<pre class=\"lang:default decode:true\">background: -moz-radial-gradient(bottom left, circle, #ace, #f96, #1E90FF);
background: -webkit-radial-gradient(bottom left, circle, #ace, #f96, #1E90FF);</pre>
<strong><span style=\"color: #ff6600;\">示例四</span></strong>
<pre class=\"lang:default decode:true\">background: -moz-radial-gradient(bottom left, ellipse, #ace, #f96, #1E90FF);
background: -webkit-radial-gradient(bottom left, ellipse, #ace, #f96, #1E90FF);</pre>
<strong><span style=\"color: #ff6600;\">示例五</span></strong>
<pre class=\"lang:default decode:true\">background: -moz-radial-gradient(ellipse closest-side, #ace, #f96 10%, #1E90FF 50%, #f96);
background: -webkit-radial-gradient(ellipse closest-side, #ace, #f96 10%, #1E90FF 50%, #f96);</pre>
<strong><span style=\"color: #ff6600;\">示例六</span></strong>
<pre class=\"lang:default decode:true\">background: -moz-radial-gradient(ellipse farthest-corner, #ace, #f96 10%, #1E90FF 50%, #f96);
background: -webkit-radial-gradient(ellipse farthest-corner, #ace, #f96 10%, #1E90FF 50%, #f96);</pre>
<strong><span style=\"color: #ff6600;\">示例七：</span></strong>
<pre class=\"lang:default decode:true\">background: -moz-radial-gradient(circle closest-side, #ace, #f96 10%, #1E90FF 50%, #f96);
background: -webkit-radial-gradient(circle closest-side, #ace, #f96 10%, #1E90FF 50%, #f96);</pre>
<strong><span style=\"color: #ff6600;\">示例八：</span></strong>
<pre class=\"lang:default decode:true\">background: -moz-radial-gradient(circle farthest-side, #ace, #f96 10%, #1E90FF 50%, #f96);&lt;br /&gt;
background: -webkit-radial-gradient(circle farthest-side, #ace, #f96 10%, #1E90FF 50%, #f96);&lt;br /&gt;</pre>
<span style=\"color: #ff6600;\"><strong>示例九：</strong></span>
<pre class=\"lang:default decode:true\">background: -moz-radial-gradient(#ace, #f96, #1E90FF);
background: -webkit-radial-gradient(#ace, #f96, #1E90FF);</pre>
<strong><span style=\"color: #ff6600;\">示例十：</span></strong>
<pre class=\"lang:default decode:true\">background: -moz-radial-gradient(contain, #ace, #f96, #1E90FF);
background: -webkit-radial-gradient(contain, #ace, #f96, #1E90FF);</pre>
<b>文章原始出处：<a href=\"http://www.w3cplus.com/content/css3-gradient\" target=\"_blank\">http://www.w3cplus.com/content/css3-gradient</a></b>",
          "wp:post_id": "726",
          "wp:post_date": "2013-03-06 10:34:00",
          "wp:post_date_gmt": "2013-03-06 02:34:00",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "css3%e5%b1%9e%e6%80%a7gradient%e6%b8%90%e5%8f%98",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "css3",
            "#cdata-section": "CSS3"
          }
        },
        {
          "title": "CSS3属性:RGBA透明",
          "link": "http://www.pernav.com/css3%e5%b1%9e%e6%80%a7rgba%e9%80%8f%e6%98%8e/",
          "pubDate": "Wed, 06 Mar 2013 03:17:33 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=730"
          },
          "content:encoded": "RGB对于大家来说一点不陌生，他就是红色R+绿色G+蓝色B，那现在我们所说的RGBA又是什么呢？说得简单一点就是在RGB的基础上加进了一个通道Alpha。从而形成了我们今天需要讨论的RGBA。
<h4><strong><span style=\"color: #ff6600;\">1、语法:</span></strong></h4>
R：红色值。正整数 | 百分数
G：绿色值。正整数 | 百分数
B：蓝色值。正整数 | 百分数
A：透明度。取值0~1之间
<h4><strong><span style=\"color: #ff6600;\">2、取值：</span></strong></h4>
<pre class=\"lang:default decode:true\">&lt;length&gt; ：Hue(色调)。 0(或360)表示红色，120表示绿色，240表示蓝色，当然可取其他数值来确定其它颜色；
&lt;percentage&gt; ：Saturation(饱和度)。 取值为0%到100%之间的值；
&lt;percentage&gt; ：Lightness(亮度)。 取值为0%到100%之间的值；
&lt;opacity&gt; ：alpha(透明度)。 取值在0到1之间；</pre>
<h4><span style=\"color: #ff6600;\"><b>3、说明:</b></span></h4>
RGB色彩模式（也翻译为“红绿蓝”，比较少用）是工业界的一种颜色标准，是通过对红(R)、绿(G)、蓝(B)三个颜色通道的变化以及它们相互之间的叠加来得到各式各样的颜色的，RGB即是代表红、绿、蓝三个通道的颜色，这个标准几乎包括了人类视力所能感知的所有颜色，是目前运用最广的颜色系统之一。

RGBA在RGB的基础上多了控制alpha透明度的参数。以上R、G、B三个参数，正整数值的取值范围为：0 - 255。百分数值的取值范围为：0.0% - 100.0%。超出范围的数值将被截至其最接近的取值极限。并非所有浏览器都支持使用百分数值。A参数，取值在0~1之间，不可为负值。

如果庞统说rgba是制作透明色（透明背景色、透明边框色、透明前景色等），大家不由会想起opacity 这个东西。他在我们CSS2中制作背景色通常用到，可是要用他来制作边框色或都说前景色的话，那他就只能在边上站着了，有心无力呀。
<h4><span style=\"color: #ff6600;\"><b>RGBA和opacity的对比实例</b></span></h4>
<span style=\"color: #ff6600;\"><b>Html Code</b></span>
<div class=\"example-opacity\">
<pre class=\"lang:default decode:true\">&lt;div class=\"example-opacity\"&gt;
	&lt;p&gt;Opacity效果&lt;/p&gt;
	&lt;ul&gt;
		&lt;li class=\"opacity opacity1\"&gt;100%&lt;/li&gt;
		&lt;li class=\"opacity opacity2\"&gt;80%&lt;/li&gt;
		&lt;li class=\"opacity opacity3\"&gt;60%&lt;/li&gt;
		&lt;li class=\"opacity opacity4\"&gt;40%&lt;/li&gt;
		&lt;li class=\"opacity opacity5\"&gt;20%&lt;/li&gt;
		&lt;li class=\"opacity opacity6\"&gt;0&lt;/li&gt;
	&lt;/ul&gt;
	&lt;p&gt;CSS3的RGBA效果&lt;/p&gt;
	&lt;ul&gt;
		&lt;li class=\"rgba rgba1\"&gt;1&lt;/li&gt;
		&lt;li class=\"rgba rgba2\"&gt;0.8&lt;/li&gt;
		&lt;li class=\"rgba rgba3\"&gt;0.6&lt;/li&gt;
		&lt;li class=\"rgba rgba4\"&gt;0.4&lt;/li&gt;
		&lt;li class=\"rgba rgba5\"&gt;0.2&lt;/li&gt;
		&lt;li class=\"rgba rgba6\"&gt;0&lt;/li&gt;
	&lt;/ul&gt;
&lt;/div&gt;</pre>
</div>
<span style=\"color: #ff6600;\"><b>Opacity样式</b></span>
<pre class=\"lang:default decode:true\">li.opacity{float:left;width: 50px;height: 50px;}
li.opacity1{background: rgb(255,255,0);opacity: 1;filter:alpha(opaity=100);}
li.opacity2{background: rgb(255,255,0);opacity: 0.8;filter:alpha(opaity=80);}
li.opacity3{background: rgb(255,255,0);opacity: 0.6;filter:alpha(opaity=60);}
li.opacity4{background: rgb(255,255,0);opacity: 0.4;filter:alpha(opaity=40);}
li.opacity5{background: rgb(255,255,0);opacity: 0.2;filter:alpha(opaity=20);}
li.opacity6{background: rgb(255,255,0);opacity: 0;filter:alpha(opaity=0);}</pre>
<b>RGBA样式</b>
<pre class=\"lang:default decode:true\">li.rgba{ float: left; width: 50px; height: 50px;}
li.rgba1{background: rgba(255,255,0,1);}
li.rgba2{background: rgba(255,255,0,0.8);}
li.rgba3{background: rgba(255,255,0,0.6);}
li.rgba4{background: rgba(255,255,0,0.4);}
li.rgba5{background: rgba(255,255,0,0.2);}
li.rgba6{background: rgba(255,255,0,0);}</pre>
效果中我们可以看出，他们相同之处就是背景色完全是一样的，但区别就是一直让大家觉得头痛的问题，那就是opacity后代元素会随着一起具有透明性，所以我们Opacity中的字随着透明值下降越来越看不清楚，而RGBA不具有这样的问题，但是其支持的浏览器中有一个占在大市场份额的IE不支持，这也就是让我们需要去做兼容，（听到兼容二字大家是不是特烦，我也是的）希望IE早点能实现。

<b>在CSS2中Opacity能实现透明，而且大多主流浏览器都支持，虽然IE下有点麻烦.IE解决方案：</b>
<pre class=\"lang:default decode:true\">/* IE5 - 7 */
filter: alpha(opacity=80);
/* IE 8 */
-ms-filter:\"progid:DXImageTransform.Microsoft.Alpha(Opacity=80)\";
/* Everyone else */
opacity: 0.8;</pre>
<b>RGBA比元素设置CSS的透明度更好，因为单独的颜色可以在不影响整个元素的透明度，他不会影响到元素其他的属性，比如说边框，字体同时也不会影响到其他元素的相关透明度。但是这里有一个问题是我们讨厌的IE（除IE9以外）都不支持CSS3的RGBA属性。</b>
<h4><span style=\"color: #ff6600;\"><b>4、RGBA不单可以应用在background上，我们还可以应用在只要设置了颜色的地方都可以使用，我在这里简单的说一下几种：</b></span></h4>
<span style=\"color: #ff6600;\"><b>第一种：前景色color</b></span>
<pre class=\"lang:default decode:true\">.norgba-color{color: rgb(255, 0, 0);}
.rgba-color{color: rgb(255, 0, 0);color: rgba(255, 0, 0,0.5);}</pre>
<span style=\"color: #ff6600;\"><b>第二种边框色border-color</b></span>
<pre class=\"lang:default decode:true\">.norgba-border-color {border:5px solid rgb(255,0,0);width: 200px;}
.rgba-border-color { border:5px solid rgb(255,0,0);border:5px solid rgba(255,0,0,0.5);width: 200px;}</pre>
<span style=\"color: #ff6600;\"><b>第三种：字体的阴影色text-shadow</b></span>
<pre class=\"lang:default decode:true\">.norgba-text-shadow {text-shadow : 0 2px 1px rgb(255,0,0);}
.rgba-text-shadow {text-shadow : 0 2px 1px rgb(255,0,0);text-shadow : 0 2px 1px rgba(255,0,0,0.3);}</pre>
<span style=\"color: #ff6600;\"><b>第四种：改变边框阴影色</b></span>
<pre class=\"lang:default decode:true\">.norgba-box-shadow {border: 5px solid green;width: 200px;-webkit-box-shadow: 0 2px 2px rgb(255,0,0);-moz-box-shadow: 0 2px 2px rgb(255,0,0);box-shadow: 0 2px 2px rgb(255,0,0);}
.rgba-box-shadow {border: 5px solid green;width: 200px;-webkit-box-shadow: 0 2px 2px rgba(255,0,0,0.6);-moz-box-shadow: 0 2px 2px rgba(255,0,0,0.6);box-shadow: 0 2px 2px rgba(255,0,0,0.6);}</pre>
<b>文章原始出处：<a href=\"http://www.w3cplus.com/content/css3-rgba\" target=\"_blank\">http://www.w3cplus.com/content/css3-rgba</a></b>",
          "wp:post_id": "730",
          "wp:post_date": "2013-03-06 11:17:33",
          "wp:post_date_gmt": "2013-03-06 03:17:33",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "css3%e5%b1%9e%e6%80%a7rgba%e9%80%8f%e6%98%8e",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "css3",
            "#cdata-section": "CSS3"
          }
        },
        {
          "title": "CSS3属性:Border-radius圆角",
          "link": "http://www.pernav.com/css3%e5%b1%9e%e6%80%a7border-radius%e5%9c%86%e8%a7%92/",
          "pubDate": "Wed, 06 Mar 2013 06:32:55 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=738"
          },
          "content:encoded": "CSS3中的border-radius出现后，让我们没有那么多的烦恼了，首先制作圆角图片的时间是省了，而且其还有多个优点：其一减少网站的维护的工作量，少了对图片的更新制作，代码的替换等等;其二、提高网站的性能，少了对图片进行http的请求，网页的载入速度将变快；其三增加视觉美观性。
<h4><span style=\"color: #ff6600;\"><b>1、语法：</b></span></h4>
<pre class=\"lang:default decode:true\">border-radius ： none | &lt;length&gt;{1,4} [/ &lt;length&gt;{1,4} ]</pre>
<h4><span style=\"color: #ff6600;\"><b>2、取值：</b></span></h4>
&lt;length&gt;： 由浮点数字和单位标识符组成的长度值。不可为负值。
<h4><span style=\"color: #ff6600;\"><b>3、说明：</b></span></h4>
border-radius是一种缩写方法。如果“/”前后的值都存在，那么“/”前面的值设置其水平半径，“/”后面值设置其垂直半径。如果没有“/”，则水平和垂直半径相等。另外其四个值是按照top-left、top-right、bottom-right、bottom-left的顺序来设置的其主要会有下面几种情形出现：
<pre class=\"lang:default decode:true\">1、border-radius: [ {1,4} ]; //这里只有一个值，那么top-left、top-right、bottom-right、bottom-left四个值相等
2、border-radius:[ {1,4} ] [ {1,4} ] ; //这里设置两个值，那么top-left等于bottom-right，并且取第一个值；top-right等于bottom-left，并且取第二个值
3、border-radius:[ {1,4} ] [ {1,4} ] [ {1,4} ];//如果有三个值，其中第一个值是设置top-left;而第二个值是top-right和bottom-left并且他们会相等,第三个值是设置bottom-right
4、border-radius:[ {1,4} ] [ {1,4} ] [ {1,4} ] [ {1,4} ];//如果有四个值，其中第一个值是设置top-left;而第二个值是top-right,第三个值bottom-right,第四个值是设置bottom-left</pre>
我们主要看了border-radius的缩写格式，其实border-radius和border属性一样，还可以把各个角单独拆分出来，也就是以下四种写法，这里我规纳一点，他们都是先Y轴在X轴，具体看下面：
<pre class=\"lang:default decode:true\">border-top-left-radius: //左上角
border-top-right-radius: //右上角
border-bottom-right-radius: //右下角
border-bottom-left-radius: //左下角</pre>
这里说一下，各角拆分出来取值方式：中第一个值是圆角水平半径，第二个值是垂直半径,如果第二个值省略，那么其等于第一个值，这时这个角就是一个四分之一的圆角，如果任意一个值为0，那么这个角就不是圆角。

border-radius只有在以下版本的浏览器：Firefox4.0+、Safari5.0+、Google Chrome 10.0+、Opera 10.5+、IE9+支持border-radius标准语法格式，对于老版的浏览器，border-radius需要根据不同的浏览器内核添加不同的前缀.

<span style=\"color: #ff6600;\"><b>1、Mozilla(Firefox, Flock等浏览器)</b></span>
<pre class=\"lang:default decode:true\">-moz-border-radius-topleft: //左上角
-moz-border-radius-topright: //右上角
-moz-border-radius-bottomright: //右下角
-moz-border-radius-bottomleft: //左下角
等价于：
-moz-border-radius: //简写</pre>
<span style=\"color: #ff6600;\"><b>2、WebKit (Safari, Chrome等浏览器)</b></span>
<pre class=\"lang:default decode:true\">-webkit-border-top-left-radius: //左上角
-webkit-border-top-right-radius: //右上角
-webkit-border-bottom-right-radius: //右下角
-webkit-border-bottom-left-radius: // 左下角
等价于：
-webkit-border-radius: //简写</pre>
<span style=\"color: #ff6600;\"><b>3、Opera浏览器：</b></span>
<pre class=\"lang:default decode:true\">border-top-left-radius: //左上角
border-top-right-radius: //右上角
border-bottom-right-radius: //右下角
border-bottom-left-radius: //左下角
等价于：
border-radius: //简写</pre>
<strong>IE&lt;9不支持border-radius;IE9下没有私有格式，都是用border-radius，其写法和Opera是一样的，这里就不在重复。</strong>
<h4><span style=\"color: #ff6600;\"><b>4、border-radius格式</b></span></h4>
<pre class=\"lang:default decode:true\">-moz-border-radius: none | {1,4} [/ {1,4} ]
-webkit-border-radius: none | {1,4} [/ {1,4} ]
border-radius: none | {1,4} [/ {1,4} ]
其拆分开来的格式相应需要加上-moz和-webkit，上面的代码其实就等价于下面的代码
-moz-border-radius-topleft: //左上角
-moz-border-radius-topright: //右上角
-moz-border-radius-bottomright: //右下角
-moz-border-radius-bottomleft: //左下角
-webkit-border-top-left-radius: //左上角
-webkit-border-top-right-radius: //右上角
-webkit-border-bottom-right-radius: //右下角
-webkit-border-bottom-left-radius: // 左下角
border-top-left-radius: //左上角
border-top-right-radius: //右上角
border-bottom-right-radius: //右下角
border-bottom-left-radius: //左下角</pre>
<h4><span style=\"color: #ff6600;\">5、<b>实例如下</b></span></h4>
<h5><span style=\"color: #ff6600;\"><b>A、水平和垂直半径相等情况下border-radius的应用</b></span></h5>
<b>1、border-radius:只有一个取值时，四个角具有相同的圆角设置</b>
<pre class=\"lang:default decode:true\">.demo { border-radius: 10px;}
等价于：
.demo{
border-top-left-radius: 10px;
border-top-right-radius: 10px;
border-bottom-right-radius: 10px;
border-bottom-left-radius: 10px;
}</pre>
<b>2、border-radius:设置两个值，此时top-left等于bottom-right并且他们取第一个值；top-right等于bottom-left并且他们取第二个值，也就是说元素 左上角和右下角相同，右上角和左下角相同</b>
<pre class=\"lang:default decode:true\">.demo {border-radius: 10px 20px;}
等价于：
.demo {
border-top-left-radius: 10px;
border-bottom-right-radius: 10px;
border-top-right-radius: 20px;
border-bottom-left-radius: 20px;
}</pre>
<b>3、border-radius:设置三个值，此时top-left取第一个值，top-right等于bottom-left并且他们取第二个值，bottom-right取第三个值</b>
<pre class=\"lang:default decode:true\">.demo{border-radius: 10px 20px 30px;}
等价于：
.demo{
border-top-left-radius: 10px;
border-top-right-radius: 20px;
border-bottom-left-radius: 20px;
border-bottom-right-radius: 30px;
}</pre>
<b>4、border-radius:设置四个值，此时top-left取第一个值，top-right取第二个值，bottom-right取第三个值.bottom-left取第四个值</b>
<pre class=\"lang:default decode:true\">.demo {border-radius:10px 20px 30px 40px;}
等价于：
.demo {
border-top-left-radius: 10px;
border-top-right-radius: 20px;
border-bottom-right-radius: 30px;
border-bottom-left-radius: 40px;
}</pre>
<h5><span style=\"color: #ff6600;\"><b>B、水平和垂直半径不一样情况下border-radius的应用</b></span></h5>
<strong>1、border-radius: 水平 / 垂直：只设置一个水平和一个垂直半径时，那么水平半径分别指定了元素个四个角的水平半径值，同样垂直半径指定了元素的垂直半径值，此时四个角具有相同的效果，因为他们具有相同的值.</strong>
<pre class=\"lang:default decode:true\">.demo {border-radius: 10px / 20px;}
等价于：
.demo {
border-top-left-radius: 10px 20px;
border-top-right-radius: 10px 20px;
border-bottom-right-radius: 10px 20px;
border-bottom-left-radius: 10px 20px;
}</pre>
<strong>2、border-radius:水平1 水平2 / 垂直1 垂直2：设置了两个水平值和两个垂直值，此时我们top-left和bottom-right具有相同的水平和垂直半径，也就是其中的水平1和垂直1；而top-right和bottom-left也具有相同的水平和垂直半径值，也就是水平2和垂直2，我们他拆分出来就是</strong>
<pre class=\"lang:default decode:true\">.demo {border-radius: 10px 20px / 20px 10px;}
等价于：
.demo {
border-top-left-radius: 10px 20px;
border-bottom-right-radius: 10px 20px;
border-top-right-radius: 20px 10px;
border-bottom-left-radius: 20px 10px;
}</pre>
<strong>3、border-radius:水平1 水平2 水平3/ 垂直1 垂直2：水平有三个取值，而 垂直只有两个取值</strong>
<pre class=\"lang:default decode:true\">.demo {border-radius: 10px 20px 30px / 50px 60px;}
等价于：
.demo {
border-top-left-radius: 10px 50px;
border-top-right-radius: 20px 60px;
border-bottom-left-radius: 20px 60px;
border-bottom-right-radius: 30px 50px;
}</pre>
<strong>4、border-radius:水平1 水平2 水平3 水平4/ 垂直1 垂直2 垂直3 垂直4;水平有三个取值，而 垂直只有两个取值</strong>
<pre class=\"lang:default decode:true\">.demo{border-radius: 10px 15px 20px 30px / 20px 30px 10px 15px;}
这种写法我们前面有提到过，“/”前是指圆角的水平半径，而“/”后是指圆角的垂直半径，他们两都遵循TRBL的顺序原则。为了能让大家更清楚理解，我们把上面代码换成如下：
.demo {
border-top-left-radius: 10px 20px;
border-top-right-radius: 15px 30px;
border-bottom-right-radius: 20px 10px;
border-bottom-left-radius: 30px 15px;}</pre>
<h5><span style=\"color: #ff6600;\"><b>C、border-radius的几种特殊点的应用</b></span></h5>
<b>一、对于border-radius还有一个内半径和外半径的区别，它主要是元素 边框值较大时，效果就很明显，当我们border-radius半径值小于或等于border的厚度时，我们边框内部就不具有圆角效果,例如下面的实例</b>
<pre class=\"lang:default decode:true\">.border-big {
border: 15px solid green;
border-radius: 15px;
}
.border-small {
border: 15px solid green;
border-radius: 25px;
}</pre>
为何当border-radius的半径小于元素边框的厚度时，内部没有圆角效果？我在这里说一下，<strong>因为我们的border-radius的内径值是等于外径值减去边框厚度值，当他们的值为负时，内径默认为0,最前面讲border-radius取值时就说过其值不能为负值。同时也说明border-radius的内外曲线的圆心并不一定是一致的。只有当边框厚度为0时，我们内外曲线的圆心才会在同一位置。</strong>

<b>二、如果角的两个相邻边有不同的宽度，那么这个角将会从宽的边平滑过度到窄的边。其中一条边甚至可以是0。相邻转角是由大向小转。</b>
<pre class=\"lang:default decode:true\">.demo {
border-width: 10px 5px 20px 3px;
border-radius: 30px;
}</pre>
<b>三、相邻两条边颜色和线条样式不同时，那么两条相邻边颜色和样式转变的中心点是在一个和两边宽度成正比的角上。比如，两条边宽度相同，这个点就是一个45°的角上，如果一条边是另外一条边的两倍，那么这个点就在一个30°的角上。界定这个转变的线就是连接在内外曲线上的两个点的直线。我们来看一个四边颜色不一样，宽度不一样的实例：</b>
<pre class=\"lang:default decode:true\">.demo {
border-color: red green blue orange;
border-width: 15px 30px 30px 80px;
border-radius: 50px;
}</pre>
<strong>文章原始出处:<a href=\"http://www.w3cplus.com/css3/border-radius\" target=\"_blank\">http://www.w3cplus.com/css3/border-radius</a></strong>",
          "wp:post_id": "738",
          "wp:post_date": "2013-03-06 14:32:55",
          "wp:post_date_gmt": "2013-03-06 06:32:55",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "css3%e5%b1%9e%e6%80%a7border-radius%e5%9c%86%e8%a7%92",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "css3",
            "#cdata-section": "CSS3"
          }
        },
        {
          "title": "CSS3属性:Text-shadow文字阴影",
          "link": "http://www.pernav.com/css3%e5%b1%9e%e6%80%a7text-shadow%e6%96%87%e5%ad%97%e9%98%b4%e5%bd%b1/",
          "pubDate": "Wed, 06 Mar 2013 07:39:01 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=744"
          },
          "content:encoded": "text-shadow还没有出现时，大家在网页设计中阴影一般都是用photoshop做成图片，现在有了css3可以直接使用text-shadow属性来指定阴影。这个属性可以有两个作用，产生阴影和模糊主体。这样在不使用图片时能给文字增加质感。
<h4><span style=\"color: #ff6600;\"><b>1、语法:</b></span></h4>
<pre class=\"lang:default decode:true\">text-shadow ： none | &lt;length&gt; none | [&lt;shadow&gt;, ] * &lt;shadow&gt; 或none | &lt;color&gt; [, &lt;color&gt; ]*
也就是：
text-shadow:[颜色(Color)  x轴(X Offset) y轴(Y Offset) 模糊半径(Blur)],[颜色(color) x轴(X Offset) y轴(Y Offset) 模糊半径(Blur)]...
或者
text-shadow:[x轴(X Offset) y轴(Y Offset)  模糊半径(Blur)  颜色(Color)],[x轴(X Offset) y轴(Y Offset)  模糊半径(Blur)  颜色(Color)]...</pre>
<h4><span style=\"color: #ff6600;\"><b>2、取值:</b></span></h4>
<pre class=\"lang:default decode:true\">&lt;length&gt;：长度值，可以是负值。用来指定阴影的延伸距离。其中X Offset是水平偏移值，Y Offset是垂直偏移值
&lt;color&gt;：指定阴影颜色，也可以是rgba透明色
&lt;shadow&gt;：阴影的模糊值，不可以是负值，用来指定模糊效果的作用距离</pre>
<h4><span style=\"color: #ff6600;\"><b>3、说明：</b></span></h4>
可以给一个对象应用一组或多组阴影效果，方式如前面的语法显示一样，用逗号隔开。<strong>text-shadow: X-Offset Y-Offset Blur Color中X-Offset表示阴影的水平偏移距离，其值为正值时阴影向右偏移，如果其值为负值时，阴影向左偏移；Y-Offset是指阴影的垂直偏移距离，如果其值是正值时，阴影向下偏移反之其值是负值时阴影向顶部偏移；Blur是指阴影的模糊程度，其值不能是负值，如果值越大，阴影越模糊，反之阴影越清晰，如果不需要阴影模糊可以将Blur值设置为0；Color是指阴影的颜色，其可以使用rgba色。</strong>
<h4><span style=\"color: #ff6600;\"><b>4、IE不支持text-shadow效果</b></span></h4>
IE是不支持text-shadow效果，但为了在兼容这一问题，我们只好使用滤镜filter:shadow来处理（本人不提倡使用滤镜）。filter:shadow滤镜作用与dropshadow类似，也能使用对象产生阴影效果，不同的是shadow可产生渐近效果，使用阴影更平滑实现。

<b>滤镜语法：</b>
<pre class=\"lang:default decode:true\">E{filter:shadow(Color=颜色值,Direction=数值,Strength=数值)}</pre>
其中E是元素选择器，Color用于设定对象的阴影色；Direction用于设定投影的主向，取值为0即零度（表示向上方向），45为右上，90为右，135为右下，180为下方，225为左下方，270为左方，315为左上方；Strength就是强度，类似于text-shadow中的blur值。
<h4><span style=\"color: #ff6600;\"><b>5、下面我这里罗列出一些比较好看的实例以供大家参考(注：下面所有的Demo需要加上这个公用的样式：)</b></span></h4>
<pre class=\"lang:default decode:true\">.demo {
background: #666666;
width: 440px;
padding: 30px;
font: bold 55px/100% \"微软雅黑\", \"Lucida Grande\", \"Lucida Sans\", Helvetica, Arial, Sans;;
color: #fff;
text-transform: uppercase;
}</pre>
<b>效果一：Glow and Extra Glow effect(也就是NEON effect)</b>
<pre class=\"lang:default decode:true\">.demo2 {text-shadow: 0 0 20px red;}</pre>
辉光效果，我们设置比较大的模糊半径来增加其辉光效果，你可以改变不同的模糊半径值来达到不同的效果，当然你也可以同时增加几个不同的半径值，创造多种不同的阴影效果。就如下面的NEON效果。
<pre class=\"lang:default decode:true\">.demo3{text-shadow: 0 0 5px #fff, 0 0 10px #fff, 0 0 15px #fff, 0 0 40px #ff00de, 0 0 70px #ff00de;}</pre>
<b>效果二：Apple Style Effect</b>
<pre class=\"lang:default decode:true\">.demo4{ color: #000; text-shadow: 0 1px 1px #fff;}</pre>
<b>效果三：Photoshop Emboss Effect</b>
<pre class=\"lang:default decode:true\">.demo5{color: #ccc; text-shadow: -1px -1px 0 #fff,1px 1px 0 #333,1px 1px 0 #444;}</pre>
<b>效果四：Blurytext Effect</b>
<pre class=\"lang:default decode:true\">.demo6{color: transparent;text-shadow: 0 0 5px #f96;}</pre>
用text-shadow制作模糊的效果主要要注意一点就是，把文本的前景色设置为透明transparent,如果模糊值越大，其效果越糊糊；其二，我们不设置任何方向的偏移值。如果结合前面的photoshop emboss效果，可以让你等到不同的效果。提醒一下opera浏览器不支持这个效果。
<pre class=\"lang:default decode:true\">.demo7{color: transparent;text-shadow:0 0 6px #F96, -1px -1px #FFF, 1px -1px #444;}</pre>
<b>效果五：Inset text effect</b>
<pre class=\"lang:default decode:true\">.demo8{color: #566F89;background: #C5DFF8;text-shadow: 1px 1px 0 #E4F1FF;}</pre>
<b>效果六：Stroke text effect</b>
<pre class=\"lang:default decode:true\">.demo9{color: #fff;text-shadow: 1px 1px 0 #f96,-1px -1px 0 #f96;}</pre>
<b>效果七：3D text effect</b>
<pre class=\"lang:default decode:true\">.demo10 {color: #fff;text-shadow: 1px 1px rgba(197, 223, 248,0.8),2px 2px rgba(197, 223, 248,0.8),3px 3px rgba(197, 223, 248,0.8),4px 4px rgba(197, 223, 248,0.8),5px 5px rgba(197, 223, 248,0.8),6px 6px rgba(197, 223, 248,0.8);}</pre>
我们换过投影方向可以制作出另外一种3D文字效果
<pre class=\"lang:default decode:true\">.demo11{color: #fff;text-shadow: -1px -1px rgba(197, 223, 248,0.8),-2px -2px rgba(197, 223, 248,0.8),-3px -3px rgba(197, 223, 248,0.8),-4px -4px rgba(197, 223, 248,0.8),-5px -5px rgba(197, 223, 248,0.8),-6px -6px rgba(197, 223, 248,0.8);}</pre>
<b>效果八：Vintge/Retro text effect</b>
<pre class=\"lang:default decode:true\">.demo12{color: #eee;text-shadow: 5px 5px 0 #666, 7px 7px 0 #eee;}</pre>
<b>效果九：Anaglyphic text effect</b>
<pre class=\"lang:default decode:true\">.demo13{color: rgba(255, 179, 140,0.5);text-shadow: 3px 3px 0 rgba(180,255,0,0.5);}</pre>
<b>文章原始出处：<a href=\"http://www.w3cplus.com/blog/52.html\" target=\"_blank\">http://www.w3cplus.com/blog/52.html</a></b>",
          "wp:post_id": "744",
          "wp:post_date": "2013-03-06 15:39:01",
          "wp:post_date_gmt": "2013-03-06 07:39:01",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "css3%e5%b1%9e%e6%80%a7text-shadow%e6%96%87%e5%ad%97%e9%98%b4%e5%bd%b1",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "css3",
            "#cdata-section": "CSS3"
          }
        },
        {
          "title": "CSS3属性:Box-shadow盒子阴影",
          "link": "http://www.pernav.com/css3%e5%b1%9e%e6%80%a7box-shadow%e7%9b%92%e5%ad%90%e9%98%b4%e5%bd%b1/",
          "pubDate": "Thu, 07 Mar 2013 01:11:57 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=750"
          },
          "content:encoded": "CSS3的box-shadow有点类似于text-shadow，只不过不同的是text-shadow是对象的文本设置阴影，而box-shadow是给对象实现图层阴影效果。
<h4><span style=\"color: #ff6600;\"><b>1、语法</b><b>：</b></span></h4>
<pre class=\"lang:default decode:true\">E {box-shadow: &lt;length&gt; &lt;length&gt; &lt;length&gt;?&lt;length&gt;?||&lt;color&gt;}
也就是：
E {box-shadow:inset x-offset y-offset blur-radius spread-radius color}
换句说：
对象选择器 {box-shadow:投影方式 X轴偏移量 Y轴偏移量 阴影模糊半径 阴影扩展半径 阴影颜色}</pre>
box-shadow和text-shadow一样可以使用一个或多个投影，如果使用多个投影时必须需要用逗号“，”分开。
<h4><span style=\"color: #ff6600;\"><b>2、取值：</b></span></h4>
box-shadow属性至多有6个参数设置，他们分别取值：

<b>a.阴影类型：</b>此参数是一个可选值，如果不设值，其默认的投影方式是外阴影；如果取其唯一值“inset”,就是将外阴影变成内阴影，也就是说设置阴影类型为“inset”时，其投影就是内阴影；

<b>b.X-offset:</b>是指阴影水平偏移量其值可以是正负值可以取正负值，如果值为正值，则阴影在对象的右边，反之其值为负值时，阴影在对象的左边；

<b>c.Y-offset:</b>是指阴影的垂直偏移量，其值也可以是正负值，如果为正值，阴影在对象的底部，反之其值为负值时，阴影在对象的顶部；

<b>d.阴影模糊半径：</b>此参数是可选，但其值只能是为正值，如果其值为0时，表示阴影不具有模糊效果，其值越大阴影的边缘就越模糊；

<b>e.阴影扩展半径：</b>此参数可选，其值可以是正负值，如果值为正，则整个阴影都延展扩大，反之值为负值是，则缩小;

<b>f.阴影颜色：</b>此参数可选，如果不设定任何颜色时，浏览器会取默认色，但各浏览器默认色不一样，特别是在webkit内核下的safari和chrome浏览器将无色，也就是透明，建议不要省略此参数。;
<h4><span style=\"color: #ff6600;\"><b>3、书写box-shadow的格式应该这样</b></span></h4>
<pre class=\"lang:default decode:true\">//Firefox4.0-
-moz-box-shadow: 投影方式 X轴偏移量 Y轴偏移量 阴影模糊半径 阴影扩展半径 阴影颜色;
//Safari and Google chrome10.0-
-webkit-box-shadow: 投影方式 X轴偏移量 Y轴偏移量 阴影模糊半径 阴影扩展半径 阴影颜色;
//Firefox4.0+ 、 Google chrome 10.0+ 、 Oprea10.5+ and IE9
box-shadow: 投影方式 X轴偏移量 Y轴偏移量 阴影模糊半径 阴影扩展半径 阴影颜色;</pre>
<h4><span style=\"color: #ff6600;\"><b>4、box-shadow的特征：</b></span></h4>
CSS3的box-shadow可以通过改变其参数得到不同的效果，如：改变阴影偏移量的设置，我们可以使用阴影只在对象的上下左右的任一边出现，也可以让其出现在其中的某几个边上;其二可以随时调节阴影大小，边缘模糊度，阴影颜色，其三可以随时更改为内阴影，另外还可以设置多个阴影效果

其实在webkit内核的浏览器Safari、Google Chrome里不会有任何阴影效果，虽然W3C标准里说颜色是可选择的，但是在没有给出颜色的时候 ，safari/chrome和firefox表现不同，在webkit内核的浏览器下阴影表现为透明色而mozilla和oprea下表现为黑色。<b>基于这样的原因，大家在使用box-shadow时不要忘了加上阴影颜色的值。</b>

borer-radius圆角，阴影扩展、阴影模糊以及padding是如何影响对象阴影的：非零值的border-radius将会以相同的作用影响阴影的外形，但border-image不会影响对象阴影的任何外形；对象阴影同box模型的层次一样，外阴影会在对象背景之下，内阴影会在边框之下背景之上。所以整个层级就是：边框&gt;内阴影&gt;背景图片&gt;背景颜色&gt;外阴影。因为大家都知道，我们的背景图片是在背景颜色之上的。
<h4><span style=\"color: #ff6600;\"><b>5、IE不支持box-shadow效果</b></span></h4>
在前面我们讲过，IE9以下是不支持CSS3的box-shadow的，但为了处理这个兼容问题，我们可以在IE下使用IE的shadow阴影滤镜来实现:
<pre class=\"lang:default decode:true\">filter: progid:DXImageTransform.Microsoft.Shadow(color=’颜色值’, Direction=阴影角度（数值）, Strength=阴影半径（数值）);
filter:
progid:DXImageTransform.Microsoft.Shadow(color=#eeeeee,direction=0,strength=7)
progid:DXImageTransform.Microsoft.Shadow(color=#dddddd,direction=90,strength=10)
progid:DXImageTransform.Microsoft.Shadow(color=#dddddd,direction=180,strength=10)
progid:DXImageTransform.Microsoft.Shadow(color=#eeeeee,direction=270,strength=7);</pre>
使用滤镜来实现IE下的效果，基中“color”为阴影色，“direction”是阴影方向，“strength”是阴影强度。特别注意，颜色“#eeeeee”在此处不能写成“#eee”，不然会无效果。

<span style=\"color: #99cc00;\">注意：</span>该滤镜必须配合background属性一起使用，否则该滤镜失效。除了使用滤镜的方法外，我们还有一种方法可以实现IE下的效果。那就是使用jQuery的插件jquery.boxshadow.js。那么具体如何使用呢？其实很简单，你先下载这个jquery.boxshadow.js插件到你的项目中，接着把jquery版本库和jquery.boxshadow.js加载到页面上，如:
<pre class=\"lang:default decode:true\">&lt;script type=\"text/javascript\" src=\"../js/jquery.min.js\"&gt;&lt;/script&gt;
&lt;script type=\"text/javascript\" src=\"../js/jquery.boxshadow.js\"&gt;&lt;/script&gt;
&lt;script type=\"text/javascript\"&gt;
	$(document).ready(function(){
		if($.browser.msie) {
			$('.demo1').boxShadow(0,0,5,\"#888\"); //demo1元素使用了box-shadow
			$('.demo2').boxShadow(-10,-10,5,\"#f36\"); //demo2元素使用了box-shadow
		}
	});
&lt;/script&gt;</pre>
<span style=\"color: #ff6600;\"><strong>6、下面我这里罗列出一些比较好看的实例以供大家参考(注：下面所有的Demo需要加上这个公用的样式：)</strong></span>
<pre class=\"lang:default decode:true\">.demo {width: 100px;height: 50px;background: #f69;}</pre>
<b>效果一:单边效果</b>
<pre class=\"lang:default decode:true\">.dome2 {
box-shadow: -2px 0 0 green, //左边阴影
0 -2px 0 blue, //顶部阴影
0 2px 0 red, //底部阴影
2px 0 0 yellow; //右边阴影
}</pre>
给对象四边设计阴影，我们是通过改变x-offset和y-offset的正负值来实现，其中x-offset为负值时，生成左边阴影，为正值时生成右边阴影，y-offset为正值是生成底部阴影，为负值时生成顶部阴影。并且把模糊半径设置为0，如果不设置为0的话那么其他三边也将会有阴影，并且此处还涉及到一个多阴影的顺序问题。<strong>当给同一个元素使用多个阴影属性时，需要注意它的顺序，最先写的阴影将显示在最顶层，</strong>如我们将上面的实例变一下，给其加上模糊值，将更能看出效果：
<pre class=\"lang:default decode:true\">.demo3 {
box-shadow: -2px 0 5px green,//左边阴影
0 -2px 5px blue,//顶部阴影
0 2px 5px red,//底部阴影
2px 0 5px yellow;//右边阴影
}</pre>
<b>效果二：四边具有相同的阴影效果（只设置阴影模糊半径和阴影颜色）</b>
<pre class=\"lang:default decode:true\">.demo7 {box-shadow: 0 0 5px rgb(250,0,0);}
我们在这里设置的是HEX值，我们也可以应用css3的rgba值给box-shadow的阴影颜色上，这样的好处是，box-shadow阴影色多了一个alpha透明值 ，如下面的实例：
.demo8{box-shadow: 0 0 5px rgba(250,0,0,0.5); }</pre>
<b>效果三：四边具有相同的阴影（只设置阴影扩展半径和阴影颜色）</b>
<pre class=\"lang:default decode:true\">.demo9{box-shadow: 0 0 0 1px red;}</pre>
从效果中大家想想这种效果是不是跟我们在元素中的boder: 1px solid red;属性产生的效果很相似的呀。对的，box-shadow不单可以制作出阴影的效果，我们还可以利用其扩展半径这个值，来给对象制作出类似于边框的样式。下面我们来看一个对比的实例：
<pre class=\"lang:default decode:true\">/*边框效果*/
.demo10{border: 5px solid red;}
/*阴影效果*/
.demo11{box-shadow: 0 0 0 5px red;}</pre>
前面所讲的阴影不会影响页面的任何布局：demo12的边框被计算了宽度，但demo13的阴影浏览器却忽略不计，所以借住这个特点，我们阴影所模拟的边框理可以自由的使用，但必须要注意其层级关系。
<h4><span style=\"color: #ff6600;\"><b>7、例举几个特殊的实例：内阴影inset、body设置阴影和投影drop shadow</b></span></h4>
<b>A.内阴影inset效果：</b>
<pre class=\"lang:default decode:true\">.demo14{box-shadow: inset 0 0 10px red;}</pre>
<b>a.直接在img元素上使用inset是没有任何效果的，那么我们现在来针对这个bug做一次修改，我们把img放到一个div中，然后不直接在img上运用box-shadow属性，而是在img的父元素div上运用box-shadow，接着我们在给img进行相对定位，并让其在父元素下一层，如：</b>
<pre class=\"lang:default decode:true\">&lt;div class=\"img-wrap\"&gt;&lt;img src=\"/images/box-shadow-img.png\" alt=\"box shadow img\" /&gt;&lt;/div&gt;

.img-wrap {
-webkit-box-shadow: inset 0 0 10px red;
-moz-box-shadow: inset 0 0 10px red;
box-shadow: inset 0 0 10px red;
display: inline-block;
}
.img-wrap img {
position: relative;
z-index: -1;
}</pre>
<b>b.根据上面实例思路，我们换过一种实现方法，这种方法我们是在img父元素上应用一上伪元素“:before”来实现：</b>
<pre class=\"lang:default decode:true\">&lt;div class=\"shadow\"&gt;&lt;img src=\"/images/box-shadow-img.png\" alt=\"box shadow img\" /&gt;&lt;/div&gt;
.shadow {
position: relative;
display: inline-block;
*display: inline;
}
.shadow::before {
content:\"\";
position: absolute;
width: 100%;
height: 100%;
-moz-box-shadow:inset 0 0 5px 1px red;
-webkit-box-shadow: inset 0 0 5px 1px red;
box-shadow: inset 0 0 5px 1px red;
}</pre>
<b>B.给body顶部增加一个阴影</b>
<pre class=\"lang:default decode:true\">body:before {
content:\"\";
position:fixed;
top: -10px;
left: 0;
width: 100%;
height: 10px;
z-index: 999;
box-shadow: 0 0 10px rgba(125,255,125,0.8);
}</pre>
这里提醒大家，为了不影响布局，top的取值最好和height的取值一致。只是top使用负值。利用同样的方法我们可以给任何一个元素加上阴影，但相应需要改变定位方式

<b>C.Drop-shadow效果</b>

Drop-shadow效果，大家在Photoshop中肯定都见识过了，今天我们是来看一个实例，不增加任何元素标签的情况下，我们主要是利用box-shadow配合元素的两个伪元素:before和:after以及定位来实现，这种效果支持的浏览器现在主要有firefox3.5+/chrome5+/safari5+/opera10.6+/Ie9+。

原理：我们通过box-shadow实现drop shadow效果是仅用一个div标签元素，然后配合其两个伪元素\":before\"和\":after\"；然后我们分别给其伪元素定位到div的后面，并把box-shadow应用到这两个伪元素上。
<pre class=\"lang:default decode:true\">/* 定义了一个叫\"drop-shadow\"的div，现在我们给其应用一个基本样式 */
.drop-shadow {
width: 300px;
height: 150px;
position: relative;
background: #ccc; 
}
/* 给drop-shadow的“:before”和\":after\"定位到drop-shadow下面 ,并给drop-shadow的\":before\"和\":after\"加上阴影效果,通过应用css3 transforms来实现另一边的效果,最后需要改变\":after\"伪元素定位方向。（伪元素\":after\"在相反方向旋转，相对于\":before\"）*/
.drop-shadow:before,
.drop-shadow:after {
content: \"\";
position: absolute;
z-index: -1;
bottom: 15px;
left: 10px;
width: 50%;
max-width: 150px;
height: 20%;
/*add box-shadow*/
-webkit-box-shadow: 0 15px 10px rgba(125,125,125,0.8);
-moz-box-shadow: 0 15px 10px rgba(125,125,125,0.8);
box-shadow: 0 15px 10px rgba(125,125,125,0.8);
/*add css3 transform*/
-webkit-transform: rotate(-3deg);
-moz-transform: rotate(-3deg);
-o-transform: rotate(-3deg);
transform: rotate(-3deg);
}
.drop-shadow:after {
right:10px;
left: auto;
-webkit-transform:rotate(3deg);
-moz-transform:rotate(3deg);
-o-transform:rotate(3deg);
transform:rotate(3deg);
}</pre>
<strong>文章原始出处：<a href=\"http://www.w3cplus.com/content/css3-box-shadow\" target=\"_blank\">http://www.w3cplus.com/content/css3-box-shadow</a></strong>",
          "wp:post_id": "750",
          "wp:post_date": "2013-03-07 09:11:57",
          "wp:post_date_gmt": "2013-03-07 01:11:57",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "css3%e5%b1%9e%e6%80%a7box-shadow%e7%9b%92%e5%ad%90%e9%98%b4%e5%bd%b1",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "css3",
            "#cdata-section": "CSS3"
          }
        },
        {
          "title": "CSS3属性:Transform旋转,扭曲,缩放，移动，矩阵变形",
          "link": "http://www.pernav.com/css3%e5%b1%9e%e6%80%a7transform%e6%97%8b%e8%bd%ac%e6%89%ad%e6%9b%b2%e7%bc%a9%e6%94%be%ef%bc%8c%e7%a7%bb%e5%8a%a8%ef%bc%8c%e7%9f%a9%e9%98%b5%e5%8f%98%e5%bd%a2/",
          "pubDate": "Mon, 11 Mar 2013 05:23:50 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=758"
          },
          "content:encoded": "Transform字面上就是变形，改变的意思。在CSS3中transform主要包括以下几种：旋转rotate、扭曲skew、缩放scale和移动translate以及矩阵变形matrix。下面我们一起来看看CSS3中transform的旋转rotate、扭曲skew、缩放scale和移动translate具体如何实现，老样子，我们就从transform的语法开始吧。
<h4><span style=\"color: #ff6600;\"><b>1、语法：</b></span></h4>
<pre class=\"lang:default decode:true\">transform ： none | &lt;transform-function&gt; [ &lt;transform-function&gt; ]* 
也就是：
transform: rotate | scale | skew | translate |matrix;</pre>
none:表示不进么变换；&lt;transform-function&gt;表示一个或多个变换函数，以空格分开；换句话说就是我们同时对一个元素进行transform的多种属性操作，例如rotate、scale、translate三种，但这里需要提醒大家的，<strong>以往我们叠加效果都是用逗号（“，”）隔开，但transform中使用多个属性时却需要有空格隔开。大家记住了是空格隔开。</strong>
<h4><span style=\"color: #ff6600;\"><b>2、取值：</b></span></h4>
transform属性实现了一些可用SVG实现的同样的功能。它可用于内联(inline)元素和块级(block)元素。它允许我们旋转、缩放和移动元素 ，他有几个属性值参数：rotate;translate;scale;skew;matrix。下面我们分别来介绍这几个属性值参数的具体使用方法：

<b>一、旋转rotate</b>

rotate(&lt;angle&gt;) ：通过指定的角度参数对原元素指定一个2D rotation（2D 旋转），需先有transform-origin属性的定义。transform-origin定义的是旋转的基点，其中angle是指旋转角度，如果设置的值为正数表示顺时针旋转，如果设置的值为负数，则表示逆时针旋转。如：transform:rotate(30deg):

<b>二、移动translate</b>

移动translate我们分为三种情况：translate(x,y)水平方向和垂直方向同时移动（也就是X轴和Y轴同时移动）；translateX(x)仅水平方向移动（X轴移动）；translateY(Y)仅垂直方向移动（Y轴移动），具体使用方法如下：

<strong>a.translate(&lt;translation-value&gt;[, &lt;translation-value&gt;]) ：</strong>通过矢量[tx, ty]指定一个2D translation，tx 是第一个过渡值参数，ty 是第二个过渡值参数选项。如果 未被提供，则ty以 0 作为其值。也就是translate(x,y),它表示对象进行平移，按照设定的x,y参数值,当值为负数时，反方向移动物体，其基点默认为元素 中心点，也可以根据transform-origin进行改变基点。如transform:translate(100px,20px):

<strong>b.translateX(&lt;translation-value&gt;) ：</strong> 通过给定一个X方向上的数目指定一个translation。只向x轴进行移动元素，同样其基点是元素中心点，也可以根据transform-origin改变基点位置。如：transform:translateX(100px):

<strong>c.translateY(&lt;translation-value&gt;) ：</strong>通过给定Y方向的数目指定一个translation。只向Y轴进行移动，基点在元素心点，可以通过transform-origin改变基点位置。如：transform:translateY(20px):

<b>三、缩放scale</b>

缩放scale和移动translate是极其相似，他也具有三种情况：scale(x,y)使元素水平方向和垂直方向同时缩放（也就是X轴和Y轴同时缩放）；scaleX(x)元素仅水平方向缩放（X轴缩放）；scaleY(y)元素仅垂直方向缩放（Y轴缩放），但它们具有相同的缩放中心点和基数，其中心点就是元素的中心位置，缩放基数为1，如果其值大于1元素就放大，反之其值小于1，元素缩小。下面我们具体来看看这三种情况具体使用方法：

<strong>a.scale(&lt;number&gt;[, &lt;number&gt;])：</strong>提供执行[sx,sy]缩放矢量的两个参数指定一个2D scale（2D缩放）。如果第二个参数未提供，则取与第一个参数一样的值。scale(X,Y)是用于对元素进行缩放，可以通过transform-origin对元素的基点进行设置，同样基点在元素中心位置；基中X表示水平方向缩放的倍数，Y表示垂直方向的缩放倍数，而Y是一个可选参数，如果没有设置Y值，则表示X，Y两个方向的缩放倍数是一样的。并以X为准。如：transform:scale(2,1.5):

<strong>b.scaleX(&lt;number&gt;) ：</strong> 使用 [sx,1] 缩放矢量执行缩放操作，sx为所需参数。scaleX表示元素只在X轴(水平方向)缩放元素，他的默认值是(1,1)，其基点一样是在元素的中心位置，我们同样是通过transform-origin来改变元素的基点。如：transform:scaleX(2):

<strong>c.scaleY(&lt;number&gt;) ：</strong> 使用 [i,sy] 缩放矢量执行缩放操作，sy为所需参数。scaleY表示元素只在Y轴（垂直方向）缩放元素，其基点同样是在元素中心位置，可以通过transform-origin来改变元素的基点。如transform:scaleY(2):

<b>四、扭曲skew</b>

扭曲skew和translate、scale一样同样具有三种情况：skew(x,y)使元素在水平和垂直方向同时扭曲（X轴和Y轴同时按一定的角度值进行扭曲变形）；skewX(x)仅使元素在水平方向扭曲变形（X轴扭曲变形）；skewY(y)仅使元素在垂直方向扭曲变形（Y轴扭曲变形），具体使用如下：

<strong>a.skew(&lt;angle&gt; [, &lt;angle&gt;]) ：</strong>X轴Y轴上的skew transformation（斜切变换）。第一个参数对应X轴，第二个参数对应Y轴。如果第二个参数未提供，则值为0，也就是Y轴方向上无斜切。skew是用来对元素进行扭曲变行，第一个参数是水平方向扭曲角度，第二个参数是垂直方向扭曲角度。其中第二个参数是可选参数，如果没有设置第二个参数，那么Y轴为0deg。同样是以元素中心为基点，我们也可以通过transform-origin来改变元素的基点位置。如：transform:skew(30deg,10deg):

<strong>b.skewX(&lt;angle&gt;) ：</strong> 按给定的角度沿X轴指定一个skew transformation（斜切变换）。skewX是使元素以其中心为基点，并在水平方向（X轴）进行扭曲变行，同样可以通过transform-origin来改变元素的基点。如：transform:skewX(30deg)

<strong>c.skewY(&lt;angle&gt;) ：</strong> 按给定的角度沿Y轴指定一个skew transformation（斜切变换）。skewY是用来设置元素以其中心为基点并按给定的角度在垂直方向（Y轴）扭曲变形。同样我们可以通过transform-origin来改变元素的基点。如：transform:skewY（10deg）

<b>五、矩阵matrix</b>

<strong>matrix(&lt;number&gt;, &lt;number&gt;, &lt;number&gt;, &lt;number&gt;, &lt;number&gt;, &lt;number&gt;) ：</strong> 以一个含六值的(a,b,c,d,e,f)变换矩阵的形式指定一个2D变换，相当于直接应用一个[a b c d e f]变换矩阵。就是基于水平方向（X轴）和垂直方向（Y轴）重新定位元素,此属性值使用涉及到数学中的矩阵，我在这里只是简单的说一下CSS3中的transform有这么一个属性值，如果有感兴趣的朋友可以去了解更深层次的martix使用方法，这里就不多说了。
<h4><span style=\"color: #ff6600;\"><b>3、改变元素基点transform-origin</b></span></h4>
前面我们多次提到transform-origin这个东东，他的主要作用就是让我们在进行transform动作之前可以改变元素的基点位置，因为我们元素默认基点就是其中心位置，换句话说我们没有使用transform-origin改变元素基点位置的情况下，transform进行的rotate,translate,scale,skew,matrix等操作都是以元素自己中心位置进行变化的。但有时候我们需要在不同的位置对元素进行这些操作，那么我们就可以使用transform-origin来对元素进行基点位置改变，使元素基点不在是中心位置，以达到你需要的基点位置。

<strong>transform-origin(X,Y):</strong>用来设置元素的运动的基点（参照点）。默认点是元素的中心点。其中X和Y的值可以是百分值,em,px，其中X也可以是字符参数值left,center,right；Y和X一样除了百分值外还可以设置字符值top,center,bottom，这个看上去有点像我们background-position设置一样；
<pre class=\"lang:default decode:true\">1、top left | left top 等价于 0 0 | 0% 0%
2、top | top center | center top 等价于 50% 0
3、right top | top right 等价于 100% 0
4、left | left center | center left 等价于 0 50% | 0% 50%
5、center | center center 等价于 50% 50%（默认值）
6、right | right center | center right 等价于 100% 50%
7、bottom left | left bottom 等价于 0 100% | 0% 100%
8、bottom | bottom center | center bottom 等价于 50% 100%
9、bottom right | right bottom 等价于 100% 100%</pre>
其中 left,center right是水平方向取值，对应的百分值为left=0%;center=50%;right=100%而top center bottom是垂直方向的取值，其中top=0%;center=50%;bottom=100%;如果只取一个值，表示垂直方向值不变，
<h4><span style=\"color: #ff6600;\"><b>4、transform在不同浏览器内核下的书写规则</b></span></h4>
<pre class=\"lang:default decode:true\">//Mozilla内核浏览器：firefox3.5+
-moz-transform: rotate | scale | skew | translate ;
//Webkit内核浏览器：Safari and Chrome
-webkit-transform: rotate | scale | skew | translate ;
//Opera
-o-transform: rotate | scale | skew | translate ;
//IE9
-ms-transform: rotate | scale | skew | translate ;
//W3C标准
transform: rotate | scale | skew | translate ;</pre>
<pre class=\"lang:default decode:true\">&lt;div class=\"menu\"&gt;
	&lt;ul class=\"clearfix\"&gt;
		&lt;li class=\"item translate\"&gt;&lt;a href=\"#\"&gt;Translate&lt;/a&gt;&lt;/li&gt;
		&lt;li class=\"item translate-x\"&gt;&lt;a href=\"#\"&gt;TranslateX&lt;/a&gt;&lt;/li&gt;
		&lt;li class=\"item translate-y\"&gt;&lt;a href=\"#\"&gt;TranslateY&lt;/a&gt;&lt;/li&gt;
		&lt;li class=\"item rotate\"&gt;&lt;a href=\"#\"&gt;Rotate&lt;/a&gt;&lt;/li&gt;
		&lt;li class=\"item scale\"&gt;&lt;a href=\"#\"&gt;Scale&lt;/a&gt;&lt;/li&gt;
		&lt;li class=\"item scale-x\"&gt;&lt;a href=\"#\"&gt;ScaleX&lt;/a&gt;&lt;/li&gt;
		&lt;li class=\"item scale-y\"&gt;&lt;a href=\"#\"&gt;ScaleY&lt;/a&gt;&lt;/li&gt;
		&lt;li class=\"item skew\"&gt;&lt;a href=\"#\"&gt;Skew&lt;/a&gt;&lt;/li&gt;
		&lt;li class=\"item skew-x\"&gt;&lt;a href=\"#\"&gt;SkewX&lt;/a&gt;&lt;/li&gt;
		&lt;li class=\"item skew-y\"&gt;&lt;a href=\"#\"&gt;SkewY&lt;/a&gt;&lt;/li&gt;
		&lt;li class=\"item matrix\"&gt;&lt;a href=\"#\"&gt;Matrix&lt;/a&gt;&lt;/li&gt;
	&lt;/ul&gt;
&lt;/div&gt;
.menu ul {
border-top: 15px solid black;
padding: 0 10px;    
}
.menu ul li a{
color: #fff;
float: left;
margin: 0 5px;
font-size: 14px;
height: 50px;
line-height: 50px;
text-align: center;
width: 65px;
padding: 10px 5px;
background: #151515;
-moz-border-radius: 0 0 5px 5px;
-webkit-border-radius: 0 0 5px 5px;
border-radius: 0 0 5px 5px;
-moz-box-shadow: 0 0 1px #ccc,inset 0 0 2px #fff;
-webkit-box-shadow: 0 0 1px #ccc,inset 0 0 2px #fff;
box-shadow: 0 0 1px #ccc,inset 0 0 2px #fff;
text-shadow: 0 1px 1px #686868;
text-decoration: none;
}
.menu ul li.translate a{background: #2EC7D2;}
.menu ul li.translate-x a {background: #8FDD21;}
.menu ul li.translate-y a {background: #F45917;}
.menu ul li.rotate a {background: #D50E19;}
.menu ul li.scale a {background: #cdddf2;}
.menu ul li.scale-x a {background: #0fDD21;}
.menu ul li.scale-y a {background: #cd5917;}
.menu ul li.skew a {background: #519;}
.menu ul li.skew-x a {background: #D50;}
.menu ul li.skew-y a {background: #E19;}
.menu ul li.matrix a {background: #919;}</pre>
从效果图上我们可以清楚的看到菜单上我们分别对应的是transform中的Translate、TranslateX、TranslateY、Rotate、Scale、ScaleX、ScaleY、Skew、SkewX、SkewY和Matrix，下面我们就在相应的a:hover加上各自的效果<strong>旋转rotate</strong>、<strong>扭曲skew</strong>、<strong>缩放scale</strong>和<strong>移动translate</strong>以及<strong>矩阵变形matrix</strong>：

<b>1、transform:translate(x,y)（<strong>移动</strong>）:</b>
<pre class=\"lang:default decode:true\">.menu ul li.translate a:hover {
-moz-transform: translate(-10px,-10px);
-webkit-transform: translate(-10px,-10px);
-o-transform: translate(-10px,-10px);
-ms-transform: translate(-10px, -10px);
transform: translate(-10px,-10px);
}</pre>
<b>2、transform:translateX(x)<b>（<strong>移动</strong>）:</b></b>
<pre class=\"lang:default decode:true\">.menu ul li.translate-x a:hover {
-moz-transform: translateX(-10px);
-webkit-transform: translateX(-10px);
-o-transform: translateX(-10px);
-ms-transform: translateX(-10px);
transform: translateX(-10px);
}</pre>
<b>3、transform:translateY(y)<b>（<strong>移动</strong>）:</b></b>
<pre class=\"lang:default decode:true\">.menu ul li.translate-y a:hover {
-moz-transform: translateY(-10px);
-webkit-transform: translateY(-10px);
-o-transform: translateY(-10px);
-ms-transform: translateY(-10px);
transform: translateY(-10px);
}</pre>
<b>4、transform:rotate(角度值)（旋转）：</b>
<pre class=\"lang:default decode:true\">.menu ul li.rotate a:hover {
-moz-transform: rotate(45deg);
-webkit-transform: rotate(45deg);
-o-transform: rotate(45deg);
-ms-transform: rotate(45deg);
transform: rotate(45deg);
}</pre>
<b>5、transform:scale(x,y)<b>（<strong>缩放</strong>）：</b></b>
<pre class=\"lang:default decode:true\">.menu ul li.scale a:hover {
-moz-transform: scale(0.8,0.8);
-webkit-transform: scale(0.8,0.8);
-o-transform: scale(0.8,0.8);
-ms-transform: scale(0.8,0.8);
transform: scale(0.8,0.8);
}</pre>
<b>6、transform:scaleX(x)<b>（<strong>缩放</strong>）：</b></b>
<pre class=\"lang:default decode:true\">.menu ul li.scale-x a:hover {
-moz-transform: scaleX(0.8);
-webkit-transform: scaleX(0.8);
-o-transform: scaleX(0.8);
-ms-transform: scaleX(0.8);
transform: scaleX(0.8);
}</pre>
<b>7、transform:scaleY(y)<b>（<strong>缩放</strong>）：</b></b>
<pre class=\"lang:default decode:true\">.menu ul li.scale-y a:hover {
-moz-transform: scaleY(1.2);
-webkit-transform: scaleY(1.2);
-o-transform: scaleY(1.2);
-ms-transform: scaleY(1.2);
transform: scaleY(1.2);
}</pre>
<b>8、transform:skew(x,y)<b>（扭曲）：</b></b>
<pre class=\"lang:default decode:true\">.menu ul li.skew a:hover {
-moz-transform: skew(45deg,15deg);
-webkit-transform: skew(45deg,15deg);
-o-transform: skew(45deg,15deg);
-ms-transform: skew(45deg,15deg);
transform: skew(45deg,15deg);
}</pre>
<b>9、transform:skewX(x)<b>（扭曲）：</b></b>
<pre class=\"lang:default decode:true\">.menu ul li.skew-x a:hover {
-moz-transform: skewX(-30deg);
-webkit-transform: skewX(-30deg);
-o-transform: skewX(-30deg);
-ms-transform: skewX(-30deg);
transform: skewX(-30deg);
}</pre>
<b>10、transform:skewY(y)<b>（扭曲）：</b></b>
<pre class=\"lang:default decode:true\">.menu ul li.skew-y a:hover {
-moz-transform: skewY(30deg);
-webkit-transform: skewY(30deg);
-o-transform: skewY(30deg);
-ms-transform: skewY(30deg);
transform: skewY(30deg);
}</pre>
<b>11、transform:matrix(a,b,c,d,e,f)<b>（矩阵变形）：</b></b>
<pre class=\"lang:default decode:true\">.menu ul li.matrix a:hover {
-moz-transform: matrix(1,1,-1,0,0,0);
-webkit-transform: matrix(1,1,-1,0,0,0);
-o-transform: matrix(1,1,-1,0,0,0);
-ms-transform: matrix(1,1,-1,0,0,0);
transform: matrix(1,1,-1,0,0,0);
}</pre>
<b>12、transform运用多个属性值的效果实例</b>
<pre class=\"lang:default decode:true\">.demo a{
width: 100px;
padding: 5px;
background: red;
display: block;
}
.demo a:hover {
-moz-transform: rotate(45deg) scale(0.8,1.2) skew(60deg,-30deg);
-webkit-transform: rotate(45deg) scale(0.8,1.2) skew(60deg,-30deg);
-o-transform: rotate(45deg) scale(0.8,1.2) skew(60deg,-30deg);
-ms-transform: rotate(45deg) scale(0.8,1.2) skew(60deg,-30deg);
transform: rotate(45deg) scale(0.8,1.2) skew(60deg,-30deg);
}</pre>
<strong>文章原始出处：<a href=\"http://www.w3cplus.com/content/css3-transform\" target=\"_blank\">http://www.w3cplus.com/content/css3-transform</a></strong>",
          "wp:post_id": "758",
          "wp:post_date": "2013-03-11 13:23:50",
          "wp:post_date_gmt": "2013-03-11 05:23:50",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "css3%e5%b1%9e%e6%80%a7transform%e6%97%8b%e8%bd%ac%e6%89%ad%e6%9b%b2%e7%bc%a9%e6%94%be%ef%bc%8c%e7%a7%bb%e5%8a%a8%ef%bc%8c%e7%9f%a9%e9%98%b5%e5%8f%98%e5%bd%a2",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "css3",
            "#cdata-section": "CSS3"
          }
        },
        {
          "title": "CSS3属性:Transition平滑过渡",
          "link": "http://www.pernav.com/css3%e5%b1%9e%e6%80%a7transition%e5%b9%b3%e6%bb%91%e8%bf%87%e6%b8%a1/",
          "pubDate": "Mon, 11 Mar 2013 05:37:07 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=761"
          },
          "content:encoded": "W3C标准中对css3的transition这是样描述的：“css的transition允许css的属性值在一定的时间区间内平滑地过渡。这种效果可以在鼠标单击、获得焦点、被点击或对元素任何改变中触发，并圆滑地以动画效果改变CSS的属性值。”
<h4><span style=\"color: #ff6600;\"><b>1、语法：</b></span></h4>
<pre class=\"lang:default decode:true\">transition ： [&lt;'transition-property'&gt; || &lt;'transition-duration'&gt; || &lt;'transition-timing-function'&gt; || &lt;'transition-delay'&gt; [, [&lt;'transition-property'&gt; || &lt;'transition-duration'&gt; || &lt;'transition-timing-function'&gt; || &lt;'transition-delay'&gt;]]</pre>
transition主要包含四个属性值：执行变换的属性：transition-property,变换延续的时间：transition-duration,在延续时间段，变换的速率变化transition-timing-function,变换延迟时间transition-delay。
<h4><span style=\"color: #ff6600;\"><b>2、取值：</b></span></h4>
<b>一、transition-property:</b>
<pre class=\"lang:default decode:true\">transition-property ： none | all | [ &lt;IDENT&gt; ] [ ',' &lt;IDENT&gt; ]</pre>
transition-property是用来指定当元素其中一个属性改变时执行transition效果，其主要有以下几个值：none(没有属性改变)；all（所有属性改变）这个也是其默认值；indent（元素属性名）。当其值为none时，transition马上停止执行，当指定为all时，则元素产生任何属性值变化时都将执行transition效果，ident是可以指定元素的某一个属性值。

<strong>1、color:</strong> 通过红、绿、蓝和透明度组件变换（每个数值处理）如：background-color,border-color,color,outline-color等css属性；
<strong>2、length:</strong> 真实的数字 如：word-spacing,width,vertical-align,top,right,bottom,left,padding,outline-width,margin,min-width,min-height,max-width,max-height,line-height,height,border-width,border-spacing,background-position等属性；
<strong>3、percentage:</strong>真实的数字 如：word-spacing,width,vertical-align,top,right,bottom,left,min-width,min-height,max-width,max-height,line-height,height,background-position等属性；
<strong>4、integer离散步骤（整个数字）</strong>，在真实的数字空间，以及使用floor()转换为整数时发生 如：outline-offset,z-index等属性；
<strong>5、number真实的（浮点型）</strong>数值，如：zoom,opacity,font-weight,等属性；
<strong>6、transform list:</strong>详情请参阅：《CSS3 Transform》
<strong>7、rectangle:</strong>通过x, y, width 和 height（转为数值）变换，如：crop
<strong>8、visibility:</strong> 离散步骤，在0到1数字范围之内，0表示“隐藏”，1表示完全“显示”,如：visibility
<strong>9、shadow:</strong> 作用于color, x, y 和 blur（模糊）属性,如：text-shadow
<strong>10、gradient:</strong> 通过每次停止时的位置和颜色进行变化。它们必须有相同的类型（放射状的或是线性的）和相同的停止数值以便执行动画,如：background-image
<strong>11、paint server (SVG):</strong> 只支持下面的情况：从gradient到gradient以及color到color，然后工作与上面类似
<strong>12、space-separated list of above:</strong>如果列表有相同的项目数值，则列表每一项按照上面的规则进行变化，否则无变化
<strong>13、a shorthand property:</strong> 如果缩写的所有部分都可以实现动画，则会像所有单个属性变化一样变化 具体什么css属性可以实现transition效果，在W3C官网中列出了所有可以实现transition效果的CSS属性值以及值的类型，大家可以点这里了解详情。这里需要提醒一点是，并不是什么属性改变都为触发transition动作效果，比如页面的自适应宽度，当浏览器改变宽度时，并不会触发transition的效果。但上述表格所示的属性类型改变都会触发一个transition动作效果。

<b>二、transition-duration:</b>
<pre class=\"lang:default decode:true\">transition-duration ： &lt;time&gt; [, &lt;time&gt;]</pre>
transition-duration是用来指定元素 转换过程的持续时间，取值：&lt;time&gt;为数值，单位为s（秒）,可以作用于所有元素，包括:before和:after伪元素。其默认值是0，也就是变换时是即时的。

<strong>三、transition-timing-function:</strong>
<pre class=\"lang:default decode:true\">transition-timing-function ： ease | linear | ease-in | ease-out | ease-in-out | cubic-bezier(&lt;number&gt;, &lt;number&gt;, &lt;number&gt;, &lt;number&gt;) [, ease | linear | ease-in | ease-out | ease-in-out | cubic-bezier(&lt;number&gt;, &lt;number&gt;, &lt;number&gt;, &lt;number&gt;)]</pre>
transition-timing-function的值允许你根据时间的推进去改变属性值的变换速率，transition-timing-function有6个可能值：

<strong>1、ease：（逐渐变慢）默认值</strong>，ease函数等同于贝塞尔曲线(0.25, 0.1, 0.25, 1.0).
<strong>2、linear：（匀速）</strong>，linear 函数等同于贝塞尔曲线(0.0, 0.0, 1.0, 1.0).
<strong>3、ease-in：(加速)</strong>，ease-in 函数等同于贝塞尔曲线(0.42, 0, 1.0, 1.0).
<strong>4、ease-out:（减速）</strong>，ease-out 函数等同于贝塞尔曲线(0, 0, 0.58, 1.0).
<strong>5、ease-in-out：（加速然后减速）</strong>，ease-in-out 函数等同于贝塞尔曲线(0.42, 0, 0.58, 1.0)
<strong>6、cubic-bezier：（该值允许你去自定义一个时间曲线）</strong>， 特定的cubic-bezier曲线。 (x1, y1, x2, y2)四个值特定于曲线上点P1和点P2。所有值需在[0, 1]区域内，否则无效。

其是cubic-bezier为通过贝赛尔曲线来计算“转换”过程中的属性值，如下曲线所示，通过改变P1(x1, y1)和P2(x2, y2)的坐标可以改变整个过程的Output Percentage。初始默认值为default.

<strong>四、transition-delay:</strong>
<pre class=\"lang:default decode:true\">transition-delay ： &lt;time&gt; [, &lt;time&gt;]</pre>
transition-delay是用来指定一个动画开始执行的时间，也就是说当改变元素属性值后多长时间开始执行transition效果，其取值：&lt;time&gt;为数值，单位为s（秒），其使用和transition-duration极其相似，也可以作用于所有元素，包括:before和:after伪元素。 默认大小是\"0\"，也就是变换立即执行，没有延迟。有时我们不只改变一个css效果的属性,而是想改变两个或者多个css属性的transition效果，那么我们只要把几个transition的声明串在一起，用逗号（“，”）隔开，然后各自可以有各自不同的延续时间和其时间的速率变换方式。但需要值得注意的一点：transition-delay与transition-duration的值都是时间，所以要区分它们在连写中的位置，一般浏览器会根据先后顺序决定，第一个可以解析为时间的怭值为transition-duration第二个为transition-delay。
<pre class=\"lang:default decode:true\">a {
-moz-transition: background 0.5s ease-in,color 0.3s ease-out;
-webkit-transition: background 0.5s ease-in,color 0.3s ease-out;
-o-transition: background 0.5s ease-in,color 0.3s ease-out;
transition: background 0.5s ease-in,color 0.3s ease-out;
}</pre>
如果你想给元素执行所有transition效果的属性，那么我们还可以利用all属性值来操作，此时他们共享同样的延续时间以及速率变换方式，
<pre class=\"lang:default decode:true\">a {
-moz-transition: all 0.5s ease-in;
-webkit-transition: all 0.5s ease-in;
-o-transition: all 0.5s ease-in;
transition: all 0.5s ease-in;
}</pre>
<h4><span style=\"color: #ff6600;\"> 3、浏览器的兼容性</span></h4>
<pre class=\"lang:default decode:true\">//Mozilla内核
-moz-transition ： [&lt;'transition-property'&gt; || &lt;'transition-duration'&gt; || &lt;'transition-timing-function'&gt; || &lt;'transition-delay'&gt; [, [&lt;'transition-property'&gt; || &lt;'transition-duration'&gt; || &lt;'transition-timing-function'&gt; || &lt;'transition-delay'&gt;]]
//Webkit内核
-webkit-transition ： [&lt;'transition-property'&gt; || &lt;'transition-duration'&gt; || &lt;'transition-timing-function'&gt; || &lt;'transition-delay'&gt; [, [&lt;'transition-property'&gt; || &lt;'transition-duration'&gt; || &lt;'transition-timing-function'&gt; || &lt;'transition-delay'&gt;]]
//Opera
-o-transition ： [&lt;'transition-property'&gt; || &lt;'transition-duration'&gt; || &lt;'transition-timing-function'&gt; || &lt;'transition-delay'&gt; [, [&lt;'transition-property'&gt; || &lt;'transition-duration'&gt; || &lt;'transition-timing-function'&gt; || &lt;'transition-delay'&gt;]] 
//W3C 标准
transition ： [&lt;'transition-property'&gt; || &lt;'transition-duration'&gt; || &lt;'transition-timing-function'&gt; || &lt;'transition-delay'&gt; [, [&lt;'transition-property'&gt; || &lt;'transition-duration'&gt; || &lt;'transition-timing-function'&gt; || &lt;'transition-delay'&gt;]]</pre>
<h4><span style=\"color: #ff6600;\"> 4、实践transition实例</span></h4>
<b>DEMO一：</b>

DEMO一我们主要是在一个div中放置了几个小块，分别是对应了transition-timing-function中的几种类型，我们在div的hover状态下，改变其部分属性，从而达到一种动画效果。我们也可以使用jq来点击一个按钮，触发这个div（说简单点就是通过按钮的点击事件给这个div加上一个class，让其子元素都触发相对应的transition动画效果），为了让大家能更好的学习和理解，我把相应的代码贴在这里，感兴趣的朋友就跟着做一下吧，也可以直接把代码复制到你本地页面运行查看效果。
<pre class=\"lang:default decode:true\">/* Html Code */
&lt;a id=\"timings-demo-btn\"&gt;click&lt;/a&gt;
&lt;div id=\"timings-demo\"&gt;
&lt;div id=\"ease\" class=\"demo-box\"&gt;Ease&lt;/div&gt;
&lt;div id=\"ease-in\" class=\"demo-box\"&gt;Ease-in&lt;/div&gt;
&lt;div id=\"ease-out\" class=\"demo-box\"&gt;Ease-out&lt;/div&gt;
&lt;div id=\"ease-in-out\" class=\"demo-box\"&gt;Ease-in-out&lt;/div&gt;
&lt;div id=\"linear\" class=\"demo-box\"&gt;Linear&lt;/div&gt;
&lt;div id=\"cubic-bezier\" class=\"demo-box\"&gt;Cubic-bezier&lt;/div&gt;
&lt;/div&gt;
/* Css Code */		
#timings-demo {
border: 1px solid #ccc;
padding: 10px;
height: 400px;
width: 400px;
}
.demo-box {
width: 100px;
height: 50px;
text-align: center;
line-height: 50px;
text-align: center;
color: #fff;
background: #96c;
-moz-border-radius: 5px;
-webkit-border-radius: 5px;
border-radius: 5px;
-moz-box-shadow: inset 0 0 5px rgba(102, 153, 0,0.5);
-webkit-box-shadow: inset 0 0 5px rgba(102, 153, 0,0.5);
box-shadow: inset 0 0 5px rgba(102, 153, 0,0.5);
margin-bottom: 10px;
}
//ease效果：        
#ease {
-moz-transition: all 5s ease 0.3s;
-webkit-transition: all 5s ease 0.3s;
-o-transition: all 5s ease 0.3s;
transition: all 5s ease 0.3s;
background: #f36;      
}
//ease-in效果：
#ease-in {
-moz-transition: all 3s ease-in 0.5s;
-webkit-transition: all 3s ease-in 0.5s;
-o-transition: all 3s ease-in 0.5s;
transition: all 3s ease-in 0.5s;
background: #369;
}
//ease-out效果：
#ease-out {
-moz-transition: all 5s ease-out 0s;
-webkit-transition: all 5s ease-out 0s;
-o-transition: all 5s ease-out 0s;
transition: all 5s ease-out 0s;
background: #636;      
}
//ease-in-out效果：
#ease-in-out {
-moz-transition: all 1s ease-in-out 2s;
-webkit-transition: all 1s ease-in-out 2s;
-o-transition: all 1s ease-in-out 2s;
transition: all 1s ease-in-out 2s;
background: #3e6;
}
//linear效果：
#linear {
-moz-transition: all 6s linear 0s;
-webkit-transition: all 6s linear 0s;
-o-transition: all 6s linear 0s;
transition: all 6s linear 0s;
background: #999;
}
//cubic-bezier效果：
#cubic-bezier {
-moz-transition: all 4s cubic-bezier 1s;
-webkit-transition: all 4s cubic-bezier 1s;
-o-transition: all 4s cubic-bezier 1s;
transition: all 4s cubic-bezier 1s;
background: #6d6;
}
//hover状态下或单击click按钮后demo-box产生属性变化
#timings-demo.timings-demo-hover .demo-box,
#timings-demo:hover .demo-box {
-moz-transform: rotate(360deg) scale(1.2);
-webkit-transform: rotate(360deg) scale(1.2);
-o-transform: rotate(360deg) scale(1.2);
transform: rotate(360deg) scale(1.2);
background: #369;
border: 1px solid rgba(255,230,255,08);
-moz-border-radius: 25px;
-webkit-border-radius: 25px;
border-radius: 25px;
margin-left: 280px;
height: 30px;
line-height: 30px;
margin-bottom: 15px;
}
&lt;script type=\"text/javascript\"&gt;
/* Js Code 单击事件给dimings-demo加上一个timings-demo-hover的class名，使用demo-bxo产生属性变化 */
$(document).ready(function(){
	$(\"#timings-demo-btn\").toggle(
		function(){
		$(this).next(\"div#timings-demo\").addClass(\"timings-demo-hover\");
		},function(){
		$(this).next(\"div#timings-demo\").removeClass(\"timings-demo-hover\");
	});
});
&lt;/script&gt;</pre>
<strong>DEMO二：</strong>

这个示例是通过CSS3的transition模仿制作jQuery的slideshow效果，当然这种效果跟js和jQ制作出来的是没得比，但有时还是可以用一用的，以前腾讯就使用过这样的一个效果。我们这个DEMO实现的效果原理跟上一个DEMO极其相似，这里我们是通过select的change事件来触slideshow的CSS3属性变化，这里应用到一部分jQuery，主要是制作数字切换和前一张下一张的按钮，以及select的change事件。
<pre class=\"lang:default decode:true\">/* Html Code */
&lt;div id=\"demoSliderContainer\"&gt;
&lt;ul id=\"demoSlider\" class=\"slide-images\"&gt;
	&lt;li class=\"slide-image\"&gt;
	&lt;img src=\"/images/monstersinc.jpg\" alt=\"monsters inc\" /&gt;
	&lt;span&gt;Monsters Inc&lt;/span&gt;
	&lt;/li&gt;
	&lt;li class=\"slide-image\"&gt;
	&lt;img src=\"/images/nemo.jpg\" alt=\"nemo\" /&gt;
	&lt;span&gt;Nemo&lt;/span&gt;
	&lt;/li&gt;
	&lt;li class=\"slide-image\"&gt;
	&lt;img src=\"/images/up.jpg\" alt=\"up\" /&gt;
	&lt;span&gt;Up&lt;/span&gt;
	&lt;/li&gt;
	&lt;li class=\"slide-image\"&gt;
	&lt;img src=\"/images/walle.jpg\" alt=\"walle\" /&gt;
	&lt;span&gt;Wall-E&lt;/span&gt;
	&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=\"options\"&gt;
	&lt;a href=\"javascript:;\" class=\"prevSlide\"&gt;Prev&lt;/a&gt;
	&lt;span class=\"slide-pager\"&gt;
	&lt;a href=\"\" class=\"javascript:;\"&gt;1&lt;/a&gt;
	&lt;a href=\"\" class=\"javascript:;\"&gt;2&lt;/a&gt;
	&lt;a href=\"\" class=\"javascript:;\"&gt;3&lt;/a&gt;
	&lt;a href=\"\" class=\"javascript:;\"&gt;4&lt;/a&gt;
	&lt;/span&gt;
	&lt;a href=\"javascript:;\" class=\"nextSlide\"&gt;Next&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=\"options\"&gt;
&lt;label for=\"transitionEffect\"&gt;Transition effect :&lt;/label&gt;
&lt;select id=\"transitionEffect\"&gt;
	&lt;option value=\"transition-opacity\"&gt;opacity fade&lt;/option&gt;
	&lt;option value=\"transition-left\"&gt;left slide&lt;/option&gt;
	&lt;option value=\"transition-right\"&gt;right slide&lt;/option&gt;
	&lt;option value=\"transition-top\"&gt;top slide&lt;/option&gt;
	&lt;option value=\"transition-bottom\"&gt;bottom slide&lt;/option&gt;
	&lt;option value=\"transition-zoom\"&gt;zoom&lt;/option&gt;
	&lt;option value=\"transition-dezoom\"&gt;de-zoom&lt;/option&gt;
	&lt;option value=\"transition-cornerzoom\"&gt;corner zoom&lt;/option&gt;
	&lt;option value=\"transition-rotate\"&gt;rotate&lt;/option&gt;
&lt;/select&gt;
&lt;/div&gt;
/* CSS Code */
#demoSliderContainer {
background: #000;
-moz-box-shadow: 1px 1px 5px #000;
-webkit-box-shadow: 1px 1px 5px #000;
box-shadow: 1px 1px 5px #000;
padding: 0;
overflow: auto;
margin: 10px auto;
width: 560px;
}

#demoSlider {
border: 1px solid #000;
border-width: 5px 5px 0;
height: 220px;
margin: 0 auto;
width: 550px;
overflow: hidden;
position: relative;
}

.slide-images .slide-image {position: absolute;}
.slide-images .slide-image img {z-index: 2;}
.slide-images .slide-image span {
background: rgba(0,0,0,0.3);
-moz-border-radius: 5px 0 0 0;
-webkit-border-radius: 5px 0 0 0;
border-radius: 5px 0 0 0;
bottom: 4px;
color: rgba(255,255,255,0.8);
font-size: 14px;
font-weight: bold;
padding: 5px 10px;
position: absolute;
right: 0;
z-index: 3;
}
.slide-images .slide-image.current img {z-index: 12;}
.slide-images .slide-image.current span {z-index: 13;}
#demoSliderContainer .options {padding: 3px 10px;text-align: center;}
#demoSliderContainer .options a {
color: #91BECC;
font-family: Georgia,Serif;
font-size: 12px;
font-weight: bold;
text-decoration: none;
}
#demoSliderContainer .options a:hover {color: #D3E5EB;}
#demoSliderContainer .slide-pager a {
-moz-transition-duration: 0.5s;
-webkit-transition-duration: 0.5s;
-o-transition-duration: 0.5s;
transition-duration: 0.5s;}
#demoSliderContainer .slide-pager a.current {
background-color: #91BECC;
border-radius: 5px 5px 5px 5px;
color: black;
padding: 0 4px;}
#demoSliderContainer .options .prevSlide {float: left;}
#demoSliderContainer .options .nextSlide {float: right;}
/*transition effect*/
.slide-images .slide-image,
.slide-images .slide-image img {
-moz-transition-duration: 1.5s;
-webkit-transition-duration: 1.5s;
-otransition-duration: 1.5s;
transition-duration: 1.5s;}
.slide-images.transition-opacity .slide-image {opacity: 0;width: 0;}
.slide-images.transition-opacity .slide-image.current {opacity: 1;width: 550px;}
.slide-images.transition-left .slide-image {left: -550px;opacity: 0;}
.slide-images.transition-left .slide-image.current {left: 0;opacity: 1;}
.slide-images.transition-right .slide-image {right: -550px;opacity: 0;}
.slide-images.transition-right .slide-image.current {right: 0;opacity: 1;}
.slide-images.transition-top .slide-image {opacity: 0;top: -220px;}
.slide-images.transition-top .slide-image.current{opacity: 1;top: 0;}
.slide-images.transition-bottom .slide-image {opacity: 0;bottom: -220px;}
.slide-images.transition-bottom .slide-image.current {opacity: 1;bottom: 0;}
.slide-images.transition-cornerzoom .slide-image {opacity: 0;}
.slide-images.transition-cornerzoom .slide-image.current {opacity: 1;}
.slide-images.transition-cornerzoom .slide-image img {width: 0;}
.slide-images.transition-cornerzoom .slide-image.current img {width: 550px;}
.slide-images.transition-zoom .slide-image {opacity: 0;}
.slide-images.transition-zoom .slide-image.current {opacity: 1;}
.slide-images.transition-zoom .slide-image img {left: -275px;position: relative;top: -110px;width: 1100px;}
.slide-images.transition-zoom .slide-image.current img {left: 0;top: 0;width: 550px;}
.slide-images.transition-dezoom .slide-image {
-moz-box-shadow: 2px 2px 8px black;
-webkit-box-shadow: 2px 2px 8px black;
box-shadow: 2px 2px 8px black;
opacity: 0;
}
.slide-images.transition-dezoom .slide-image.current {opacity: 1;}
.slide-images.transition-dezoom .slide-image img {left: 275px;position: relative;top: 110px;width: 0;}
.slide-images.transition-dezoom .slide-image.current img {left: 0;top: 0;width: 550px;}
.slide-images.transition-rotate .slide-image {opacity: 0;}
.slide-images.transition-rotate .slide-image.current {opacity: 1;}
.slide-images.transition-rotate .slide-image img {width: 550;height: 220px;position: relative;left: -550px;top: -220px;}
.slide-images.transition-rotate .slide-image.current img {
width: 550px;
height: 220px;
left: 0;
top: 0;
-moz-transform: rotate(1440deg);
-webkit-transform: rotate(1440deg);
-o-transform: rotate(1440deg);
transform: rotate(1440deg);
}
#options {margin: 20px auto;padding: 5px;width: 550px;}
/* Js Code */
&lt;script type=\"text/javascript\"&gt;
$(document).ready(function(){
$(\".slide-images\").each(function(){
var slider = $(this);
var slides = $(\".slide-image\",slider);
var sliderPages = $(\".slide-pager\");

//Slide Navigation

var currentSlideNum = 0;
slides.removeClass(\"current\");
slides.eq(currentSlideNum).addClass(\"current\");
sliderPages.each(function(){
var pages = $(\"a\",this);
pages.removeClass(\"current\");
pages.eq(currentSlideNum).addClass(\"current\");
});

var goToSlide = function(slideNum) {
slides.eq(currentSlideNum).removeClass(\"current\");
slides.eq(slideNum).addClass(\"current\");
sliderPages.each(function(){
var pages = $(\"a\", this);
pages.eq(currentSlideNum).removeClass(\"current\");
pages.eq(slideNum).addClass(\"current\");
});
currentSlideNum = slideNum;
};

var nextSlide = function() {
var nextSlideNum = currentSlideNum + 1;
if(nextSlideNum &gt;= slides.size()) 
nextSlideNum = 0;
goToSlide(nextSlideNum);

}; 

var prevSlide = function() {
var prevSlideNum = currentSlideNum - 1;
if(prevSlideNum &lt; 0)
prevSlideNum = slides.size() - 1;
goToSlide(prevSlideNum);

};

//transition effects
var setTransitionEffect = function(transitionEffect) {
slider.attr(\"class\",\"slide-images \"+ transitionEffect);
};

$(\"#transitionEffect\").change(function(){
setTransitionEffect($(this).val());
}).change();

//Navigation binding

$(\".prevSlide\").click(prevSlide);
$(\".nextSlide\").click(nextSlide);
$(\".slide-pager a\").each(function(i){
if(i &gt;= slides.size()) return false;
$(this).click(function(){
goToSlide(i);
});
});

//Auto next slide

var lastHumanNav = 0;
$(\".prevSlide, .nextSlide, .slide-pager a\").click(function(){
lastHumanNav = new Date().getTime();
});
setInterval(function(){
var now = new Date().getTime();
if(now - lastHumanNav &gt; 5000)
nextSlide();
},5000);
});
});</pre>
<strong>文章原始出处：</strong><a href=\"http://www.w3cplus.com/content/css3-transition\" target=\"_blank\">http://www.w3cplus.com/content/css3-transition </a>",
          "wp:post_id": "761",
          "wp:post_date": "2013-03-11 13:37:07",
          "wp:post_date_gmt": "2013-03-11 05:37:07",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "css3%e5%b1%9e%e6%80%a7transition%e5%b9%b3%e6%bb%91%e8%bf%87%e6%b8%a1",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "css3",
            "#cdata-section": "CSS3"
          }
        },
        {
          "title": "CSS3属性:Animation动画",
          "link": "http://www.pernav.com/css3%e5%b1%9e%e6%80%a7animation%e5%8a%a8%e7%94%bb/",
          "pubDate": "Mon, 11 Mar 2013 05:53:38 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=767"
          },
          "content:encoded": "Animation字面上的意思，我们就知道是“动画”的意思。但CSS3中的Animation与HTML5中的Canvas绘制动画又不同，Animation只应用在页面上已存在的DOM元素上，而且他跟Flash和JavaScript以及jQuery制作出来的动画效果又不一样，因为我们使用CSS3的Animation制作动画我们可以省去复杂的js,jquery代码.

在开始介绍Animation之前我们有必要先来了解一个特殊的东西，那就是\"Keyframes\",我们把他叫做“关键帧”，玩过flash的朋友可能对这个东西并不会陌生。下面我们就一起来看看这个“Keyframes”是什么东西。前面我们在使用transition制作一个简单的transition效果时，我们包括了初始属性和最终属性，一个开始执行动作时间和一个延续动作时间以及动作的变换速率，其实这些值都是一个中间值，如果我们要控制的更细一些，比如说我要第一个时间段执行什么动作，第二个时间段执行什么动作（换到flash中说，就是第一帧我要执行什么动作，第二帧我要执行什么动作），这样我们用Transition就很难实现了，此时我们也需要这样的一个“关键帧”来控制。那么CSS3的Animation就是由“keyframes”这个属性来实现这样的效果。

Keyframes具有其自己的语法规则，他的命名是由\"@keyframes\"开头，后面紧接着是这个“动画的名称”加上一对花括号“{}”，括号中就是一些不同时间段样式规则，有点像我们css的样式写法一样。对于一个\"@keyframes\"中的样式规则是由多个百分比构成的，如“0%”到\"100%\"之间，我们可以在这个规则中创建多个百分比，我们分别给每一个百分比中给需要有动画效果的元素加上不同的属性，从而让元素达到一种在不断变化的效果，比如说移动，改变元素颜色，位置，大小，形状等，不过有一点需要注意的是，我们可以使用“fromt”“to”来代表一个动画是从哪开始，到哪结束，也就是说这个 \"from\"就相当于\"0%\"而\"to\"相当于\"100%\",值得一说的是，其中\"0%\"不能像别的属性取值一样把百分比符号省略，我们在这里必须加上百分符号（“%”）如果没有加上的话，我们这个keyframes是无效的，不起任何作用。因为keyframes的单位只接受百分比值。<b>Keyframes可以指定任何顺序排列来决定Animation动画变化的关键位置。</b>
<h4><span style=\"color: #ff6600;\"><b>1、语法：</b></span></h4>
<pre class=\"lang:default decode:true\">keyframes-rule: '@keyframes' IDENT '{' keyframes-blocks '}';
keyframes-blocks: [ keyframe-selectors block ]* ;
keyframe-selectors: [ 'from' | 'to' | PERCENTAGE ] [ ',' [ 'from' | 'to' | PERCENTAGE ] ]*;</pre>
<pre class=\"lang:default decode:true\">@keyframes IDENT {
	from {Properties:Properties value;}
	Percentage {Properties:Properties value;}
	to {Properties:Properties value;}}
或者全部写成百分比的形式：
@keyframes IDENT{
	0% {Properties:Properties value;}
	Percentage {Properties:Properties value;}
	100% {Properties:Properties value;}}</pre>
其中IDENT是一个动画名称，你可以随便取，当然语义化一点更好，Percentage是百分比值，我们可以添加许多个这样的百分比，Properties为css的属性名，比如说left,background等，value就是相对应的属性的属性值。值得一提的是，我们from和to 分别对应的是0%和100%。这个我们在前面也提到过了。到目前为止支技animation动画的只有webkit内核的浏览器，所以我需要在上面的基础上加上-webkit前缀，据说Firefox5可以支持css3的 animation动画属性。
<h4><span style=\"color: #ff6600;\"><strong>2、W3C官网的实例：</strong></span></h4>
<pre class=\"lang:default decode:true\">@-webkit-keyframes 'wobble' {
	0% {margin-left: 100px;background: green;}
	40% {margin-left: 150px;background: orange;}
	60% {margin-left: 75px;background: blue;}
	100% {margin-left: 100px;background: red;}
}</pre>
这里我们定义了一个叫“wobble”的动画，他的动画是从0%开始到100%时结束，从中还经历了一个40%和60%两个过程，上面代码具体意思是：wobble动画在0%时元素定位到left为100px的位置背景色为green，然后40%时元素过渡到left为150px的位置并且背景色为orange，60%时元素过渡到left为75px的位置,背景色为blue，最后100%结束动画的位置元素又回到起点left为100px处,背景色变成red。
<h4><span style=\"color: #ff6600;\"><b>3、Keyframes定义好了以后，我们需要怎么去调用刚才定义好的动画“wobble”</b></span></h4>
CSS3的animation类似于transition属性，他们都是随着时间改变元素的属性值。他们主要区别是transition需要触发一个事件(hover事件或click事件等)才会随时间改变其css属性；而animation在不需要触发任何事件的情况下也可以显式的随着时间变化来改变元素css的属性值，从而达到一种动画的效果。这样我们就可以直接在一个元素中调用animation的动画属性,基于这一点，css3的animation就需要明确的动画属性值，这也就是回到我们上面所说的，我们需要keyframes来定义不同时间的css属性值,达到元素在不同时间段变化的效果。
<h4><span style=\"color: #ff6600;\"><b>4、给一个元素调用animation属性</b></span></h4>
<pre class=\"lang:default decode:true\">.demo1 {
width: 50px;
height: 50px;
margin-left: 100px;
background: blue;
-webkit-animation-name:'wobble';/*动画属性名，也就是我们前面keyframes定义的动画名*/
-webkit-animation-duration: 10s;/*动画持续时间*/
-webkit-animation-timing-function: ease-in-out; /*动画频率，和transition-timing-function是一样的*/
-webkit-animation-delay: 2s;/*动画延迟时间*/
-webkit-animation-iteration-count: 10;/*定义循环资料，infinite为无限次*/
-webkit-animation-direction: alternate;/*定义动画方式*/
}</pre>
Animation动画效果将会影响元素相对应的css值，在整个动画过程中，元素的变化属性值完全是由animation来控制，动画后面的会覆盖前面的属性值。如上面例子：因为我们这个demo只是在不同的时间段改变了demo1的背景色和左边距，其默认值是：margin-left:100px;background: blue；但当我们在执行动画0%时，margin-left:100px,background:green；当执行到40%时，属性变成了：margin-left:150px;background:orange;当执行到60%时margin-left:75px;background:blue;当动画 执行到100%时：margin-left:100px;background: red;此时动画将完成，那么margin-left和background两个属性值将是以100%时的为主,他不会产生叠加效果，只是一次一次覆盖前一次出将的css属性。就如我们平时的css一样，最后出现的权根是最大的。当动画结束后，样式回到默认效果。
<h4><span style=\"color: #ff6600;\"><b>5、在animation主要有以下几种：animation-name;animation-duration;animation-timing-function;animation-delay;animation-iteration-count;animation-direction;animation-play-state。</b></span></h4>
<b>一、animation-name:</b>
<pre class=\"lang:default decode:true\">animation-name: none | IDENT[,none | IDENT]*;</pre>
animation-name:是用来定义一个动画的名称，其主要有两个值：IDENT是由Keyframes创建的动画名，换句话说此处的IDENT要和Keyframes中的IDENT一致，如果不一致,将不能实现任何动画效果；none为默认值，当值为none时，将没有任何动画效果。另外我们这个属性跟前面所讲的transition一样，我们可以同时附几个animation给一个元素，我们只需要用逗号“，”隔开。&lt;/p&gt;

<b>二、animation-duration：</b>
<pre class=\"lang:default decode:true\">animation-duration: &lt;time&gt;[,&lt;time&gt;]*</pre>
animation-duration是用来指定元素播放动画所持续的时间长，取值:<time>为数值，单位为s （秒.）其默认值为“0”。这个属性跟transition中的transition-duration使用方法是一样的。</time>

<b>三、animation-timing-function:</b>
<pre class=\"lang:default decode:true\">animation-timing-function:ease | linear | ease-in | ease-out | ease-in-out | cubic-bezier(&lt;number&gt;, &lt;number&gt;, &lt;number&gt;, &lt;number&gt;) [, ease | linear | ease-in | ease-out | ease-in-out | cubic-bezier(&lt;number&gt;, &lt;number&gt;, &lt;number&gt;, &lt;number&gt;)]*</pre>
animation-timing-function:是指元素根据时间的推进来改变属性值的变换速率，说得简单点就是动画的播放方式。他和transition中的transition-timing-function一样，具有以下六种变换方式：ease;ease-in;ease-in-out;linear;cubic-bezier。

<strong>四、animation-delay:</strong>
<pre class=\"lang:default decode:true\">animation-delay: &lt;time&gt;[,&lt;time&gt;]*</pre>
animation-delay:是用来指定元素动画开始时间。取值为&lt;time&gt;为数值，单位为s(秒)，其默认值也是0。这个属性和transition-delayy使用方法是一样的。

<strong>五、animation-iteration-count</strong>
<pre class=\"lang:default decode:true\">animation-iteration-count:infinite | &lt;number&gt; [, infinite | &lt;number&gt;]*</pre>
animation-iteration-count是用来指定元素播放动画的循环次数，其可以取值&lt;number&gt;为数字，其默认值为“1”；infinite为无限次数循环。

<strong>六、animation-direction</strong>
<pre class=\"lang:default decode:true\">animation-direction: normal | alternate [, normal | alternate]*</pre>
animation-direction是用来指定元素动画播放的方向，其只有两个值，默认值为normal，如果设置为normal时，动画的每次循环都是向前播放；另一个值是alternate，他的作用是，动画播放在第偶数次向前播放，第奇数次向反方向播放。

<strong>七、animation-play-state</strong>
<pre class=\"lang:default decode:true\">animation-play-state:running | paused [, running | paused]*</pre>
animation-play-state主要是用来控制元素动画的播放状态。其主要有两个值，running和paused其中running为默认值。他们的作用就类似于我们的音乐播放器一样，可以通过paused将正在播放的动画停下了，也可以通过running将暂停的动画重新播放，我们这里的重新播放不一定是从元素动画的开始播放，而是从你暂停的那个位置开始播放。另外如果暂时了动画的播放，元素的样式将回到最原始设置状态。这个属性目前很少内核支持，所以只是稍微提一下。
<h4><span style=\"color: #ff6600;\"><b>6、综合上面animation中的各个属性的语法和取值，animation属性速记法：</b></span></h4>
<pre class=\"lang:default decode:true\">animation:[&lt;animation-name&gt; || &lt;animation-duration&gt; || &lt;animation-timing-function&gt; || &lt;animation-delay&gt; || &lt;animation-iteration-count&gt; || &lt;animation-direction&gt;] [, [&lt;animation-name&gt; || &lt;animation-duration&gt; || &lt;animation-timing-function&gt; || &lt;animation-delay&gt; || &lt;animation-iteration-count&gt; || &lt;animation-direction&gt;] ]*</pre>
<h4><span style=\"color: #ff6600;\"> 7、DEMO一：发光变色的button</span></h4>
<pre class=\"lang:default decode:true \">/* HTML Code */
&lt;a href=\"\" class=\"btn\"&gt;发光的button&lt;/a&gt;
/* CSS Code */
/*给这个按钮创建一个动名名称：buttonLight，然后在每个时间段设置不同的background,color来达到变色效果，改变box-shadow来达到发光效果*/
@-webkit-keyframes 'buttonLight'{
	from {
	background: rgba(96, 203, 27,0.5);
	-webkit-box-shadow: 0 0 5px rgba(255, 255, 255, 0.3) inset, 0 0 3px rgba(220, 120, 200, 0.5);
	color: red;
	}
	25% {
	background: rgba(196, 203, 27,0.8);
	-webkit-box-shadow: 0 0 10px rgba(255, 155, 255, 0.5) inset, 0 0 8px rgba(120, 120, 200, 0.8);
	color: blue;
	}
	50% {
	background: rgba(196, 203, 127,1);
	-webkit-box-shadow: 0 0 5px rgba(155, 255, 255, 0.3) inset, 0 0 3px rgba(220, 120, 100, 1);
	color: orange;
	}
	75% {
	background: rgba(196, 203, 27,0.8);
	-webkit-box-shadow: 0 0 10px rgba(255, 155, 255, 0.5) inset, 0 0 8px rgba(120, 120, 200, 0.8); 
	color: black;
	}
	to {
	background: rgba(96, 203, 27,0.5);
	-webkit-box-shadow: 0 0 5px rgba(255, 255, 255, 0.3) inset, 0 0 3px rgba(220, 120, 200, 0.5);
	color: green;
	}
	}
a.btn {
/*按钮的基本属性*/
background: #60cb1b;
font-size: 16px;
padding: 10px 15px;
color: #fff;
text-align: center;
text-decoration: none;
font-weight: bold;
text-shadow: 0 -1px 1px rgba(0,0,0,0.3);
-moz-border-radius: 5px;
-webkit-border-radius: 5px;
border-radius: 5px;
-moz-box-shadow: 0 0 5px rgba(255, 255, 255, 0.6) inset, 0 0 3px rgba(220, 120, 200, 0.8);
-webkit-box-shadow: 0 0 5px rgba(255, 255, 255, 0.6) inset, 0 0 3px rgba(220, 120, 200, 0.8);
box-shadow: 0 0 5px rgba(255, 255, 255, 0.6) inset, 0 0 3px rgba(220, 120, 200, 0.8);
/*调用animation属性，从而让按钮在载入页面时就具有动画效果*/
-webkit-animation-name: \"buttonLight\"; /*动画名称，需要跟@keyframes定义的名称一致*/
-webkit-animation-duration: 5s;/*动画持续的时间长*/
-webkit-animation-iteration-count: infinite;/*动画循环播放的次数*/
}</pre>
<h4><span style=\"color: #ff6600;\"><strong> 8、Demo二：方形旋转变成圆型</strong></span></h4>
<pre class=\"lang:default decode:true \">/* HTML Code */
&lt;a href=\"#\" class=\"box\"&gt;&lt;/a&gt;
&lt;span class=\"click-btn\"&gt;Click&lt;/span&gt;
/* CSS Code */
 /*定义方型转化为圆型的动画round*/
@-webkit-keyframes 'round' {
	from{
	-webkit-transform: rotate(36deg);
	-webkit-border-radius: 2px;
	}
	10%{
	-webkit-transform: rotate(72deg);
	-webkit-border-radius: 4px;
	}
	20% {
	-webkit-transform: rotate(108deg);
	-webkit-border-radius: 6px;
	}
	30% {
	-webkit-transform: rotate(144deg);
	-webkit-border-radius: 9px;
	}
	40%{
	-webkit-transform: rotate(180deg);
	-webkit-border-radius: 12px;
	}
	50%{
	-webkit-transform: rotate(216deg);
	-webkit-border-radius: 14px;
	}
	60% {
	-webkit-transform: rotate(252deg);
	-webkit-border-radius: 16px;
	}
	70% {
	-webkit-transform: rotate(288deg);
	-webkit-border-radius: 19px;
	}
	80%{
	-webkit-transform: rotate(324deg);
	-webkit-border-radius: 22px;
	}
	to {
	-webkit-transform: rotate(360deg);
	-webkit-border-radius: 25px;
	}
}
/*给方型box一个初步样式*/
a.box {
display: block;
width: 50px;
height: 50px;
background: red;
margin-bottom: 20px;
}
/*圆型box的样式，并在这里应用animation*/
a.round {
-webkit-border-radius: 25px;
-moz-border-radius: 25px;
border-radius: 25px;
background: green;
-webkit-animation-name: 'round'; /*动画名称*/
-webkit-animation-duration: 60s;/*播放一次所持续时间*/
-webkit-animation-timing-function: ease;/*动画播放频率*/
-webkit-animation-iteration-count: infinite;/*动画播放次涒为无限次*/
}

/*click button效果*/
.click-btn {
background: rgba(125,220,80,0.8);
-moz-border-radius: 5px;
-webkit-border-radius: 5px;
border-radius: 5px;
-webkit-box-shadow: inset 0 0 8px rgba(255,255,255,0.8),0 0 10px rgba(10,255,120,0.3);
-moz-box-shadow: inset 0 0 8px rgba(255,255,255,0.8),0 0 10px rgba(10,255,120,0.3);
box-shadow: inset 0 0 8px rgba(255,255,255,0.8),0 0 10px rgba(10,255,120,0.3);
padding: 5px 10px;
color: #369;
font-size: 16px;
font-weight: bold;
text-align: center;
text-shadow: 0 -1px 0 rgba(0,0,0,0.5);
cursor: pointer;
}
/* jQuery Code */
&lt;script type=\"text/javascript\"&gt;
$(document).ready(function(){
	$(\".click-btn\").click(function(){
		$(this).siblings().addClass(\"round\");
	});
});
&lt;/script&gt;</pre>
<strong>文章原始出处：</strong><a href=\"http://www.w3cplus.com/content/css3-animation\" target=\"_blank\">http://www.w3cplus.com/content/css3-animation</a>",
          "wp:post_id": "767",
          "wp:post_date": "2013-03-11 13:53:38",
          "wp:post_date_gmt": "2013-03-11 05:53:38",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "css3%e5%b1%9e%e6%80%a7animation%e5%8a%a8%e7%94%bb",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "css3",
            "#cdata-section": "CSS3"
          }
        },
        {
          "title": "CSS3属性:Border-color边框多颜色",
          "link": "http://www.pernav.com/css3%e5%b1%9e%e6%80%a7border-color%e8%be%b9%e6%a1%86%e5%a4%9a%e9%a2%9c%e8%89%b2/",
          "pubDate": "Mon, 11 Mar 2013 06:01:26 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=770"
          },
          "content:encoded": "CSS3中有关于Border的属性一共有三个：<b>圆角border-radius，图片边框border-image,边框多颜色border-color，</b>其中圆角border-radius是常用的一个属性,今天我们主要来学习border-color的使用。

<b>A、在CSS2中，我们可以把border-color同时应用到不同的边框上，也可以分别在各边上色，如：</b>
<pre class=\"lang:default decode:true\">border-color: &lt;color&gt;/*其中可以上一个值，也可以是多个值，具体我在这里不多说了，大家来时用到的也特别多*/
/*我们可以分别给各边上色*/
border-top-color: &lt;color&gt;/*给上边框上色*/
border-right-color: &lt;color&gt; /*给右边框上色*/
border-bottom-color:&lt;color&gt; /*给下边框上色*/
border-left-color: &lt;color&gt; /*给左框上色*/</pre>
上面展示的是给元素边框上色的方法，大家都知道这样可以给边框上唯一色。可是如果我们想给边框添加不同的颜色，比如说给边框添加一个渐变色，或者说一个彩色，那么我们前面的方法就无能为力了，那怎么办呢?为了达到这样的效果，CSS3就推出了其自己的border-color属性，不过到目前为止只有Firefox 3.0+的浏览支持这个属性。现在我们来看看其语法的书写规则：
<pre class=\"lang:default decode:true\">-moz-border-top-colors: &lt;color&gt; &lt;color&gt; &lt;color&gt;*; /*顶边边框*/
-moz-border-right-colors:&lt;color&gt; &lt;color&gt; &lt;color&gt;*; /*右边边框*/
-moz-border-bottom-colors: &lt;color&gt; &lt;color&gt; &lt;color&gt;*; /*底边边框*/
-moz-border-left-colors: &lt;color&gt; &lt;color&gt; &lt;color&gt;*; /*左边边框*/</pre>
我们把元素四边分开了书写，但这里有一点和CSS2的不同之处，在CSS3中我们使用的是border-top-colors,border-right-colors,border-bottom-colors,border-left-colors，当中的colors是个复数，而在CSS2中都是border-top-color,border-right-color,border-bottom-color,border-left-color。这一点大家一定要记住了，在CSS3中是“colors”因为我们是应用多色。

<strong>这里大家一定会问，我们假如在各边应用的颜色相同时，能不能不分开写呢？直接写成：</strong>
<pre class=\"lang:default decode:true\">-moz-border-colors: &lt;color&gt; &lt;color&gt; &lt;color&gt; &lt;color&gt;*;/*这样缩写能行吗？这种写法是错误的！！！*/</pre>
使用css3的border-color属性时，如果你的boder宽度设置了X px,那么你可以在这个边框上使用X种颜色，此时每一个颜色就是一个px。如果你的border宽度设置了10px，而你只运用了三四个颜色，那么最后一个颜色将会填充到后面的宽度上。
<h4><span style=\"color: #ff6600;\"><strong>B、一般的实例</strong></span></h4>
<pre class=\"lang:default decode:true \">.demo {
width: 200px;
height: 100px;
border: 5px solid transparent;
-moz-border-top-colors: red blue white white black;
-moz-border-right-colors: red blue white white black;
-moz-border-bottom-colors: red blue white white black;
-moz-border-left-colors: red blue white white black; 
}</pre>
<h4><span style=\"color: #ff6600;\"><strong> C、利用这个属性制作渐变的边框效果</strong></span></h4>
<pre class=\"lang:default decode:true\">.demo1 {
width: 200px;
height: 100px;
border: 10px solid transparent;
border-radius: 15px 0 15px 0;
-moz-border-top-colors:#a0a #909 #808 #707 #606 #505 #404 #303;
-moz-border-right-colors:#a0a #909 #808 #707 #606 #505 #404 #303;
-moz-border-bottom-colors:#a0a #909 #808 #707 #606 #505 #404 #303;
-moz-border-left-colors:#a0a #909 #808 #707 #606 #505 #404 #303;
}</pre>
<strong>文章原始出处：</strong> <a href=\"http://www.w3cplus.com/content/css3-border-color\" target=\"_blank\"><strong>http://www.w3cplus.com/content/css3-border-color</strong></a>",
          "wp:post_id": "770",
          "wp:post_date": "2013-03-11 14:01:26",
          "wp:post_date_gmt": "2013-03-11 06:01:26",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "css3%e5%b1%9e%e6%80%a7border-color%e8%be%b9%e6%a1%86%e5%a4%9a%e9%a2%9c%e8%89%b2",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "css3",
            "#cdata-section": "CSS3"
          },
          "wp:postmeta": {
            "wp:meta_key": "_edit_last",
            "wp:meta_value": "1"
          }
        },
        {
          "title": "CSS3属性:Border-image边框图片",
          "link": "http://www.pernav.com/css3%e5%b1%9e%e6%80%a7border-image%e8%be%b9%e6%a1%86%e5%9b%be%e7%89%87/",
          "pubDate": "Mon, 11 Mar 2013 06:16:09 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=773"
          },
          "content:encoded": "以前我们border只能简单的设置一些纯色或几种简单的线型（如solid,dotted,double,dashed等）那么我们以后就可以通过border-image这个属性改变以前的一切，可以给边框设置不同的图片效果。
<h4><span style=\"color: #ff6600;\"><b>A、语法：</b></span></h4>
<pre class=\"lang:default decode:true\">border-image ： none | &lt;image&gt; [ &lt;number&gt; | &lt;percentage&gt;]{1,4} [ / &lt;border-width&gt;{1,4} ]? [ stretch | repeat | round ]{0,2}</pre>
<h4><span style=\"color: #ff6600;\"><b>B、参数：</b></span></h4>
<strong>1、none:</strong>是border-image的默认值，如果取值为none时，表示边框无背景图片；
<strong>2、&lt;image&gt;：</strong>设置border-image的背景图片，这个跟background-image一样，使用绝对或相对的url地址，来指定背景图片；
<strong>3、&lt;number&gt;：</strong>number是一个数值，用来设置边框的宽度，其单位是px，其实就像border-width一样取值，可以使用1~4个值，其具体表示四个方位的值，大家可以参考border-width的设置方式；
<strong>4、&lt;percntage&gt;：</strong>percntage也是用来设置边框的宽度，跟number不同之处是，其使用的是百分比值来设置边框宽度； 5、stretch,repeat,round:他们是用来设置边框背景图片的铺放方式，类似于background-position，其中stretch是拉伸，repeat是重复，round是平铺，stretch为默认值。

大家看到上面的参数介绍后一定会想起background-image这个属性。是的，这两者之间确实有一些类似之处，其中包括对图片的引用和排列方式都是一样的原理。为了更好的理解,先暂时把border-image在语法的表达形式进行属性的分解来阐述（实际应用中是不能分解的），这样就可以把border-image分解为：

<strong>1、引入图片：</strong>border-image-source;
<strong>2、切割引入的图片：</strong>border-image-slice:
<strong>3、边框的宽度：</strong>border-image-width；
<strong>4、图片的排列方式：</strong>border-image-repeat；
<h4><span style=\"color: #ff6600;\"><strong>C、四个属性的使用方法和其各自的特性</strong></span></h4>
<strong>一：border-image-source</strong>
<pre class=\"lang:default decode:true\">border-image-source:url(image url);/*image url可以是相对地址也可以是绝对地址*/</pre>
border-image-source跟CSS2中background-image属性相似，也是通过url()调用背景图片，图片的路径可以是相对地址也可以是绝对地址，当然你不想使用背景图片你也可以把值设置为none，即：border-image:none；其默认值就是none。

<strong>二、border-image-slice</strong>
<pre class=\"lang:default decode:true\">border-image-slice: [ &lt;number&gt; | &lt;percentage&gt;]{1,4}&amp;&amp; fill?</pre>
border-image-slice是用来分解引入进来的背景图片，这个参数相对来说比较复杂和特别，<strong>主要表现在以下几点：</strong>

<strong>1、其取值支持:&lt;number&gt; | &lt;percentage&gt;</strong>其中number是没有单位的，专指像素px，因为其默认的单位就是像素px，所以在使用number时不需要加上单位，如果加上了单位反而是错误的写法。另外我们除了直接用nuember来设置外，我们还可以使用百分比值来表示，百分比的值是相对于边框背景图片而言的，例如边框图片的大小是300px*240px,我们取百分比为25% 30% 15% 20%，那么它们实际对应的效果就是剪切了图片的60px 90px 36px 60px的四边大小.

<strong>2、剪切的特性(slice)</strong>，在border-image中slice是一个关键部分，也是让人难以理解的部分。如果你用过CSS3中的clip属性，那么在理解border-image-slice来说相对会轻松一些。border-image-slice虽然表意上说不是剪切，但在我们实际应用中他就是一种纯粹的剪切，他把我们通过border-image-source取到的图片切成了九份，在像background-image一样重新布置。
<pre class=\"lang:default decode:true\">div {
border: double green 12px;
-moz-border-image: url(\"../image/border.png\") 124;
-webkit-border-image: url(\"../image/border.png\") 124;
-o-border-image: url(\"../image/border.png\") 124;
border-image: url(\"../image/border.png\") 124;
}</pre>
从上面的示意中，他在距边框背景图的top,right,bottom,left四边的124px分别切了一刀（蓝色细线为剪切线），这样一来我们就把背景图切成了九个部分，很多地方把他称为“九宫格”。

<strong>border-top-image,border-right-image,border-bottom-image,border-left-image四个黄色区域在border-image中是属于展示效果的区域。</strong>上下区域border-top-image和border-bottom-image区域受到水平方向效果影响：如果是repeat则此区域图片会水平重复，如果是round则水平平铺；如果是stretch则被水平拉伸.

<strong>a.水平round效果:</strong>
<pre class=\"lang:default decode:true\">.border-image {
width: 150px;
height: 100px;
border: 27px solid orange;
}
.border-image-round {
-webkit-border-image: url(\"../images/border.png\") 27 round stretch;
-moz-border-image: url(\"../images/border.png\") 27 round stretch;
-o-border-image: url(\"../images/border.png\") 27 round stretch;
border-image: url(\"../images/border.png\") 27 round stretch;
}</pre>
<strong> b.水平repeat效果</strong>
<pre class=\"lang:default decode:true\">.border-image-repeat {
-webkit-border-image: url(\"../images/border.png\") 27 repeat stretch;
-moz-border-image: url(\"../images/border.png\") 27 repeat stretch;
-o-border-image: url(\"../images/border.png\") 27 repeat stretch;
border-image: url(\"../images/border.png\") 27 repeat stretch;
}</pre>
<strong> c.水平拉伸效果</strong>
<pre class=\"lang:default decode:true\">.border-image-stretch {
-webkit-border-image: url(\"../images/border.png\") 27 stretch round;
-moz-border-image: url(\"../images/border.png\") 27 stretch round;
-o-border-image: url(\"../images/border.png\") 27 stretch round;
border-image: url(\"../images/border.png\") 27 stretch round;
}</pre>
<strong> d.垂直方向的round效果</strong>
<pre class=\"lang:default decode:true\">.border-image-round-val {
-webkit-border-image: url(\"../images/border.png\") 27 stretch round;
-moz-border-image: url(\"../images/border.png\") 27 stretch round;
-o-border-image: url(\"../images/border.png\") 27 stretch round;
border-image: url(\"../images/border.png\") 27 stretch round; 
}</pre>
<strong> e.垂直方向的repeat效果</strong>
<pre class=\"lang:default decode:true\">.border-image-repeat-val {
-webkit-border-image: url(\"../images/border.png\") 27 stretch repeat;
-moz-border-image: url(\"../images/border.png\") 27 stretch repeat;
-o-border-image: url(\"../images/border.png\") 27 stretch repeat;
border-image: url(\"../images/border.png\") 27 stretch repeat; 
}</pre>
<strong> f.垂直方向的stretch效果</strong>
<pre class=\"lang:default decode:true\">.border-image-stretch-val {
-webkit-border-image: url(\"../images/border.png\") 27 round stretch;
-moz-border-image: url(\"../images/border.png\") 27 round stretch;
-o-border-image: url(\"../images/border.png\") 27 round stretch;
border-image: url(\"../images/border.png\") 27 round stretch; 
}</pre>
<h4><span style=\"color: #ff6600;\"><strong> 三：border-image-width</strong></span></h4>
<pre class=\"lang:default decode:true\">border-image-width: [ &lt;length&gt; | &lt;percentage&gt; | &lt;number&gt; | auto ]{1,4}</pre>
border-image-width就是border-width，用来设置边框的宽度，我们也可以直接用border-width来代替border-image-width的，具体使用方法不用我说了，因为会css的没有人不会不知道border-width的使用吧，如果有的话，那真的是杯具了。
<h4><span style=\"color: #ff6600;\"><strong>四：border-image-repeat</strong></span></h4>
<pre class=\"lang:default decode:true\">border-image-repeat: [ stretch | repeat | round ]{1,2}</pre>
border-image-repeat是用来指定border-image的排列方式，这个属性设置参数和其他的不一样，border-image-repeat不遵循top,right,bottom,left的方位原则，他只接受两个（或一个）参数值，第一个表示水平方向，第二个表示垂直方向；当取值为一个值时，表示水平和垂直方向的排列方式相同。同时其默认值是stretch，如果你省略不取值时，那么水平和垂直方向都是以stretch排列。

为了更好的理解border-image-repeat的使用，下面将结合border-image-slice在上面的基础上看看round,repeat,stretch的实现原理

<strong>1、Round效果：</strong>
<pre class=\"lang:default decode:true \">.border-image-round-hv {
-webkit-border-image: url(\"../images/border.png\") 27 round;
-moz-border-image: url(\"../images/border.png\") 27 round;
-o-border-image: url(\"../images/border.png\") 27 round;
border-image: url(\"../images/border.png\") 27 round; 
}</pre>
<strong> 2、Repeat效果</strong>
<pre class=\"lang:default decode:true \">.border-image-repeat-hv {
-webkit-border-image: url(\"../images/border.png\") 27 repeat;
-moz-border-image: url(\"../images/border.png\") 27 repeat;
-o-border-image: url(\"../images/border.png\") 27 repeat;
border-image: url(\"../images/border.png\") 27 repeat; 
}</pre>
<strong> 3、Stretch效果</strong>
<pre class=\"lang:default decode:true \">.border-image-stretch-hv {
-webkit-border-image: url(\"../images/border.png\") 27 stretch;
-moz-border-image: url(\"../images/border.png\") 27 stretch;
-o-border-image: url(\"../images/border.png\") 27 stretch;
border-image: url(\"../images/border.png\") 27 stretch;
}</pre>
<h4><span style=\"color: #ff6600;\"><strong> 五、为了能更好的在各浏览器下显示正常，大家在实际应用中需要加上各自的前缀</strong></span></h4>
<pre class=\"lang:default decode:true \">/*Mozilla内核Firefox*/
-moz-border-image:&lt;‘border-image-source’&gt; || &lt;‘border-image-slice’&gt; [ / &lt;‘border-image-width’&gt;] || &lt;‘border-image-repeat’&gt;
/*Webkit内核Safari and Chrome*/
-webkit-border-image:&lt;‘border-image-source’&gt; || &lt;‘border-image-slice’&gt; [ / &lt;‘border-image-width’&gt;] || &lt;‘border-image-repeat’&gt;
/*Opera*/
-oborder-image:&lt;‘border-image-source’&gt; || &lt;‘border-image-slice’&gt; [ / &lt;‘border-image-width’&gt;] || &lt;‘border-image-repeat’&gt;
/*W3C标准*/
border-image:&lt;‘border-image-source’&gt; || &lt;‘border-image-slice’&gt; [ / &lt;‘border-image-width’&gt;] || &lt;‘border-image-repeat’&gt;</pre>
<strong>DEMO一：制作Button</strong>
<pre class=\"lang:default decode:true \">/* HTML code */
&lt;a href=\"\" class=\"border-image-btn\"&gt;Border-image Button&lt;/a&gt;
/* CSS Code */
.border-image-btn {
border: 18px solid green;
border-width: 0 18px;
-webkit-border-image: url(\"../images/button_sprite.png\") 0 18 50 18;
-moz-border-image: url(\"../images/button_sprite.png\") 0 18 50 18;
-o-border-image: url(\"../images/button_sprite.png\") 0 18 50 18;
border-image: url(\"../images/button_sprite.png\") 0 18 50 18;
padding: 13px 10px 17px;
font-size: 16px;
color: #fff;
font-weight: bold;
text-decoration:none;
line-height: 15px;
}
.border-image-btn:hover {
-webkit-border-image: url(\"../images/button_sprite.png\") 50 18 0 18;
-moz-border-image: url(\"../images/button_sprite.png\") 50 18 0 18;
-o-border-image: url(\"../images/button_sprite.png\") 50 18 0 18;
border-image: url(\"../images/button_sprite.png\") 50 18 0 18;
color: #000;
border-color: yellow;
text-decoration: none;</pre>
<strong> DEMO二：制作Tabs button</strong>
<pre class=\"lang:default decode:true \">/* HTML code */
&lt;ul class=\"tabs-box\"&gt;
	&lt;li class=\"tabs-ui-selected\"&gt;Home&lt;/li&gt;
	&lt;li&gt;Blog&lt;/li&gt;
	&lt;li&gt;Contact Us&lt;/li&gt;
&lt;/ul&gt;
/* CSS Code */
.tabs-box {
border-bottom: 3px solid #9eaab6;
}
.tabs-box li {
float: left;
display: inline;
margin-right: 12px;
border: 1px solid #9EAAB6;
padding: 5px;
-moz-border-image: url(\"../images/border-image-tab.png\") 0 5 0 5;
-webkit-border-image: url(\"../images/border-image-tab.png\") 0 5 0 5;
-o-border-image: url(\"../images/border-image-tab.png\") 0 5 0 5;
border-image: url(\"../images/border-image-tab.png\") 0 5 0 5;
border-width: 0 5px;
text-align: center;
text-shadow: 0 -1px 0 rgba(0,0,0,0.8);
color: rgba(0, 125, 200, 0.3);</pre>
<strong> DEMO三：圆角+Drop box shadow效果</strong>
<pre class=\"lang:default decode:true \">/* HTML code */
&lt;div class=\"border-image-drop-boxshadow\"&gt;&lt;/div&gt;
/* CSS Code */		
.border-image-drop-boxshadow {
width: 150px;
height: 100px;
padding: 10px;
border: 1px solid #ccc;
border-width: 7px 7px 16px;
-moz-border-image: url(\"../images/border-image-box-shadow.png\") 7 7 16 7;
-webkit-border-image: url(\"../images/border-image-box-shadow.png\") 7 7 16 7;
-o-border-image: url(\"../images/border-image-box-shadow.png\") 7 7 16 7;
border-image: url(\"../images/border-image-box-shadow.png\") 7 7 16 7;		  
}</pre>
<strong> DEMO四：相框效果</strong>
<pre class=\"lang:default decode:true \">/* HTML code */
&lt;div class=\"demo\"&gt;
	&lt;img src=\"/images/header.jpeg\" alt=\"header\" /&gt;
&lt;/div&gt;
/* CSS Code */	
.demo {
-moz-border-image: url(\"/images/border-image-small-1.png\") 22 round;
-webkit-border-image: url(\"/images/border-image-small-1.png\") 22 round;
-o-border-image: url(\"/images/border-image-small-1.png\") 22 round;
border-image: url(\"/images/border-image-small-1.png\") 22 round;
display: inline-block;
border-width: 22px;
}</pre>
<strong>文章原始出处：<a href=\"http://www.w3cplus.com/content/css3-border-image\" target=\"_blank\">http://www.w3cplus.com/content/css3-border-image</a></strong>",
          "wp:post_id": "773",
          "wp:post_date": "2013-03-11 14:16:09",
          "wp:post_date_gmt": "2013-03-11 06:16:09",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "css3%e5%b1%9e%e6%80%a7border-image%e8%be%b9%e6%a1%86%e5%9b%be%e7%89%87",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "css3",
            "#cdata-section": "CSS3"
          }
        },
        {
          "title": "CSS3属性:Text-overflow文字溢出",
          "link": "http://www.pernav.com/css3%e5%b1%9e%e6%80%a7text-overflow%e6%96%87%e5%ad%97%e6%ba%a2%e5%87%ba/",
          "pubDate": "Mon, 11 Mar 2013 07:55:31 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=775"
          },
          "content:encoded": "CSS3中Text Effects属性一共有三个；text-shadow;text-overflow;word-wrap。那么今天我们来尝试一下CSS3中的text-overflow这个属性，看他如何实现这样的效果。

大家在平时的网页制作中一定碰到过内容溢出的问题，比如说文章列表很长，而其宽度又受到限制，此时超出宽度的内容就会以（...）显示。以前实现这样的效果都是由后台程序截取一定的字符数在前台输出，另外一种方法就是使用js截取一定的字符数来实现。可是这两种方法都有其不足之处，比如说中文 和英文的计算字符宽度的问题，这个值不好计算，所以造成截取字符数不好控制，从而其通用性也差。那么今天我们来尝试一下CSS3中的text-overflow这个属性，看他如何实现这样的效果。
<h4><span style=\"color: #ff6600;\"><b>1、语法:</b></span></h4>
<pre class=\"lang:default decode:true\"> text-overflow ： clip | ellipsis</pre>
<h4><span style=\"color: #ff6600;\"><b>2、取值:</b></span></h4>
1、clip:表示不显示省略标记(...)，而只是简单的裁切，需要在一定的高度范围内配合overflow:hidden属性使用，如果不配合的话将无任何效果；
2、ellipsis：对象文本溢出时将显示省略标记(...)，需要配合overflow:hidden；white-space:nowrap一起使用才会有效果。
<h4><span style=\"color: #ff6600;\"><b>3、兼容的浏览器</b></span></h4>
IE6及IE6以上都支持,其他浏览器都支持
<h4><span style=\"color: #ff6600;\"><b>4、兼容的浏览器</b></span></h4>
<strong>A.text-overflow中的clip的使用</strong>
<pre class=\"lang:default decode:true\">/* Html Code */
&lt;div class=\"demo text-overflow-clip\"&gt;
test overflow clip effect test overflow clip effect text overflow clip effect
&lt;/div&gt;
.demo {
width: 100px;
padding: 10px;
border: 1px solid #ccc;
}
/* CSS Code */
.text-overflow-clip {
/* text-overflow: clip; */
overflow: hidden;
height: 50px;
}</pre>
不用我说，大家都知道，他们两是一模一样的效果，那么我在这里需要说明的一点是：<b>text-overflow:clip这个属性在我们实际应用中根本是没有任何意义的，因为他离开了height和overflow无任何效果，当他有这两个属性配合时，达到的效果跟我们设置overflow:hidden效果一样，无任何区别，因此我们在实际应用中完全可以使用overflow:hidden来实现这样的效果。换句简单的话说：单独的text-overflow:clip起不到任何截切效果。</b>

<strong>B.text-overflow:ellipsis属性的使用</strong>

text-overflow:ellipsis在配合overflow:hidden；white-space:nowrap属性可以用来代替标题截取函数，这样一来有助于搜索引擎，打个比方说，我们标题有20个字符，而其宽度只能设置100px，如果采用标题的截取函数，那么这个标题就显示不够完整，要是我们使用text-overflow:ellipsis，标题输出是完整的，只不过是受到了其元素容器大小限制无法全部显示出来，此时就用(...)代替了被隐藏的部分。换句说，text-overflow:ellipsis属性只起到一个注解作用.
<pre class=\"lang:default decode:true\">/* Html Code */
&lt;div class=\"text-overflow\"&gt;用我来测试text-overflow:ellipsis的性能和使用方法。&lt;/div&gt;
/* CSS Code */
.text-overflow {	
width: 100px; /*设置内容宽度*/
overflow: hidden;/*隐藏溢出的文本*/
white-space: nowrap;/*让文本不换行*/
text-overflow: ellipsis;/*实现ellipsis效果*/	
}</pre>
<strong>文章原始出处：<a href=\"http://www.w3cplus.com/content/css3-text-overflow\" target=\"_blank\">http://www.w3cplus.com/content/css3-text-overflow</a></strong>",
          "wp:post_id": "775",
          "wp:post_date": "2013-03-11 15:55:31",
          "wp:post_date_gmt": "2013-03-11 07:55:31",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "css3%e5%b1%9e%e6%80%a7text-overflow%e6%96%87%e5%ad%97%e6%ba%a2%e5%87%ba",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "css3",
            "#cdata-section": "CSS3"
          }
        },
        {
          "title": "CSS3属性:Word-wrap自动换行",
          "link": "http://www.pernav.com/css3%e5%b1%9e%e6%80%a7word-wrap%e8%87%aa%e5%8a%a8%e6%8d%a2%e8%a1%8c/",
          "pubDate": "Mon, 11 Mar 2013 08:03:01 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=777"
          },
          "content:encoded": "今天主题是超长英文文本自动换行word-wrap的使用，在介绍这个属性的同时，我还把word-break和white-space两个属性一起放进来介绍，因为这几个属性常给我平时的制作中带来混淆的感觉，搞不清楚在什么地带需要使用中word-wrap属性，什么时候又应该使用word-break属性，而又何时才能使用white-space。

CSS3中提供了一个更好的实现方法，那就是今天我要介绍的CSS3的word-wrap属性。下面我们就一起来看看word-wrap具有哪些属性，并且在实际中又是如何运用，照样先从其语法部分开始，然后一步一步通过实例来加深对word-wrap的理解:
<h4><b><span style=\"color: #ff6600;\">一、word-wrap使用</span>：</b></h4>
<pre class=\"lang:default decode:true\">word-wrap ： normal | break-word</pre>
<b>2、取值:</b>

<strong>1、normal:</strong>其中normal为默认值，当其值为normal控制连续文本换行(允许内容顶开容器的边界，换句话说内容可以撑破容器）；
<strong>2、break-word</strong>将内容在边界内换行（不截断英文单词换行，截断英文单词换行需要使用word-break:all属性）,我们先来看两个简单的实例：

<b>a、word-wrap:normal</b>
<pre class=\"lang:default decode:true\">p {
width:200px;
border: 1px solid #ccc;
padding: 5px;
}</pre>
从效果中可以明显的看到超长英文（实际中是没有这样的，只是为了测试写的恶意英文）都超出了box的边框，但在IE6下是自己扩展了box的宽度，具体原因我在这里不说了，因为大家都知道呀。所以当word-wrap:normal时，超长的英文长度大于box的宽度时会撑破box伸展到box外（除IE6以及IE6以下版本之外），因为normal是其默认值，当你在别处设置了word-wrap别的值外，而要取消当初的设置，你可以将其设置为normal值，回到当初原始状态值。

<b>b、word-wrap:break-word</b>
<pre class=\"lang:default decode:true\">p {
width:200px;
border: 1px solid #ccc;
padding: 5px;
word-wrap: break-word;
}</pre>
<b>简单的实例效果对比，大家可以明显的区别出有word-wrap的两个值的作用，当word-wrap值为break-word时，超长英文大于box的宽度时，其碰到box边缘会自动折行显示</b>
<h4><span style=\"color: #ff6600;\"><b>二、word-break使用：</b></span></h4>
<pre class=\"lang:default decode:true\">word-break:normal | break-all | keep-all</pre>
<strong>1、normal为默认值:</strong>如果设置为默认值时中文则到边界处的汉字换行，如果是英文整个单词换行，如果出现某个单词长度过长，则会撑破容器，如果边框为固定属性，则后面部分将无法显示；
<strong>2、break-all：</strong>可以强行截断英文单词，达到词内换行效果； 3、keep-all:不允许字断开。如果是中文将把前后标点符号内的一个汉字短语整个换行，英文单词也整个换行，如果出现某个英文字符长度超过边界，则后面的部分将撑破容器，如果边框为固定属性，则后面部分无法显示

<strong>a、word-break:normal</strong>
<pre class=\"lang:default decode:true\">p {
width: 200px;
border: 1px solid #ccc;
padding: 5px;
}</pre>
效果图说明了word-break取值为normal时，和word-wrap值为normal一样的效果，超长英文文本宽度大于box的宽度时会撑破box伸展出去（除IE6及其以下版本），另为当其值设置normal时会覆盖其前面所设的值。

<b>b、word-break:break-all</b>
<pre class=\"lang:default decode:true\">p {
width: 200px;
border: 1px solid #ccc;
padding: 5px;
word-break:break-all;
}</pre>
效果上显示，超长英文文本碰到box边框处的字母会自动换行，但这里需要说明一点，在Firefox和Opera下是没有效果的，也就是说Firefox和Opera不会直接断词;因为firefox和opera根本不支持这个属性。如果使用这个词需要加上overflow:hidden让他在firefox和Opera下超出部分隐藏。

<b>c、word-break:keep-all</b>
<pre class=\"lang:default decode:true\">p {
width: 200px;
border: 1px solid #ccc;
padding: 5px;
word-break:keep-all;
}</pre>
此属性使超长英文文本不会换行，撑破box伸展到外面，如果在你的设计中需要元素内容不换行效果，就可以使用keep-all来实现。

<strong>综合上述内容：我们在实际中主要碰到的是长串英文和英文单词如何断行的问题，对于长串英文，我个人认为是个恶意的东西，我们没有必要去理会他，但对于长串的英文单词，我让为不能在单词的某个部位断开，换句话说最好是行内换行而不应该是词内换行，这样一来最好的方式是使用:</strong>
<pre class=\"lang:default decode:true\">word-wrap:break-word;
overflow:hidden;</pre>
<h4><span style=\"color: #ff6600;\"><b>三、white-space属性：</b></span></h4>
<pre class=\"lang:default decode:true\">white-space: normal || pre || nowrap || pre-line || pre-wrap || inherit</pre>
&nbsp;

<strong>1、normal：</strong>为其默认值。空白处会被浏览器忽略,往往可以通过设置这个值恢复到默认值下
<strong>2、pre:</strong>空白处会被浏览器保留，其行为方式就类似于HTML中的&lt;pre&gt;标签
<strong>3、nowrap:</strong>文本不会换行，文本会在同一行上，直到碰到了换行标签&lt;br /&gt;为止
<strong>4、pre-line:</strong>合并空白符序列，但保留换行符，此属性不支持IE7.0-,Firefox30-,Opera9.2-下以版本浏览器
<strong>5、pre-wrap:</strong>保留空白符序列，但是正常进行换行，此属性值不支技IE70-,Firefox3.0-版本浏览器
<strong>6、inherit：</strong>规定应该从父元素继承white-space属性的值，此属性值在所有的IE版本都不支持

<b>pre制作出一个兼容浏览器的写法</b>
<pre class=\"lang:default decode:true\">pre{
white-space: pre; /* CSS 2.0 */
white-space: pre-wrap; /* CSS 2.1 */
white-space: pre-line; /* CSS 3.0 */
white-space: -pre-wrap; /* Opera 4-6 */
white-space: -o-pre-wrap; /* Opera 7 */
white-space: -moz-pre-wrap !important; /* Mozilla */
white-space: -hp-pre-wrap; /* HP Printers */
word-wrap: break-word; /* IE 5+ */
}</pre>
<b>一、pre标签自动换行：</b>
<pre class=\"lang:default decode:true\">pre{
white-space: pre; /* CSS 2.0 */
white-space: pre-wrap; /* CSS 2.1 */
white-space: pre-line; /* CSS 3.0 */
white-space: -pre-wrap; /* Opera 4-6 */
white-space: -o-pre-wrap; /* Opera 7 */
white-space: -moz-pre-wrap !important; /* Mozilla */
white-space: -hp-pre-wrap; /* HP Printers */
word-wrap: break-word; /* IE 5+ */
}</pre>
<b>二、td标签自动换行</b>
<pre class=\"lang:default decode:true\">table {table-layout: fixed;width: *** px;}
table td {overflow: hidden;word-wrap: break-word;}</pre>
<b>三、除pre,td标签外其他标签自动换行：</b>
<pre class=\"lang:default decode:true\">element{overflow: hidden;word-wrap: break-word;}</pre>
<b>四、标签内容强制不换行：</b>
<pre class=\"lang:default decode:true  crayon-selected\">element{white-space: nowrap;word-break: keep-all;}</pre>
<strong>文章原始出处：<a href=\"http://www.w3cplus.com/content/css3-word-wrap\" target=\"_blank\">http://www.w3cplus.com/content/css3-word-wrap</a></strong>

&nbsp;

&nbsp;",
          "wp:post_id": "777",
          "wp:post_date": "2013-03-11 16:03:01",
          "wp:post_date_gmt": "2013-03-11 08:03:01",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "css3%e5%b1%9e%e6%80%a7word-wrap%e8%87%aa%e5%8a%a8%e6%8d%a2%e8%a1%8c",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "css3",
            "#cdata-section": "CSS3"
          }
        },
        {
          "title": "CSS3属性:@font-face自定义字体",
          "link": "http://www.pernav.com/css3%e5%b1%9e%e6%80%a7font-face%e8%87%aa%e5%ae%9a%e4%b9%89%e5%ad%97%e4%bd%93/",
          "pubDate": "Tue, 12 Mar 2013 02:08:42 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=782"
          },
          "content:encoded": "@font-face是CSS3中的一个模块，他主要是把自己定义的Web字体嵌入到你的网页中，随着@font-face模块的出现，我们在Web的开发中使用字体不怕只能使用Web安全字体，你们当中或许有许多人会不自然的问，这样的东西IE能支持吗？当我告诉大家@font-face这个功能早在IE4就支持了你肯定会感到惊讶。
<h4><span style=\"color: #ff6600;\"><strong>A、font-face的语法规则</strong></span></h4>
<pre class=\"lang:default decode:true\">@font-face {
	font-family: &lt;YourWebFontName&gt;;
	src: &lt;source&gt; [&lt;format&gt;][,&lt;source&gt; [&lt;format&gt;]]*;
	[font-weight: &lt;weight&gt;];
	[font-style: &lt;style&gt;];
}</pre>
<h4><span style=\"color: #ff6600;\"> B、取值</span></h4>
<strong>1、YourWebFontName:</strong>此值指的就是你自定义的字体名称，最好是使用你下载的默认字体，他将被引用到你的Web元素中的font-family。如“font-family:\"YourWebFontName\";”
<strong>2、source:</strong>此值指的是你自定义的字体的存放路径，可以是相对路径也可以是绝路径；
<strong>3、format：</strong>此值指的是你自定义的字体的格式，主要用来帮助浏览器识别，其值主要有以下几种类型：truetype,opentype,truetype-aat,embedded-opentype,avg等；
<strong>4、weight和style:</strong>这两个值大家一定很熟悉，weight定义字体是否为粗体，style主要定义字体样式，如斜体。
<h4><span style=\"color: #ff6600;\">C、兼容浏览器</span></h4>
说到浏览器对@font-face的兼容问题，这里涉及到一个字体format的问题，因为不同的浏览器对字体格式支持是不一致的，这样大家有必要了解一下，各种版本的浏览器支持什么样的字体，前面也简单带到了有关字体的几种格式，下面我就分别说一下这个问题，让大家心里有一个概念：

<strong>一、TureTpe(.ttf)格式：</strong>

.ttf字体是Windows和Mac的最常见的字体，是一种RAW格式，因此他不为网站优化,支持这种字体的浏览器有【IE9+,Firefox3.5+,Chrome4+,Safari3+,Opera10+,iOS Mobile Safari4.2+】;

<strong>二、OpenType(.otf)格式：</strong>

.otf字体被认为是一种原始的字体格式，其内置在TureType的基础上，所以也提供了更多的功能,支持这种字体的浏览器有【Firefox3.5+,Chrome4.0+,Safari3.1+,Opera10.0+,iOS Mobile Safari4.2+】;

<strong>三、Web Open Font Format(.woff)格式：</strong>

.woff字体是Web字体中最佳格式，他是一个开放的TrueType/OpenType的压缩版本，同时也支持元数据包的分离,支持这种字体的浏览器有【IE9+,Firefox3.5+,Chrome6+,Safari3.6+,Opera11.1+】;

<strong>四、Embedded Open Type(.eot)格式：</strong>

.eot字体是IE专用字体，可以从TrueType创建此格式字体,支持这种字体的浏览器有【IE4+】;

<strong>五、SVG(.svg)格式：</strong>

.svg字体是基于SVG字体渲染的一种格式,支持这种字体的浏览器有【Chrome4+,Safari3.1+,Opera10.0+,iOS Mobile Safari3.2+】;

<strong><strong>达到更多种浏览版本的支持,</strong>就意味着在@font-face中我们至少需要.woff,.eot两种格式字体，甚至还需要.svg等字体;</strong>
<pre class=\"lang:default decode:true\">@font-face {
font-family: 'YourWebFontName';
        src: url('YourWebFontName.eot'); /* IE9 Compat Modes */
	src: url('YourWebFontName.eot?#iefix') format('embedded-opentype'), /* IE6-IE8 */
	url('YourWebFontName.woff') format('woff'), /* Modern Browsers */
	url('YourWebFontName.ttf')  format('truetype'), /* Safari, Android, iOS */
	url('YourWebFontName.svg#YourWebFontName') format('svg'); /* Legacy iOS */
}</pre>
<h4><span style=\"color: #ff6600;\"> C、需要应用自定义字体</span></h4>
<pre class=\"lang:default decode:true\">/* HTML Code */
&lt;h2 class=\"neuesDemo\"&gt;Neues Bauen Demo&lt;/h2&gt;
/* CSS Code */
@font-face {
font-family: 'NeuesBauenDemo';
	src: url('../fonts/neues_bauen_demo-webfont.eot');
	src: url('../fonts/neues_bauen_demo-webfont.eot?#iefix') format('embedded-opentype'),
	url('../fonts/neues_bauen_demo-webfont.woff') format('woff'),
	url('../fonts/neues_bauen_demo-webfont.ttf') format('truetype'),
	url('../fonts/neues_bauen_demo-webfont.svg#NeuesBauenDemo') format('svg');
	font-weight: normal;
	font-style: normal;
}</pre>
看到上面的效果，那大家就知道我们实现成功了。那么关于@font-face帮你打造特殊效果的字体，到这里基本上就完成了，我在这里需要提醒使用者：

1、如果你的项目中是英文网站，而且项目中的Logo，Tags等应用到较多的这种特殊字体效果，我建议你不要使用图片效果，而使用@font-face，但是你是中文网站，我觉得还是使用图片比较合适，因为加载英文字体和图片没有多大区别，但是你加载中文字体，那就不一样了，因为中文字体太大了，这样会影响到项目的某些性能的优化；
2、致命的错误，你在@font-face中定义时，文件路径没有载对；
3、你只定义了@font-face，但并没有应用到你的项目中的DOM元素上；

<b>最后在提醒一下，使用@font-face别的可以忘了，但<a href=\"http://www.fontsquirrel.com/tools/webfont-generator\" target=\"_blank\">Font Squirrel</a>千万不能忘，因为他能帮你生成@font-face所需的各种字体格式。</b>

<strong>文章原始出处：<a href=\"http://www.w3cplus.com/content/css3-font-face\" target=\"_blank\">http://www.w3cplus.com/content/css3-font-face</a></strong>",
          "wp:post_id": "782",
          "wp:post_date": "2013-03-12 10:08:42",
          "wp:post_date_gmt": "2013-03-12 02:08:42",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "css3%e5%b1%9e%e6%80%a7font-face%e8%87%aa%e5%ae%9a%e4%b9%89%e5%ad%97%e4%bd%93",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "css3",
            "#cdata-section": "CSS3"
          }
        },
        {
          "title": "杂记：周末小感",
          "link": "http://www.pernav.com/%e5%91%a8%e6%9c%ab%e6%9d%82%e8%ae%b0/",
          "pubDate": "Sun, 18 Aug 2013 09:32:46 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=791"
          },
          "content:encoded": "<p style=\"text-align: left;\">这个周末又宣告结束了，多么平常的一个周末啊，刚刚睡了一觉，醒了发现一个严重的问题，或者说明白了一个近一年来一直不在状态的原因，就是在去年失去她的时候，我同时失去了生活的目标，好可怕<span style=\"font-family: 'Times New Roman';\">.......</span></p>
我想目标我会找会来的，最近就开始去找，而失去的人，就只能让她放在心里了。今年到现在也没正常的写些东西，不是不想，一直静不下来，或者一直找不到话题，或者就是第一个字出来的时候就做其他事情了。这叫什么，“拖延症”吧，这一拖就拖了快一年。不过，我要承认的一件事情是：我老啦，终于也在别人说叫“大叔”、”老男人”的时候，保持沉默。每次看自己以往的照片，都能找到青春留下的细纹在脸上，也总会感叹身边的人，总在不断的替换着。我想那唯一不变的，应该只有回忆了，所以我在回忆里，拖延的近一年。

今年还是办成了几件事，第一，就是这个网站啦；第二，换了一家公司，认识了一群不错的同事；第三，认识了一些不错的朋友，<span style=\"font-family: 宋体;\">当然，还有“小芹菜</span>”；至于“小芹菜”是谁，我想她是一个给我生命带了快乐并且难忘时间的人吧。第四，去了武汉旅游，去了“徽杭古道”的清凉峰。

今年代办的事情，还有很多很多，而这里，不知道能办成多少，就暂时不透露啦<span style=\"font-family: 'Times New Roman';\">......</span>

<a title=\"Flickr 上 扎木 的 武汉旅游\" href=\"http://www.flickr.com/photos/92551927@N02/9537252936/\"><img alt=\"武汉旅游\" src=\"http://farm4.staticflickr.com/3737/9537252936_ebc7e3c713_b.jpg\" width=\"816\" height=\"612\" /></a>

<a title=\"Flickr 上 扎木 的 武汉旅游\" href=\"http://www.flickr.com/photos/92551927@N02/9537254348/\"><img alt=\"武汉旅游\" src=\"http://farm4.staticflickr.com/3732/9537254348_1536c5e0fb_b.jpg\" width=\"816\" height=\"612\" /></a>

<a title=\"Flickr 上 扎木 的 武汉旅游\" href=\"http://www.flickr.com/photos/92551927@N02/9534471165/\"><img alt=\"武汉旅游\" src=\"http://farm4.staticflickr.com/3672/9534471165_9b2b4284ba_b.jpg\" width=\"612\" height=\"816\" /></a>

<a title=\"Flickr 上 扎木 的 武汉旅游\" href=\"http://www.flickr.com/photos/92551927@N02/9537259944/\"><img alt=\"武汉旅游\" src=\"http://farm3.staticflickr.com/2816/9537259944_164c476a97_b.jpg\" width=\"816\" height=\"612\" /></a>

<a title=\"Flickr 上 扎木 的 武汉旅游\" href=\"http://www.flickr.com/photos/92551927@N02/9537261922/\"><img alt=\"武汉旅游\" src=\"http://farm6.staticflickr.com/5481/9537261922_737d4d5f68_b.jpg\" width=\"612\" height=\"816\" /></a>

<a title=\"Flickr 上 扎木 的 登顶清凉峰\" href=\"http://www.flickr.com/photos/92551927@N02/9534344875/\"><img alt=\"登顶清凉峰\" src=\"http://farm4.staticflickr.com/3765/9534344875_6922d7fced_b.jpg\" width=\"800\" height=\"533\" /></a>

<a title=\"Flickr 上 扎木 的 二哥\" href=\"http://www.flickr.com/photos/92551927@N02/9537133162/\"><img alt=\"二哥\" src=\"http://farm3.staticflickr.com/2821/9537133162_f19aff58cb_b.jpg\" width=\"800\" height=\"533\" /></a>

<a title=\"Flickr 上 扎木 的 登顶清凉峰\" href=\"http://www.flickr.com/photos/92551927@N02/9534348541/\"><img alt=\"登顶清凉峰\" src=\"http://farm8.staticflickr.com/7428/9534348541_9961d1e4c5_b.jpg\" width=\"800\" height=\"533\" /></a>

<a title=\"Flickr 上 扎木 的 登顶清凉峰\" href=\"http://www.flickr.com/photos/92551927@N02/9537137694/\"><img alt=\"登顶清凉峰\" src=\"http://farm4.staticflickr.com/3745/9537137694_3ebcb34509_b.jpg\" width=\"800\" height=\"533\" /></a>

<a title=\"Flickr 上 扎木 的 登顶清凉峰\" href=\"http://www.flickr.com/photos/92551927@N02/9534352275/\"><img alt=\"登顶清凉峰\" src=\"http://farm4.staticflickr.com/3756/9534352275_5203bbcaec_b.jpg\" width=\"800\" height=\"600\" /></a>

PS:这是武汉旅游和登顶清凉峰的部分留影<span style=\"font-family: 宋体;\">，生活如此美好，享受每一天吧，亲~~</span>
<p style=\"text-align: right;\">2013-8-18</p>",
          "wp:post_id": "791",
          "wp:post_date": "2013-08-18 17:32:46",
          "wp:post_date_gmt": "2013-08-18 09:32:46",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "%e5%91%a8%e6%9c%ab%e6%9d%82%e8%ae%b0",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "%e6%9d%82%e6%96%87%e8%ae%b0",
            "#cdata-section": "杂文记"
          },
          "wp:postmeta": {
            "wp:meta_key": "_edit_last",
            "wp:meta_value": "1"
          }
        },
        {
          "title": "心语：人生是一场错过，愿你别蹉跎",
          "link": "http://www.pernav.com/%e5%bf%83%e8%af%ad%ef%bc%9a%e4%ba%ba%e7%94%9f%e6%98%af%e4%b8%80%e5%9c%ba%e9%94%99%e8%bf%87%ef%bc%8c%e6%84%bf%e4%bd%a0%e5%88%ab%e8%b9%89%e8%b7%8e/",
          "pubDate": "Thu, 22 Aug 2013 14:30:26 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=799"
          },
          "content:encoded": "1、我所认为最深沉的爱，莫过于分开以后，我将自己，活成了你的样子。

2、大部份的痛苦，都是不肯离场的结果，没有命定的不幸，只有死不放手的执着。

3、友谊真好，不用猜，也无需问，就晓得自己在对方的心里；友情真好，不用特意开始，也不会轻易结束，就这么手拉手就走过了许多岁月。

4、生命中，不断地有人离开或进入。于是，看见的，看不见了；记住的，遗忘了。生命中，不断地有得到和失落。于是，看不见的，看见了；遗忘的，记住了。然而，看不见的，是不是就等于不存在？记住的，是不是永远不会消失？

5、只有再体会爱的不完美，才能够学会爱该怎么给，给自己一个喘息的机会，也试着让爱有路可退。

6、太过美好的东西从来都不适合经历，因为一旦经历便无法遗忘；太过年少的爱情从来都不适合追求，因为我们都还走在成长的旅途中。一场美丽的相遇，一场绚丽的开放已是开至尽头的荼靡。有些人，只能离开；有些东西，只能放弃；有些记忆，只能埋于心底；有些过去，只能选择遗忘。

7、朋友有两种，一种需要经常见面，否则连话都难接上，感情更淡漠；另一种朋友不必天天联系，三年五载甚至更长，彼此音容模糊，可一朝晤面，宛若朝夕相处。

8、人生，过路客不说唏嘘。人间，你和我不过寄居。

9、我不记得你，但是你却爱着我，这份爱在逝去的时光中与目俱增，你说，一朵花的流年可以很长，在你的寂静年华中，饱满而壮烈地盛开，因为有爱，所以永远不会枯萎。我遇见过很多人，始终与影子相依为命，然后我遇到你。只要你在这里，我们不紧不慢，一起走过每一个四季。
<p align=\"center\"></p>
10、如果把童年再放映一遍，我们一定会先大笑，然后放声痛哭，最后挂着泪，微笑着睡去。有时我沉默，不是不快乐，只是想把心净空。

11、不是所有的事，都需要你弄清，亏时费神不说，多是徒劳无益；并非所有的人，都必须你搞懂，伤心悲情不说，常是曲终场散。看不到的，就别为难，人生本是单行线，属于你的景色不多；看不懂的，就别追究，凡事还是糊涂好，不必让自己太累；看不惯的，就别逞强，哪怕头破血流，也未尝有善终。

12、不要因为努力变成别人喜欢的样子，到头来忘了最真实的自己。

13、当你了解爱情，你也就了解人生。千帆过尽，始终留在心裡的，只有那张熟悉的脸和那一抹牵动你的微笑。他是你千年修行却偏偏跨不過去的那道坎儿。终于你明白，这就是爱情。这一生，总有一個人，老是跟你過不去，你却很想跟他过下去。

14、不去追逐你所渴求，你将永远不会拥有。不往前走，就将永远停留。

15、放纵可能是对各种事物的耽溺。你可能会耽溺在你的懒惰中，耽溺在你的忧郁、你的神经过敏、你的忙碌、你对自己或别人的讨伐之中。你会耽溺在逃避事情、拖延事情或谈论八卦里。

16、我相信，总会有不期而遇的温暖，和生生不息的希望，在不经意间出现在我的生命里。

17、爱情固然有着感化和激励的力量，但那时，也要看你自己是哪一类型的人。有些人是可以舍身入地狱的，有些人可以把别人感化，有些人却不适于去做这种工作。不要毫无把握地去冒险。

18、欲望来自占有，占有因为自爱。你对一个人有欲望，那一刻的心动是喜欢；你对一个人忍住了欲望，那一刻的理解是爱。

19、有一些人，他们赤脚在你生命中走过，眉眼带笑，不短暂，也不漫长。却足以让你体会幸福，领略痛楚，回忆一生。

20、人生是一场错过，愿你别蹉跎。",
          "wp:post_id": "799",
          "wp:post_date": "2013-08-22 22:30:26",
          "wp:post_date_gmt": "2013-08-22 14:30:26",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "%e5%bf%83%e8%af%ad%ef%bc%9a%e4%ba%ba%e7%94%9f%e6%98%af%e4%b8%80%e5%9c%ba%e9%94%99%e8%bf%87%ef%bc%8c%e6%84%bf%e4%bd%a0%e5%88%ab%e8%b9%89%e8%b7%8e",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "%e5%bf%83%e8%af%ad",
            "#cdata-section": "心语"
          }
        },
        {
          "title": "杂文：相逢",
          "link": "http://www.pernav.com/%e6%9d%82%e6%96%87%ef%bc%9a%e7%9b%b8%e9%80%a2/",
          "pubDate": "Fri, 23 Aug 2013 14:24:09 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=806"
          },
          "content:encoded": "朋友跟我说，某天，他跟一位老人擦肩而过的时候，不经意地看了老人一眼，突然有点发蒙：老人长得很像自己的姥爷。

他赶紧转头看，老人微微佝偻着背，一条腿不太利索，走起来一拐一拐的。没错，这不正是自己的姥爷吗？

小时候，父母在外打工，他跟姥爷一起生活。那时，姥姥早已过世，舅舅姨妈们有的住得远，有的外出打工了，从四五岁到初中那段时间里，他身边最亲的就是姥爷了。姥爷已经年迈，腰很弯，一条腿因为早年摔过，总是使不上劲，走路一瘸一拐，脸上沟壑纵横，一脸的老人斑，后来很多年里相貌也没太多改变，无非是老人斑更重了，腰更弯了，走路更加颤颤巍巍了。

姥爷每天早早把他叫醒，催他吃早饭，催他读书，晚上催他洗脚睡觉，一老一少，有点相依为命的感觉。记忆最深的，一是冬天他的脚冰凉，姥爷那条残腿更冰凉；二是某次姥爷给他洗头，就在院坝上，一盆清水，一只破塑料瓢，一块肥皂，他低头闭着眼，抓着后颈的衣领，姥爷给他哗哗啦啦地洗，洗完替他抹了一把脸上的水，瞬间手上的老茧像钢丝球划过……

想着想着，不自觉地跟着老人走了一段。姥爷过世好些年了，从小他就在心里暗暗发誓，等将来挣钱了要好好孝敬姥爷，可姥爷没有等到这一天。那年他还在上大学，得知姥爷过世的消息已经是一个星期后了，母亲在电话里说，已经下葬，怕耽误你的学习就没告诉你，你不用赶回来……就这样，他连姥爷的最后一面都没有见着，又后悔之前因为勤工俭学竟两年没有回家……这些，成了他心里永远的愧疚和遗憾。

他想，姥爷还活着该多好，如果前面的这位老人，正是自己的姥爷该有多好啊……正黯然神伤地看着，想着，老人转弯了，突然又站住了，转头对他说：“我一个老头子，又没钱又没色，你跟着我干什么？”

他这才发觉自己失礼了，鼻子一酸，解释说：“对不起，您长得实在太像我姥爷了。”

那位老人愣了一下，转身正准备走，又转过身来对他说：“要不咱唠一会儿？”

前面不远处有个公交站牌，有简易的长凳，老人走过去坐下，他也跟过去坐下了，这才发现眼前的老人是典型的城里老人，而自己的姥爷是典型的农村老人，相似的不过是神态和老态。

老人耳朵不好，就在人来人往的公交车站，两人似喊非喊、答非所问地聊了一会儿，最后老人问：“你姥爷叫什么名字？是哪里人？”他如实相告，老人起身说：“回头我下去，碰到你姥爷会跟他说一声，说你过得不错，也是个懂孝道的人，你看成吗？”

朋友对我说，以往想起姥爷都会一阵心痛，觉得死亡是不能承受之重，那天当听到眼前这位老人说“下去”时，口吻轻松平淡，就好像说我去散个步或是我去趟菜市场，他不由自主地笑了，对老人说：“成！”

奇怪的是，从那天以后，他心里对姥爷的愧疚和遗憾减轻了很多，而且总觉得真跟姥爷重逢过。",
          "wp:post_id": "806",
          "wp:post_date": "2013-08-23 22:24:09",
          "wp:post_date_gmt": "2013-08-23 14:24:09",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "%e6%9d%82%e6%96%87%ef%bc%9a%e7%9b%b8%e9%80%a2",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "%e6%9d%82%e6%96%87",
            "#cdata-section": "杂文"
          }
        },
        {
          "title": "杂文:你以为生活是怎样的",
          "link": "http://www.pernav.com/%e6%9d%82%e6%96%87%e4%bd%a0%e4%bb%a5%e4%b8%ba%e7%94%9f%e6%b4%bb%e6%98%af%e6%80%8e%e6%a0%b7%e7%9a%84/",
          "pubDate": "Sun, 25 Aug 2013 13:01:38 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=811"
          },
          "content:encoded": "有一些文章和帖子都在告诉我们，一定要趁着年轻多出去走走，穷游也好间隔年也好，总之要走出去，读万卷书行万里路，指不定旅途中能够惊心动魄经历一场奇遇，不然转角遇到爱也好，实在不行转角打个炮也不错。

通讯网络发达后，大家发现原来世界这么大，一定要走出去才不枉此生，又发现交通这么便利，恨不能一脚跨到南极去。

就这样身边出现了很多要去过间隔年的人，很多要去穷游的人。

他们说，这才是生活，人生总不能永远闷在一个地方吧。

他们又说，这样的生活才有意义不是吗？

我也觉得这样很有意义，不管怎样想，出去走走看看风景认识更多的人都是很有意思的事情，只是有一点点替他们感到担心，万一他们没有和那些帖子里所描述的一样遇到奇遇或是真爱，他们会不会很失望。

不是很流行一句话么，叫生活在别处。

几年前，我有幸或者说不幸去上过雅思班，非常短暂的课程集训。去了之后发现该教育机构并没有和当初宣传海报上说的那样名师辅导，而是请来了暑期临时工。

虽然是临时工，但是势必都是英语非常好的人，其中有一部分是留学回国的学生，教我们班的就是这样一位华裔。

我已经忘了她姓甚名谁，只记得她画着蓝色眼影的双眼说话时不停的眨，像翻飞的蝴蝶翅膀。

坐在教室最前排的女生非常喜欢问她，老师，你什么时候去的美国啊？美国的生活怎样？

她十分大方地花了三小时和我们讲述她大致的人生。

由于父母是从事文化工作的，所以在她小学的时候举家去了意大利，生活在时尚之都米兰，然后到了她初中的时候，又因为法国文化部的邀请，举家去了法国巴黎生活。

在 她高中的时候全家终于在美国安定了下来，入了籍成为美国公民，参加完美国高考后她开始自己的间隔年旅行。大约旅行了没多久她的父亲就托人安排她回国进入高 中，理由是没有参加过国内的高考是毕生的遗憾，于是她在极短的时间内回国进入高三开始紧张的复习迎考——最后考到了一本之上的成绩——不过显然还是回美国 念了大学。

听得大家兴奋地狂敲桌子，大喊大叫，老师你好酷！这才是生活啊！

老师那你岂不是会说意大利语会说法语？——我能听懂但不怎么会说。

那老师你会说四国语言（中、英、意、法）岂不是工作超好找！为什么还来这种培训机构？——我总是要回美国工作的，这个只是回国没事干随便投的简历，大约8月我就回美国工作了。

最后老师告诉我们，她根本不缺钱花。

大家又狂敲桌子，大喊大叫，我们好羡慕你！

结束后，那个问话的女生和我一起去买奶茶，她说，我好讨厌这个人，我们就这样听她炫耀了三个小时？！

我心里想，明明是你自己问她的，她说了你又嫌她炫耀，那你到底要怎样。

那个女生斩钉截铁地告诉我，那个人是骗子！

我当时没有想过是不是骗子之类的，我只是单纯地觉得，虽然这个经历过于炫酷了些，但是不能以自己贫乏的生活为标准去检验他人吧，也许她只是实话实说。

去年，我十分有幸或是不幸去了另一家语言培训机构，我泡茶闲谈的当口，我再次看见了那位老师，虽然仍然不记得她姓甚名谁，但是那翻飞的蓝色眼影我还记得，她依旧在培训机构当老师。

——那人是个骗子！

这句话不由自主在我脑海里回荡。

很多哲人，都试图告诉我们，一定要珍惜当下，生活在当下。

但是更多的人生导师又告诉我们，一定要着眼于未来，放长线钓大鱼，小不忍则乱大谋。

电影告诉我们，有情饮水饱。

但是更多的人生导师又告诉我们，说实话，没钱还是不行。

那到底要过怎样的生活才好？

那你们又以为生活是怎样的？

光鲜的、亮丽的、跌宕起伏的、痛苦的、哀怨的、辗转反侧的才是生活么，一定要经历过后从中得到什么才是生活么？

一定要不停地行走，去间隔年出国旅行才能体验生活么？

很早前看过一本日剧，里面有个片段：

女主人公问身旁的友人，你听过松尾芭蕉的著名俳句“闲寂古池旁，青蛙跳进水中央，扑通一声响”么？为什么只有芭蕉桑能写出这样的俳句呢？真不敢相信古今这么多年只有他一个人听见青蛙跳进池塘的声音啊！

既然芭蕉桑已经出现了，不如再放一首俳句好了“树下肉丝、菜汤上，飘落樱花瓣。”

我觉得，这样才是生活啊……

难道非要走得很远，非要去经历跌宕起伏的奇遇才能知道什么是生活么？很难想象一个平时听不见青蛙跳进池塘，看不见樱花飘落菜汤的人能在别处有什么生活。

如果不懂得观察和体会，那么在哪里都是一样的无趣。

不管听起来是怎样的诱人和炫酷，但是那些都不是生活。

时间要一天一天地过，饭要一口一口的吃，书要一页一页地看，不管在哪里都能听见青蛙跳进池塘的声音，夏日的午后都能听见蝉鸣在树荫里不知疲倦地响。

这样才是生活吧。",
          "wp:post_id": "811",
          "wp:post_date": "2013-08-25 21:01:38",
          "wp:post_date_gmt": "2013-08-25 13:01:38",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "%e6%9d%82%e6%96%87%e4%bd%a0%e4%bb%a5%e4%b8%ba%e7%94%9f%e6%b4%bb%e6%98%af%e6%80%8e%e6%a0%b7%e7%9a%84",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "%e6%9d%82%e6%96%87",
            "#cdata-section": "杂文"
          }
        },
        {
          "title": "心语：若无子期耳，总负伯牙心",
          "link": "http://www.pernav.com/%e5%bf%83%e8%af%ad%ef%bc%9a%e8%8b%a5%e6%97%a0%e5%ad%90%e6%9c%9f%e8%80%b3%ef%bc%8c%e6%80%bb%e8%b4%9f%e4%bc%af%e7%89%99%e5%bf%83/",
          "pubDate": "Sun, 25 Aug 2013 13:07:07 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=814"
          },
          "content:encoded": "1、时光盗走了身边不少人，留到最后才是最真的。

2、选爱人不需要太多标准，只要这三样：不骗你，不伤害你，和陪着你。

3、能说出来的，未必是太在意的；能写出来的，其实是可以放下的；存在心里的，才是欲罢不能挥之不去的。

4、一个人，如果没有空，那是因为他不想有空，一个人，如果走不开，那是因为他不想走开，一个人，对你借口太多，那是因为不想在乎。

5、最痛苦的是，消失了的东西，它就永远的不见了，永远都不会再回来。却偏还要留下一根细而尖的针，一直插在你心头，一直拔不去，它想让你疼，你就得疼。

6、有时候，就是想大哭一场，因为心里憋屈。有时候，就是想疯癫一下，因为情绪低落。有时候，就是想破口大骂，因为心里不爽。有时候，就是想安安静静，因为真的我累了。

7、以前总认为坚持会让我们变强大，但是长大后才发现，让我们强大的，是放下。

8、思念就跟爱情一样是会耗尽的。无奈要分隔两地，一开始我想你想得很苦，恨不得马上飞奔到你身边，再也不要跟你分开。后来的后来，我没那么想你了，不是不爱你，而是这样的想念是没有归途的。我再怎么想你，还是见不着你摸不到你，只是用思念来折磨自己。于是我知道，我得学着过自己的生活。——张小娴

9、如果非要等你有一天受伤了、想通了，才想起我的好处，才想要对我好，我也不稀罕了。我的付出只有一次，你丢了就没了。
<p align=\"center\"></p>
10、如果有人愿对你好，就别折腾好好过吧，世上没十全十美的人，一个人能对你好就已很难得。如果有人从最穷时跟着你，就别贪心了，无论发达成什么样，都守着人家过吧。我们经历过的人再多，最后能陪在你病床前的也只有一个。人生到老方知唯一。不折腾，不贪心，才是一辈子。

11、忘记一个人，并非不再想起；而是在偶尔想起时，心中却不再有波澜。

12、千万别放弃！有了第一次放弃，你的人生就会习惯于知难而退，可是如果你克服过去，你的人生则会习惯于迎风破浪地前进，看着只是一个简单的选择，其实影响非常大，是截然不同的人生。

13、我捧你的时候，你是杯子；松手的时候，你就特么是个玻璃碴子。——给那些不珍惜的人。

14、遇到对的人是什么感觉呢？就是感觉那个人不会走。你不需要任何心机和手段，不用去想怎么留住他的心，他的胃，他就是不会走。最好的恋情是，你可以彻底做你自己，并且你的这个他，依然迷恋最真实的你。

15、很多事情只有经历之后才知道，同一件事情，跟不同的人也会是另外一个世界。

16、如果我爱你，而你也正巧的爱我。你头发乱了的时候，我会笑笑的替你拨一拨，然后，手还留恋的在你头上多待几秒。但是，如果我爱你，而你不巧的不爱我。你头发乱了，我只会轻轻的告诉你，你头发了乱了哦。

17、爱错人，每天都是愚人节。爱对人，每天都是情人节。

18、不管前方的路有多苦，只要走的方向正确，不管多么崎岖不平，都比站在原地更接近幸福。

19、你是我的红药水，他只是杯黑咖啡。你会问我累不累，他却让我不能睡。——林夕《女朋友的男朋友》

20、若无子期耳，总负伯牙心。",
          "wp:post_id": "814",
          "wp:post_date": "2013-08-25 21:07:07",
          "wp:post_date_gmt": "2013-08-25 13:07:07",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "%e5%bf%83%e8%af%ad%ef%bc%9a%e8%8b%a5%e6%97%a0%e5%ad%90%e6%9c%9f%e8%80%b3%ef%bc%8c%e6%80%bb%e8%b4%9f%e4%bc%af%e7%89%99%e5%bf%83",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "%e5%bf%83%e8%af%ad",
            "#cdata-section": "心语"
          }
        },
        {
          "title": "杂文：韩寒《一次告别》",
          "link": "http://www.pernav.com/%e6%9d%82%e6%96%87%ef%bc%9a%e9%9f%a9%e5%af%92%e3%80%8a%e4%b8%80%e6%ac%a1%e5%91%8a%e5%88%ab%e3%80%8b/",
          "pubDate": "Wed, 28 Aug 2013 14:51:51 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=817"
          },
          "content:encoded": "也许很多人不知道，我在小学的时候是数学课代表。后来因为粗心和偏爱写作，数学成绩就稍差一些。再后来，我就遇上了我的初恋女朋友，全校学习成绩前三名的Z。Z是那种数学考卷上最后一道压轴几何题，都能用几种算法做出正确答案的姑娘，而我还是恨不得省去推算过程，直接拿量角器去量的人。

以Z的成绩，她是必然会进市重点高中的，她心气很高，不会为任何事情影响学业。我如果发挥正常，最多也是区重点。我俩若要在同一个高中念书，我必然不能要求她考差些迁就我，只能自己努力。永远不要相信那些号称在感情世界里距离不是问题的人。

没错，这很像《三重门》的故事情节，只是在《三重门》里，我意淫了一下，把这感情写成了女主人公最后为了爱情，故意考砸去了区重点，而男主人公阴差阳错却进了市重点的琼瑶桥段。这也是小说作者唯一能滥用的职权了。

在那会儿，爱情的力量绝对是超越父母老师的训话的，我开始每天认真听讲，预习复习，奋斗了一阵子后，我的一次数学考试居然得了满分。

是的，满分。要知道我所在的班级是特色班，也就是所谓的好班或者提高班。那次考试我依稀记得一共就三四个数学满分的。当老师报出我满分后，全班震惊。我望向窗外，感觉当天的树叶特别绿，连鸟都更大只了。我干的第一件事就是借了一张信纸，打算一会儿给Z写一封小情书，放学塞给她。信纸上印着“勿忘我”“一切随缘”之类土鳖的话我也顾不上了。我甚至在那一个瞬间对数学的感情超过了语文。

之后就发生了一件事情，它的阴影笼罩了我整个少年生涯。记得似乎是发完试卷后，老师说了一句，韩寒这次发挥得超常啊，不符合常理，该不会是作弊了吧。

同学中立即有小声议论，我甚至听见了一些赞同声。

我立即申辩道，老师，另外两个考满分的人都坐得离我很远，我不可能偷看他们的。

老师说，你未必是看他们的，你周围同学的平时数学成绩都比你好，你可能看的是周围的。

我反驳道，这怎么可能，他们分数还没我的高。

老师道，有可能他们做错的题目你正好没看，而你恰恰做对了。

我说，老师，你可以问我旁边的同学，我偷看了他们没有。

老师道，是你偷看别人，又不是别人偷看你，被偷看的人怎么知道自己被人看了。

我说，那你把我关到办公室，我再做一遍就是了。

老师说，题目和答案你都知道了，再做个满分也不代表什么，不过可以试试。

以上的对话只是个大概，因为已经过去了十六七年。在众目睽睽之下，我就去老师的办公室做那张试卷了。

因为这试卷做过一次，所以一切都进行得特别顺利。但我唯独在一个地方卡住了——当年的试卷印刷工艺都非常粗糙，常有印糊了的数字。很自然，我没多想，问了老师，这究竟是个什么数字。

数学老师当时就一激灵，瞬间收走了试卷，说，你作弊，否则你不可能不记得这个数字是什么，已经做过一次的卷子，你还不记得么？你这道题肯定是抄的。老师还抽出了我同桌的试卷，指着那个地方说，看，他做的是对的，而在你作弊的那张卷子里，你这也是对的，这是证据。

我当时就急了，说，老师，我只知道解题的方法，我不会去记题目的。说着顺手抄起卷子，用手指按住了几个数字，说，你是出题的，你告诉我，我按住的那几个数字是什么。

老师自然也答不上来，语塞了半天，只说了一句“你这是狡辩”之类的，然后就给我父亲的单位打了电话。

我父亲很快就骑车赶到，问老师出什么事情了。老师说，你儿子考试作弊，我已经查实了。接着就是对我父亲的教育。我在旁边插嘴道，爸，其实我……
<p align=\"center\"></p>
然后我就被我爹一脚踹出去数米远。父亲痛恨这类事情，加之单位里工作正忙，被猛叫来了学校，当着全办公室其他老师的面被训斥，自然怒不可遏。父亲骂了我一会儿后，对老师赔了不是，说等放学到家后再好好教育。我在旁边一句都没申辩。

老师在班级里宣布了我作弊。除了几个了解我的好朋友，同学们自然愿意接受这个结果，大家也没什么异议。没有经历过的人恐怕很难了解我当时的心情。我想，蒙受冤屈的人很容易产生反社会心理，在回去的一路上，15岁的我想过很多报复老师的方法，有些甚至很极端。最后我都没有做这些，并慢慢放下了，只是因为一个原因，Z，她相信了我。

回家后，我对父母好好说了一次事情的来龙去脉。父亲还向我道了歉。我的父母没有任何权势，也不敢得罪老师，况且这种事情又说不清楚，就选择了忍下。父母说，你只要再多考几个满分，证明给他们看就够了。

但事实证明这类反向激励没什么用，从此我一看到数学课和数学题就有生理厌恶感。只要打开数学课本，就完全无法集中注意力，下课以后，我也变得不喜欢待在教室里。当然，也不觉得叶子那么绿了，连窗外飞过的鸟都小只了。

之后我的数学再也没得过满分。之所以数学成绩没有一泻千里，是因为我还要和Z去同一个高中，且当时新的教学内容已经不多。而对Z的承诺，语文老师因为我作文写得好所以对我的偏爱，以及发表过几篇文章和长跑破了校记录拿了区里第一名，都是支撑我信心的来源。好在很快我们就中考了。那一次我居然数学成绩……对不起，不是满分，辜负了想看励志故事的朋友。好在中考我的数学考得还不算差，也算是那段苦读时光没有白费。

一到高中，我的数学连同理科全线崩溃了。并不是我推卸责任，也许，在我数学考了满分以后，这故事完全可以走向一个不同的结果，依我的性格，说不定有些你们常去的网站，我都参与了编程，也许有一个理工科很好的叫韩寒的微博红人，常写出一些不错的段子，还把自己的车改装成赛车模样，又颠又吵，害丈母娘很不满意。

在那个我展开信纸打算给Z报喜的瞬间，我对理科的兴趣和自信是无以复加的。但这居然只持续了一分钟。一切都没有假设。经历此事，我更强大了么？是的，我能不顾更多人的眼光，做我认为对的事情。我有更强的心理承受能力。但我忍下了么？

未必，我下意识把对一个老师的偏见，带进了我早期的那些作品里，对几乎所有教师进行批判甚至侮辱，其中很多观点和段落都是不客观与狭隘的。那些怨恨埋进了我的潜意识，我用自己的那一点话语权，对整个教师行业进行了报复。在我的小说中，很少有老师是以正面形象出现的。所有这些复仇，这些错，我在落笔的时候甚至都没有察觉到。

而我的数学老师她是个坏人么？也不是，她非常认真和朴实，严厉且无私，后来我才知道，那段时间，她的婚姻生活发生了变故。她当时可能只是无心说了一句，但为了在同学之中的威信，不得不推进下去。而对于我，虽然蒙受冤屈，它却改变了我的人生轨迹，我把所有的精力都花在了那些更值得也更擅长的地方，我现在的职业都是我的挚爱，且我做得很开心。至于那些同学们，十几年后的同学会上，绝大部分人都忘了这事。人们其实都不会太把他人的清白或委屈放在心上。

十几年后，我也成为了老师。作为赛车执照培训的教官，在我班上的那些学员们，必须得到我的签字才能拿到参赛资质。坐在学员们开的车里，再看窗外，树叶还是它原来的颜色，飞鸟还是它该有的大小。

有一次，一个开得不错的学员因为太紧张冲出赛道，我们陷入缓冲区，面面相觑。学员擦着汗说，教官，这个速度过弯我能控制的，昨天单人练习的时候我每次都能做到的。我告诉他，是的，我昨天在楼上看到了，的确是这样。

本文收录于韩寒主编新书《一个：很高兴见到你》",
          "wp:post_id": "817",
          "wp:post_date": "2013-08-28 22:51:51",
          "wp:post_date_gmt": "2013-08-28 14:51:51",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "%e6%9d%82%e6%96%87%ef%bc%9a%e9%9f%a9%e5%af%92%e3%80%8a%e4%b8%80%e6%ac%a1%e5%91%8a%e5%88%ab%e3%80%8b",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "%e6%9d%82%e6%96%87",
            "#cdata-section": "杂文"
          }
        },
        {
          "title": "心语：千山万水，永不相离，生老病死，永不相弃",
          "link": "http://www.pernav.com/%e5%bf%83%e8%af%ad%ef%bc%9a%e5%8d%83%e5%b1%b1%e4%b8%87%e6%b0%b4%ef%bc%8c%e6%b0%b8%e4%b8%8d%e7%9b%b8%e7%a6%bb%ef%bc%8c%e7%94%9f%e8%80%81%e7%97%85%e6%ad%bb%ef%bc%8c%e6%b0%b8%e4%b8%8d%e7%9b%b8%e5%bc%83/",
          "pubDate": "Wed, 28 Aug 2013 15:03:07 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=819"
          },
          "content:encoded": "1、一路的风景，抵不过爱人瞬间的容颜。

2、真情和假意，只要学着把它看成香槟里飘飞的小气泡，也就不必太认真。伤感过去，会微笑宽容。毕竟，太甜的东西，都不可能是货真价实的。

3、每抱怨完一件事之后，如果能顺手也感谢一件事，日子可能会好过一点。—— 蔡康永

4、女孩子在和异性交往时，固然需要适度的含蓄，但在必要的时候，更需要相当的明朗。在你应该答允的时候，固然不必过于矫情，在你应该拒绝的时候，更需当机立断。—— 《罗兰小语》

5、关系都是建立在自身有实力的基础上的，不要希望自己什么都不付出，而会有人无私的帮助你。

6、世界这么大，人生这么长，总会遇到这么一个人，让你想要温柔地对待。

7、谁都以为自己会是例外，在后悔之外。谁都以为拥有的感情也是例外，在变淡之外。谁都以为恋爱的对象刚巧也是例外，在改变之外。然而最终发现，除了变化，无一例外。——徐志摩

8、人生不必求全责备。草绿了，我们就享受那份绿；蝉鸣了，我们就聆听那声音；叶子黄了，我们就品味秋意；冬季里，我们就欣赏雪景。

9、有的人走了就再也没回来过，所以，等待和犹豫才是这个世界上最无情的杀手！—— 三毛

10、世界上最难忘记的两件事，一是遇见，二是忘记。 遇见了就珍惜，忘不了就铭记…

11、人生是一种态势，爱情是其中一个分支。我们在风声渐起时上路，又在风声停歇时，安营扎寨。而过程的演绎，却有着丰富的表情。

12、低头垂颈间，那是一种寻求宁静的姿态。懂得安静的女人总是更容易让男人生出爱慕的心。信守安静的男人，总能获得女人更多的青睐。这是所谓内敛中蕴涵的力量。

13、过度考虑别人的感受，是一种对自己的不认同。当每做一件事都在考虑＂别人怎么看＂时，你其实已经在放弃自己了。总是活在别人眼神里的人，也等于从来不曾存在过。—— 苏芩

14、终有一天，遇到这样一个人，陌生的完全不熟悉的人，毫无感情基础，但感觉是可以很好的一起生活的人。于是，疲惫不已的心，终于愿意停靠。

15、独乐，是一个人独处时也能欢喜，有心灵与生命的充实；独醒，是不为众乐所迷惑，众人都认为应该过的生活方式，往往不一定适合我们。

16、最深沉的感情往往是以最冷漠的方式表现出来的，最轻浮的感情往往是以最强烈的方式表现出来的。 —— 汪国真

17、很多时候，你最想得到的就是你无法拥有的，欲望，让我们心神俱碎，欲望，能毁了你的生活。和欲求某物一样艰难的是：受苦最多的人，是那些不明白自己欲求何物的人。

18、当你与别人聊天时不知道应该说什么的时候，说实话或者沉默，往往是最聪明的选择。

19、我们应该把别人想得好一些，并经常对小事感恩。这与别人无关，因为他不需要知道你在想些什么。这样做只是令自己更快乐。

20、此去经年，千山万水，永不相离，生老病死，永不相弃。",
          "wp:post_id": "819",
          "wp:post_date": "2013-08-28 23:03:07",
          "wp:post_date_gmt": "2013-08-28 15:03:07",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "%e5%bf%83%e8%af%ad%ef%bc%9a%e5%8d%83%e5%b1%b1%e4%b8%87%e6%b0%b4%ef%bc%8c%e6%b0%b8%e4%b8%8d%e7%9b%b8%e7%a6%bb%ef%bc%8c%e7%94%9f%e8%80%81%e7%97%85%e6%ad%bb%ef%bc%8c%e6%b0%b8%e4%b8%8d%e7%9b%b8%e5%bc%83",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "%e5%bf%83%e8%af%ad",
            "#cdata-section": "心语"
          }
        },
        {
          "title": "心语：睡吧，合上双眼，世界就与我无关",
          "link": "http://www.pernav.com/%e5%bf%83%e8%af%ad%ef%bc%9a%e7%9d%a1%e5%90%a7%ef%bc%8c%e5%90%88%e4%b8%8a%e5%8f%8c%e7%9c%bc%ef%bc%8c%e4%b8%96%e7%95%8c%e5%b0%b1%e4%b8%8e%e6%88%91%e6%97%a0%e5%85%b3/",
          "pubDate": "Thu, 29 Aug 2013 14:44:00 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=821"
          },
          "content:encoded": "1、真正的爱情不是利己的，而应该是利他的。

2、你对我好，我便也对你好。你对我不好了，我却停不住了。

3、离开他的时候我就明白，爱是一回事，生活是一回事，艳遇是一回事，岁月是另一回事。

4、没有一代人的青春是容易的。每一代有每一代人的宿命、委屈、挣扎、奋斗，没什么可抱怨的。——白岩松

5、这世上，不是只有烈酒才能醉人，不是只有热恋才会刻骨。有时候，一份清淡，更能历久弥香；一种无意，更能魂牵梦萦；一段简约，更可以维系一生。

6、每一个不敢再爱的人，一定很深的爱过。看起来好象百毒不侵，其实早已百毒侵身。

7、学着主宰自己的生活；即使孑然一身，也不算一个太坏的局面。不自怜、不自卑、不怨叹，一日一日来，一步一步走，那份柳暗花明的喜乐和必然的抵达，在于我们自己的修持。

8、世间有类姑娘，说的每句话都让你想得非非，还有类姑娘，说的每句话都让你非得想想。

9、如若不是为了一个人，谁肯枯守一座城。城市和爱情，总是有着这样那样的关系。我们会因为一个人，去到那座城，因为那是一座爱的城；我们也会因为一个人，离开一座城，那是一座绝望的伤城。

10、能伤害我的，都是我爱的。
<p align=\"center\"></p>
11、做不到是你自己的事，午夜梦回，你爱怎么回味就怎么回味，但人前人后，我要你装出什么都没有发生过的样子。你可以的，我们都可以，人都是这般活下来的。

12、看得见的伤口，迟早有一天会痊愈的。

13、不要说你会无条件的爱一个人，爱总是有条件的。你可以什么都不要，但是你要他爱你，这难道不是条件？我们每一个人都是有条件的被爱着，也是有条件的爱着别人，不必心灰意冷。既然知道这世上没有无条件的爱，你应该努力使自己更具备条件去被爱，同时也应该学会忘记一些条件去爱一个人。

14、人在得不到的时候，什么都可以不介意。得到之后，什么都有点介意。

15、每想你一次，天上飘落一粒沙，从此形成了撒哈拉。每想你一次，天上就掉下一滴水，于是形成了太平洋。——三毛《撒哈拉的故事》

16、所谓了解，就是知道对方心灵最深的地方的痛处，痛在哪里。

17、她追上来：“丈夫变了心，应该怎么办？”诺芹没好气：“杀死他，吃掉他的肉，骨头埋在后园里。”对方怯怯地问：“有无更好方法？”“有，请他走，再见珍重，不迭不送，然后振作地过生活。”——亦舒

18、你来人间一趟，你要看看太阳，和你的心上人，一起走在大街上。——海子《夏天的太阳》

19、人生有两个悲剧，第一是想得到的得不到，第二是想得到的得到了。——王尔德

20、睡吧，合上双眼，世界就与我无关。——顾城《生命幻想曲》",
          "wp:post_id": "821",
          "wp:post_date": "2013-08-29 22:44:00",
          "wp:post_date_gmt": "2013-08-29 14:44:00",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "%e5%bf%83%e8%af%ad%ef%bc%9a%e7%9d%a1%e5%90%a7%ef%bc%8c%e5%90%88%e4%b8%8a%e5%8f%8c%e7%9c%bc%ef%bc%8c%e4%b8%96%e7%95%8c%e5%b0%b1%e4%b8%8e%e6%88%91%e6%97%a0%e5%85%b3",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "%e5%bf%83%e8%af%ad",
            "#cdata-section": "心语"
          }
        },
        {
          "title": "夜间咖啡:That love, not time, heals all wounds.",
          "link": "http://www.pernav.com/%e5%a4%9c%e9%97%b4%e5%92%96%e5%95%a1that-love-not-time-heals-all-wounds/",
          "pubDate": "Thu, 29 Aug 2013 14:46:04 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=823"
          },
          "content:encoded": "1、A life without love is like a year without summer.
没有爱的一生，就像没有盛夏的年月。

2、I don’t want to be your entire world, just the best thing in it.
我不想成为你的整个世界，只要是你世界里最美好的事物就好。

3、My arms will always be open for you, and they will never close, unless you’re in them.
我的双臂一直向你敞开，不会闭合，除非你在我的怀抱之中。

4、Don’t be afraid of the space between your dreams and reality. If you can dream it, you can make it so.
别害怕梦想和现实的距离。只有想不到，没有做不到。

5、True fact of life: When you need ADVICE everyone is ready to HELP you, but when you need HELP everyone is ready to ADVICE you.
生活的真相：当你需要的是意见，每个人都准备帮你，但当你需要帮助的时候，所有人都准备给你建议。

6、Say to yourself: Regardless of what the obstacles in this life may be, I will run my race to the best of my ability.
对自己说：无论生活之路上会遇到多少障碍，我会竭尽所能地跑完这一程。

7、I still believe that the stars will speak, the stone, will blossom, through the summer and winter snow fence after, you will arrive.
我还是会相信，星星会说话，石头会开花，穿过夏天的栅栏和冬天的风雪过后，你终会抵达。

8、Don’t push away the people who truly care about you, because one day, you push them away, and they won’t come back.
不要把真正关爱你的人推开。因为有一天，他们再次被推开后，可能就再也不会回来了。

9、If we pass by in this crowd city one day , I’ll stop and stare at the leaving figure and tell myself that I have loved that person.
如果有一天，在喧闹的城市里，我们擦肩而过，我会停住脚步，凝视着那远去的背影，告诉自己那个人我曾经爱过。
<p align=\"center\"></p>
10、Be who you are and say what you feel, because those who mind, don’t matter, and those who matter, don’t mind.
做你自己的主人，大声说出你的心声。那些介意你的人，其实是闲杂人等；那些你在乎的人，不会因此而较真。

11、Walking alone is difficult. But when we walk a mile with someone, then coming back alone is more difficult.
一个人走很难，但更难的是当你和另一个人共同走过一段，再一个人走回来。

12、Youth is like a sudden downpour – even though you caught a cold, you’d still go back and get caught in it again.
青春是一场大雨，即使感冒了，还盼望回头再淋它一次。

13、If you asked me, I would go back to any day in the past. Not to fix my regrets, but to relive all our unforgettable memories.
如果你问我，我会想要回到过去的任何一天。不为追悔，只为重温我们难忘的回忆。

14、We can easily forgive a child who is afraid of the dark; the real tragedy of life is when men are afraid of the light.
小孩害怕黑暗，情有可原；人生真正的悲剧，是大人害怕光明。

15、When you have eliminated the impossible, whatever remains, however improbable, must be the truth.
当你排除了所有的不可能，无论剩下的是什么，无论看起来多么不可能，它必定是真相。

16、Sometimes people didn’t want to hear the truth because they don’t want their illusions destroyed.
有时候，人们不想获悉真相，因为他们不想幻想被摧毁。

17、In the end, it’s not the years in your life that count. It’s the life in your years.
最终，真正重要的不是生命里的岁月，而是岁月中的生活.

18、Life may not be the party we hoped for, but while we’re here, we should dance.
人生或许不是我们期盼的那场宴会，但既然来了，就跟着起舞吧。

19、I want a person who comes into my life by accident, but stays on purpose.
想要有个人，Ta无意间走进了我的生活，却故意留了下来。

20、That love, not time, heals all wounds.
是爱，而不是时间，能够治愈一切伤痛。",
          "wp:post_id": "823",
          "wp:post_date": "2013-08-29 22:46:04",
          "wp:post_date_gmt": "2013-08-29 14:46:04",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "%e5%a4%9c%e9%97%b4%e5%92%96%e5%95%a1that-love-not-time-heals-all-wounds",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "%e5%92%96%e5%95%a1",
            "#cdata-section": "咖啡"
          }
        },
        {
          "title": "心语：向来缘浅，奈何情深",
          "link": "http://www.pernav.com/%e5%bf%83%e8%af%ad%ef%bc%9a%e5%90%91%e6%9d%a5%e7%bc%98%e6%b5%85%ef%bc%8c%e5%a5%88%e4%bd%95%e6%83%85%e6%b7%b1/",
          "pubDate": "Mon, 09 Sep 2013 13:39:04 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=830"
          },
          "content:encoded": "1、最痛苦的是，消失了的东西，它就永远的不见了，永远都不会再回来。却偏还要留下一根细而尖的针，一直插在你心头，一直拔不去，它想让你疼，你就得疼。

2、曾经以为，伤心是会流眼泪的，原来，真正的伤心，是怎么也流不出一滴眼泪。

3、不喊痛，不一定没感觉，是痛太深，淹没了所有的回声。

4、最美好的事，是看到了某人的微笑；而更美好的事，是他是因你而微笑。

5、你可以穿不起香奈尔，也可以没有多少衣服供选择，但是请你永远别忘记一件最重要的衣服，这件衣服叫自我。

6、曾经以為，离别是离开不爱的人，有一天，长大了，才发现，有一种离别，是离开你爱的人；有一种离别，是擦著眼泪，不敢回首。– 张小娴

7、没有人会关心你付出过多少努力，撑得累不累，摔的痛不痛，他们只会看你最后站在什么位置，然后羡慕嫉妒恨.

8、其实世界上没有那么多的如果，有时候，我们一瞬间失去的东西就是永恒。

9、Miss，同一个单词，既是想念，也是错过。 在我最想念你的时候，我才发觉我错过了你。

10、有天你会遇到一个彩虹般绚丽的人，当你遇到这个人后，会觉得其他人只是浮云而已。
<p align=\"center\"></p>
11、如果只是遇见，不能停留，不如不遇见。

12、我不能说一辈子只能爱一个人，这根本不可能。可是一定有一个人， 能让我笑得最灿烂， 哭得最透彻， 记的最深刻。

13、姑娘,你要努力,你想要的,只能你自己给.别人给的,你要问问自己,拿得起么..

14、忘不掉的是回忆，继续的是生活，错过的，就当是路过。

15、不是每个人，都适合和你白头到老。有的人，是拿来成长的；有的人，是拿来一起生活的；有的人，是拿来一辈子怀念的。

16、失去缘分的人，即使在同一个城市也很难遇见，有时候一转身就是一辈子。

17、每一句“你在干嘛？”的背后，都藏着一句“我想你了。

18、我们总是喜欢不停的揣测对方的心情，不停的猜忌对方的想法，然后开始惶恐不安，开始患得患失，开始责怪自己哪里不够好。经历告诉你太过在乎就是失去的开始。

19、每个人就像是一个纸杯，知识、涵养像杯里的水。别人不会看到你杯子里的水，别人看到的只是溢出的那一点点。当你内涵溢出的时候，自然会被发现。

20、向来缘浅，奈何情深。你转身的一瞬，我萧条的一生，世上最痛苦的事，不是生老病死，而是生命的旅程虽短，却充斥着永恒的孤寂。世上最痛苦的事，不是永恒的孤寂，而是明明看见温暖与生机，我却无能为力。世上最痛苦的事，不是我无能为力，而是当一切都触手可及，我却不愿伸出手去。——《何以笙箫默》",
          "wp:post_id": "830",
          "wp:post_date": "2013-09-09 21:39:04",
          "wp:post_date_gmt": "2013-09-09 13:39:04",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "%e5%bf%83%e8%af%ad%ef%bc%9a%e5%90%91%e6%9d%a5%e7%bc%98%e6%b5%85%ef%bc%8c%e5%a5%88%e4%bd%95%e6%83%85%e6%b7%b1",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "%e5%bf%83%e8%af%ad",
            "#cdata-section": "心语"
          }
        },
        {
          "title": "心语：我想跟你在一起做每一件事，用一生的时间",
          "link": "http://www.pernav.com/%e5%bf%83%e8%af%ad%ef%bc%9a%e6%88%91%e6%83%b3%e8%b7%9f%e4%bd%a0%e5%9c%a8%e4%b8%80%e8%b5%b7%e5%81%9a%e6%af%8f%e4%b8%80%e4%bb%b6%e4%ba%8b%ef%bc%8c%e7%94%a8%e4%b8%80%e7%94%9f%e7%9a%84%e6%97%b6%e9%97%b4/",
          "pubDate": "Tue, 10 Sep 2013 14:34:34 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=832"
          },
          "content:encoded": "1、我的人生可以有把玩单调的时间，但是没有忍受厌倦的余地。

2、一个人的知识，通过学习可以得到；一个人的成长，就必须通过磨练。

3、相信人，相信感情，相信善良的存在；要开朗，要坚韧，要温暖的活着。

4、富，不是你身上的钱财，而是你心里的满足；贵，不是你地位的显赫，而是你被人需要的程度。

5、我们明白了，有苦就自己吞。人生，当然就有苦。再多的苦，只简单说一点就好了。谁会真正明白你说的每一句话？不如少说为妙。而当我们真的做到这一点之时，我们忽然惊觉，自己真的长大了。

6、过度考虑别人的感受，是一种对自己的不认同。当每做一件事都在考虑＂别人怎么看＂时，你其实已经在放弃自己了。总是活在别人眼神里的人，也等于从来不曾存在过。

7、放下浅薄和无知，靠的不是批判他人，而是自身的壮大和重建。脑袋长在脖子上，请用来思考，而不是一味的附和。别人一声令下，你就冲锋陷阵，注定沦为炮灰……只有智慧，才能让你变得宽容，只有宽容，才能给你心更大的自由。月亮的背面到底有什么，飞高了，你自然就看到了。

8、茶凉了， 就别再续了， 再续， 也不是原来的味道了； 人走了， 就别再留了， 再留下， 也不是原来的感觉了； 情没了， 就别回味了， 再回味，也不是原来的心情了。 慢慢的都会远， 渐渐的都会淡， 拥有时， 好好珍惜， 离开了， 默默祝福， 人生的旅途， 没有人是应该要陪你走到最后。

9、一无所有其实不是最悲哀的事情。那意味着你再也没什么可失去的了。祸福相依，得失切换。相比”从未得到“，”得而失去“恐怕更让人痛苦。
<p align=\"center\"></p>
10、心理学认为，异性间的初次见面，男人对女人的关注时间若超过了8.2秒钟，有可能，这就说明他爱上了她。原来，爱上一个人，一分钟都不用了。但这八秒钟的记忆，却需一生来遗忘。爱情中，没有真正健忘的人。记性太差，只是因为爱得不够。—— 苏芩《世上没有人比你更重要》

11、若是自己没有尽力，就没有资格批评别人不用心。开口抱怨很容易，但是闭嘴努力的人更加值得尊敬。

12、风来，只是一道道涟漪，终究会归于平静；雨落，只是一些些涌动，终究会落幕成寂；云过，只是一道道风景，终究会成为记忆。守候一片自己的领域，无关尘世，无关风月，只是一种善良，一种责任，一种深深的爱恋。

13、登高望远，不是为了被整个世界看到，而是为了看到整个世界。

14、谈恋爱时，怎么确定对方是真心的呢？其实很简单，别去相信那些好听的话，别相信空洞的海誓山盟。因为真心话，往往都不太好听。真心的人，也往往不会轻巧的承诺。你爱上一个浮夸的花花公子，就别提什么真心人了。靠谱的男人，是最不会讨人欢心的。越是真心，就越是慎重。

15、结婚，只是一种生活方式，该结婚就结婚。最反对人家问：婚后快乐吗？这同快乐有什么关系。正等于辞职后，同样有天真活泼的人士问：不必上班，快乐吗？快乐同世上一切都没有任何关系。至于结婚后的真相，蔡老澜一直说：好比黑社会，其间秘密，不能向外人道。

16、感情也是投资，对于女人来说，在一个男人身上投入了时间、青春、精力甚至金钱，最关键是投入了感情，总想有一个结果。在这个过程中，其实这个男人已经变了质，但是女人总是心疼自己所投入的，不肯放手，结果越投越多。殊不知，不肯放手，不甘心，就把自己套牢了，可能会葬送自己一生。

17、必须重新站起来，告诉自己，继续走吧，路途尚未结束，即使重新捡起的东西已被踩得粉碎。

18、因为有你，让我相信我所遭遇的一切，并不是在阻挡我的前进，而是要让我下更大的决心。

19、人若是能够耐得住寂寞，就能够少受许多痛苦和少出许多洋相。

20、我想跟你在一起做每一件事。用一生的时间。",
          "wp:post_id": "832",
          "wp:post_date": "2013-09-10 22:34:34",
          "wp:post_date_gmt": "2013-09-10 14:34:34",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "%e5%bf%83%e8%af%ad%ef%bc%9a%e6%88%91%e6%83%b3%e8%b7%9f%e4%bd%a0%e5%9c%a8%e4%b8%80%e8%b5%b7%e5%81%9a%e6%af%8f%e4%b8%80%e4%bb%b6%e4%ba%8b%ef%bc%8c%e7%94%a8%e4%b8%80%e7%94%9f%e7%9a%84%e6%97%b6%e9%97%b4",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "%e5%bf%83%e8%af%ad",
            "#cdata-section": "心语"
          }
        },
        {
          "title": "乐嘉：分手孰对孰错",
          "link": "http://www.pernav.com/%e5%88%86%e6%89%8b%e5%ad%b0%e5%af%b9%e5%ad%b0%e9%94%99/",
          "pubDate": "Tue, 17 Sep 2013 14:44:32 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=837"
          },
          "content:encoded": "谁甩谁或谁主动提出分手，其实，都不重要，除非存有其他种种扯皮和纠葛，否则最终两人分开的结果都一样。你不同意这个观点，是因为你觉得这事关乎尊严，就像当你离开单位时，是被老板炒了鱿鱼还是你炒了老板鱿鱼，谁主动，你就认为谁牛逼。所以，有时明明是老板要炒你，为了保持自己的尊严，你索性主动向老板辞职。有时明明是分手时你不想分，但是你怕没了爱，还被别人提出更伤自尊，索性主动提出分开。

在两人分手孰对孰错的问题上，外人都是假判官，很多悲催的当事人自己也搞不清谁对谁错，互相埋怨。很多事情，不是对方诚心让你不爽的，彼此性格使然，要怪只能怪情太深，以为只要有爱，性格的冲突就可烟消雾散，却不知，这纯属放屁。如果性格冲突的痛苦这么容易就弄懂弄通，天下没有戏剧，天下也没有故事，天下便没有生活。

就算彼此能说清对错，那又怎样？说清楚你是好人，我是坏人；说清楚我是好人，你做了对不起我的事，那又怎样。能改吗？因为，伤痕己成，何况你们谁都不准备让裂痕再弥补，或者无力弥补，都不愿向前或无力向前，不如散伙。两人目的性特别强，利益关系千丝万缕，自然选择政治夫妻；否则，各自散伙，各自回家，各自找人，各自谨慎生娃。

想挽回的一方，大声忏悔说自己错了，决定分手的那人就一定心软吗？就算心软了，大家重归于好了，就一定能走到底吗？就算能一直走到底，外人看起来恩爱甜蜜幸福无比，这两人自己就真的很爽吗？

自己不爽，但由于种种原因，没办法，要给别人看着很爽，世上多少这样的人啊。这样看来，尊重大家的过去而且彼此相亲，互相成全，比为了让他人看得爽而凑合苟活，更值得尊敬和学习。
<p align=\"center\"></p>
亚鹏是我《首席夜话》采访的第十个对象，印象深刻。因他纯朴，真诚，直言不讳，性情汉子，尤其是描述到飞机上发嫣然基金的传单被人脚踏时的内心变化，心生敬意。一个好友说他装，我对这个好友说，外面很多人还说我装呢。我们看到的我们不了解的人，可能永远只是这个人的一面。

亚鹏，红+黄，与他的成长经历相关，在不熟悉的受众面前，红色欢乐热情的一面并不明显。事实上，却有强烈地分享精神，希望自己说的东西可以影响并且帮助到人们。因为他的强烈的理想主义色彩，我个人并不认为他是一个优秀的商人，从大学开始起，创业到发展中，兴趣广泛，方向分散，做生意的焦距不够集中，所幸，他很早就清楚自己对演戏并无志向，也没有意愿在幕前的光环长期发展，他知道自己喜欢做什么，他内心想做什么。

关于他的情感，只聊到王菲，不知从前。我个人的感觉，王菲的名字给他必定在过往带来很多心理的沉重，在我看来，这是任何一个自尊心很强的男人都会有的本能及应。

在所有与亚鹏的对话中，最让我动容的是关子财产独立的一段，他说，“这是我保持自己尊严的方式”。想起段往事，很多年前，一个知识分子的大哥，在与一个女企业家婚前，唯一要求是必须先做婚前财产公证，我问他为什么，他答“这是我此刻维护自己尊严最重要的方式”。那一刻，瞬间通明。

当外界世俗普遍认为事业上女强男弱时，从性格角度分析，女子对男子发自内心的全然依赖，对这个男人是多么地重要。天下事业成功的女子内心若真能明白这话，该有多好。无论是谁，天下举凡自尊者，必有自卑与脆弱，这是由人性决定的。

我们看别人幸福，有时并不高兴，因为他幸福不代表我幸福；有时我们看到别人不幸福，我们及而窃喜，因为若是我们不幸福，心理可以找到平衡点了。

其实，人家幸福不幸福和我们都无关，因为每个人的幸福与否只有自己知道，人家幸福不代表你能幸福。再其实，分手有时代表的是幸福的开始，只是我们暂时无法接纳而己。

平常心，有多少人真的懂？吃该吃的饭，睡该睡的觉，谈该谈的恋爱，过该过的日子，祝福你喜欢的人，不诅咒你不喜欢的人。想想世界如此，叹口气，继续。",
          "wp:post_id": "837",
          "wp:post_date": "2013-09-17 22:44:32",
          "wp:post_date_gmt": "2013-09-17 14:44:32",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "%e5%88%86%e6%89%8b%e5%ad%b0%e5%af%b9%e5%ad%b0%e9%94%99",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "%e6%9d%82%e6%96%87",
            "#cdata-section": "杂文"
          },
          "wp:comment": {
            "wp:comment_id": "2",
            "wp:comment_author": "Osmond",
            "wp:comment_author_email": "442497994@qq.com",
            "wp:comment_author_IP": "58.247.89.34",
            "wp:comment_date": "2014-12-05 13:27:14",
            "wp:comment_date_gmt": "2014-12-05 05:27:14",
            "wp:comment_content": ":smile:  :shock:",
            "wp:comment_approved": "trash",
            "wp:comment_parent": "0",
            "wp:comment_user_id": "1",
            "wp:commentmeta": [
              {
                "wp:meta_key": "akismet_result",
                "wp:meta_value": "false"
              },
              {
                "wp:meta_key": "akismet_history",
                "wp:meta_value": "a:4:{s:4:\"time\";d:1417757234.68644809722900390625;s:7:\"message\";s:31:\"Akismet检查通过了此评论\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:6:\"Osmond\";}"
              },
              {
                "wp:meta_key": "akismet_history",
                "wp:meta_value": "a:3:{s:4:\"time\";d:1445765634.3146839141845703125;s:5:\"event\";s:12:\"status-trash\";s:4:\"user\";s:6:\"Osmond\";}"
              },
              {
                "wp:meta_key": "_wp_trash_meta_status",
                "wp:meta_value": "1"
              },
              {
                "wp:meta_key": "_wp_trash_meta_time",
                "wp:meta_value": "1445765634"
              }
            ]
          }
        },
        {
          "title": "杂文：长远看，妻子漂亮很重要吗？",
          "link": "http://www.pernav.com/%e6%9d%82%e6%96%87%ef%bc%9a%e9%95%bf%e8%bf%9c%e7%9c%8b%ef%bc%8c%e5%a6%bb%e5%ad%90%e6%bc%82%e4%ba%ae%e5%be%88%e9%87%8d%e8%a6%81%e5%90%97%ef%bc%9f/",
          "pubDate": "Sat, 13 Dec 2014 06:18:47 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=1011"
          },
          "content:encoded": "长远看，有个美貌的太太是很重要，但更重要的是，作为丈夫本身有没有维持妻子美貌保质期的能力和决心。

事实上，平均线上的姑娘收拾收拾，基本都差不多，都能达到好看的程度。所以找个好看点又懂事脾气好的太太，真心不算难事。只要你不是low到极点，总会有这样的姑娘眼瞎嫁给你的。当然，如果您非得要倾国倾城级别的，那当我没说。

但问题就在于美貌这种东西属于昂贵品，得花很多时间和金钱打理，而且还属于高度的易贬值品，不要说结婚10年，结婚五年生了小孩，大部分好看的姑娘都迅速发福长胖，按道理讲女孩子帮你生孩子，丈夫应该心怀感激，但不幸的是男人这种无可救药的生物，看着太太下垂的胸部跟腰间的赘肉，还是会觉得不满和嫌弃。

可以这么说，姑娘在结婚前收拾的干干净净漂漂亮亮，主要靠自己，结婚后完全就是靠老公。

一二线大城市还好点，二三线小城市女性地位极低，结婚之后就是给夫家一大家子人当保姆，上照顾两位难伺候的文革遗老，中伺候不成器的龌龊丈夫，下带着淘气包孩子。

你以为这样的生活很可怕吗？no，最可怕的是我身边所有的已婚女性，婚后都还必须参加工作的，大部分人收入跟丈夫持平，甚至个别人收入还超过丈夫，但她们全都在过着这种苦逼的日子。

结果就是不过三年，衰老速度那是飞快，一律都朝着黄脸婆的方向飞奔。

我印象最深刻的是我表姐跟我亲姐。两位都是年轻时候经济不独立，住在家里，所以被爹妈逼婚了，然后就完完全全是往火坑里跳。两位姐夫在家里都是倒了酱油瓶都不扶的甩手掌柜，哦对了，两位姐姐的收入都比老公高。这两位姐夫的共同点还很一致，都爱玩电脑，做饭洗碗带孩子，伺候老人，各种繁重的工作，全都是我两位姐姐包办。

我亲姐不算多漂亮，但是也是很高挑挺拔了，我表姐年轻时候是个不折不扣的大美人，腿长胸大，五官清秀，现在两位结婚不过五年，满脸黄褐斑，手上的皮肤都粗糙不堪，远看身形都还算美女，近看就真觉得不太好看了。想起我小时候看到的美丽少女被生活摧残成这样，我只想把两位姐夫拧过来狠揍一顿。

当然，这还不是最翻转的。最翻转的在于，我身边的成年人，到了35之后，硬生生的把太太折磨成了黄脸婆，然后他们开始在外面觅食了。单位里，生活中很多20出头的新员工，水灵的小姑娘，不最爱这种高级白领么？

虽然我自己是打定主意要丁克了，但是假设我有儿子的话，我倒不会跟他说多少择偶之类的屁话，而会狠狠的教育他的个人：

女孩子爱睡懒觉，所以你要早起做早餐；

家务活要勤快多做，坚决不能让自己的太太手下水，对皮肤不好；

要勤快工作充实自己的经济能力，多给太太买礼物，把太太打扮的好看自己面上也有光；

没事多运动，保持身材，带着太太多出门走走，一起运动；

要努力和自己老妈搞好关系，做太太跟老妈之间的调停人，维持好家庭和谐和亲密感情。

事实上，这正是我父亲30多年来一直坚持做的（虽然我妈没多好看），苏北冬天天冷没暖气，我妈爱睡懒觉，所以他一连30年都是6点前起床给全家做早饭，我儿时的记忆印象最深的是早晨朦朦胧胧看着父亲用碳炉熬粥的情景。这也是我妈妈一直以来不停的拿父亲做榜样教育我的。

如何做个尽职的丈夫，尽可能的延长太太的美貌和身材，为她分担生活的重任，这是所有男性都必须正视和认真思考的问题。我希望大家都能努力做到完善自身的素质，不要做该死龌龊的甩手掌柜和不负责任的人。

美剧里面对于男生的要求有很简单的三个问题，希望大家可以时刻注意自省：

Are you a nice person?

Do you do nice things for her?

How often?

广大男性同胞们，共勉！",
          "wp:post_id": "1011",
          "wp:post_date": "2014-12-13 14:18:47",
          "wp:post_date_gmt": "2014-12-13 06:18:47",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "%e6%9d%82%e6%96%87%ef%bc%9a%e9%95%bf%e8%bf%9c%e7%9c%8b%ef%bc%8c%e5%a6%bb%e5%ad%90%e6%bc%82%e4%ba%ae%e5%be%88%e9%87%8d%e8%a6%81%e5%90%97%ef%bc%9f",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "%e6%9d%82%e6%96%87",
            "#cdata-section": "杂文"
          },
          "wp:postmeta": {
            "wp:meta_key": "_edit_last",
            "wp:meta_value": "1"
          }
        },
        {
          "title": "心语：遇见，就是幸福",
          "link": "http://www.pernav.com/%e5%bf%83%e8%af%ad%ef%bc%9a%e9%81%87%e8%a7%81%ef%bc%8c%e5%b0%b1%e6%98%af%e5%b9%b8%e7%a6%8f/",
          "pubDate": "Sun, 14 Dec 2014 08:42:05 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=1013"
          },
          "content:encoded": "1、生气是拿别人做错的事来惩罚自己。

2、美好的生命应该充满期待、惊喜和感激。

3、世上最累人的事，莫过于虚伪的过日子。

4、总有些人，生来就努力作自己，从没打算讨好谁，用毫不遮掩的锐利锋芒，惊艳了时光。

5、没有特别幸运，那么请先特别努力，别因为懒惰而失败，还矫情地将原因归于自己倒霉。你必须特别努力，才能显得毫不费力。越幸运就得越努力，越懒惰就越倒霉，别人看到的是你累，最后轻松的是你自己。努力和收获，都是自己的，与他人无关。

6、“如果一个人永远一副我什么都不需要的样子，久了狗都会绕着你走。”是吧，既然要逞强，何必怕孤独。

7、我喜欢的婚姻生活是这样的：两个人有各自热爱的事业，工作结束回家腻歪在沙发上，陪孩子或看电视，一起做饭，一起打扫房间，彼此微笑，晚上抱着睡去，早上彼此吻别去工作，一起旅行，一起看电影，一起逛街，有什么话首先会对彼此说起。简简单单，干干净净，如刚洗过的白衬衫。

8、孤独从来就不会毁掉一个人。把自己的头奋命塞进一个不适合自己的圈子，佯装自己不孤独才会毁掉一个人。

9、一个人彻悟的程度，恰等于他所受痛苦的深度。

10、不要疑惑为什么别人会一直伤害你，问问你自己为何你一直允许这种事情发生。

11、你最好学会妥善地处理自己的无聊，找点有意义的事做，尽量减少无聊到发慌的时间。培养点爱好，有一大堆兴致勃勃地想做的事，这些事倒不一定只是一个人做，也可以呼朋唤友的一起去，共同享受生命而不是耗费生命。在无聊的时候想到别人，表面上看起来是爱、依赖感、看重，事实上，也是对别人的不公平。

12、发光并非太阳的专利，你也可以发光。

13、获致幸福的不二法门是珍视你所拥有的、遗忘你所没有的。

14、被人告白觉得都是玩笑，被人喜爱觉得爱不持久，跟刚认识的朋友多说几句话怕别人嫌我烦，跟喜欢的人面前觉得自己不好看，基本上除了打牌时喜欢乱叫地主以外，都活得克制严谨小心翼翼，敏感多心，也该孤独。

15、有理想在的地方，地狱就是天堂。有希望在的地方，痛苦也成欢乐。

16、上帝从不埋怨人们的愚昧，人们却埋怨上帝的不公平。

17、当你周围都是米的时候，你很安逸；当有一天米缸见底，才发现想跳出去已无能为力。有一种陷阱，名叫安逸！别在最能吃苦的年纪选择安逸！ 没有危机！是最大的危机！自己不上进，危机无处不在吞噬你的理想和灵魂，混下去很容易，混上去太难了。

18、觉得自己做得到和做不到，其实只在一念之间。

19、少一点预设的期待，那份对人的关怀会更自在。

20、朋友之间不言谢，遇见，就是幸福。",
          "wp:post_id": "1013",
          "wp:post_date": "2014-12-14 16:42:05",
          "wp:post_date_gmt": "2014-12-14 08:42:05",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "%e5%bf%83%e8%af%ad%ef%bc%9a%e9%81%87%e8%a7%81%ef%bc%8c%e5%b0%b1%e6%98%af%e5%b9%b8%e7%a6%8f",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "%e5%bf%83%e8%af%ad",
            "#cdata-section": "心语"
          },
          "wp:postmeta": {
            "wp:meta_key": "_edit_last",
            "wp:meta_value": "1"
          }
        },
        {
          "title": "前端 JavaScript 架构:1 立即调用的函数表达式",
          "link": "http://www.pernav.com/%e5%89%8d%e7%ab%af-javascript-%e6%9e%b6%e6%9e%841-%e7%ab%8b%e5%8d%b3%e8%b0%83%e7%94%a8%e7%9a%84%e5%87%bd%e6%95%b0%e8%a1%a8%e8%be%be%e5%bc%8f/",
          "pubDate": "Fri, 19 Dec 2014 05:23:17 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=1015"
          },
          "content:encoded": "立即调用的函数表达式 Immediately-invoked Function Expression
目录
1. 简介
2. 猪偷走了什么？
3. 对象是如何变为全局对象的？
4. 为什么全局对象是一个问题？
5. 保护自己的多种方式
6. 进攻！
7. 结论
15 April 2013
原文：Angry Birds of JavaScript: Red Bird - IIFE
1. 简介 ⬆

一群无法无天的猪从无辜的小鸟那里偷走了所有的前端架构，现在小鸟们要把它们夺回来！一队特殊的小鸟英雄将攻击这些卑鄙的猪，直到夺回原本属于它们的前端 JavaScript 架构！
在这篇文章中，我们将看看红色小鸟，它使用可靠的 IIFE 作为攻击武器，而 IIFE 是一切秘密的基础。

2. 猪偷走了什么？ ⬆

很长时间以来，小鸟们习惯了向全局命名空间（window 对象）乱丢它们的自定义对象和函数。随着时间的慢慢推移，小鸟们逐渐学会了利用全局命名空间来保护它们的对象的技术，然而由于近期猪群的入侵，反全局的秘密都被偷走了！侥幸的是这项秘密技术仍然存在缺陷，小鸟们计划攻击猪群，解放原本属于它们的技术。

3. 对象是如何变为全局对象的？ ⬆
一个对象变为全局对象有好几种方式。了解各种方式正是战争的一部分。

1. 在 Window 作用域中声明对象

在下面的例子有两个变量声明，type 和 attack。变量在顶级作用域中声明，因此 window 对象可以访问它们。

var type = \"Red\",
attack = function() {
console.log( type + \" Bird Attacks!\" );
};
console.log( window.type ); // I'm a global variable
console.log( window.attack ); // I'm a global function

2. 任何作用域中未声明的对象

在 JavaScript 中，意外的声明一个全局变量是最危险也是最容易发生的事情是，而这并不是你的初衷。如果你忘记声明一个变量，JavaScript 将把它声明为一个全局变量！这通常不是你的初衷，却在无意中暴漏了应用程序的某些部分。
var type = \"Red\",
attack = function() {
typeOfBird = type + \" Bird\";

return typeOfBird + \" Bird Attacks!\";
};

console.log( window.type ); // I'm a global variable
console.log( window.attack() ); // I'm a global function
console.log( window.typeOfBird ); // I'm a global variable too :(

3. 明确向 Window 添加对象

你也有机会故意向全局命名空间暴漏变量。通过访问 window 对象并手动添加一个属性或方法，你可以很容易的做到这一点。在你的代码深处使用这项技术并不是一个好主意，你可以这么做，但是没什么价值。
var type = \"Red\",
attack = function() {
typeOfBird = type + \" Bird\";

window.message = typeOfBird + \" Attacks!\";

return typeOfBird + \" Bird Attacks!\";
};

console.log( window.type ); // I'm a global variable
console.log( window.attack() ); // I'm a global function
console.log( window.typeOfBird ); // I'm a global variable too :(
console.log( window.message ); // I'm a global variable too :|

4. 为什么全局对象是一个问题？ ⬆
与你的代码冲突
和你同属一个公司的开发人员，可能会定义在你的程序中已存在的同名函数、方法或属性，这是有风险的。如果你没有一套机制来减少全局命名空间中的条目，随着你的程序变得更大和更复杂，意外重新分配变量的风险随之增加。

You may dismiss this reason because you have rigid code reviews and all your developers know your codebase inside out. If that describes you, then check out the next reason ;) 你可能会反驳这个原因，因为你拥有严格的代码审核，并且所有的开发人员都透彻了解你的代码库。如果你觉得这说的是你，那么看看下一个原因 ;)

与你的代码和第三方库冲突
拥有多个全局对象的另一个风险是，你的代码可能与你所使用的第三方库冲突。存在大量的库、插件和框架，并不是所有这些第三方库都了解和意识到要保持全局变量到最小集。你的代码和这些库可能会发生冲突，并覆盖彼此的行为，这可能导致意想不到的结果。

你可能会反驳这个原因，因为你深入的审视你的团队所使用的所有第三方库，并且充分了解这些库暴露的全局变量。如果你觉得这说的是你，那么看看下一个原因 :)

与你的代码和浏览器附加元件/扩展/插件冲突
拥有多个全局对象的最后一个风险是，你的代码可能与浏览器本身冲突。什么！？！那以谷歌浏览器 Chrome 为例。Chrome 的插件基于 JavaScript，并且当你的网页加载后，你安装的所有插件会在你的网页上运行。你永远不会知道用户安装了什么插件，这就导致一个风险，这些附加元件会暴露全局变量并和你的代码库发生冲突。

这似乎有些牵强？好吧，它仅仅一种可能，但是我确实看到过一个高调的网站（不想提是哪个）遇到了这个特殊问题。我试着使用这个网站，但是它崩溃了。我认识这个开发人员，然后我联系到了他。经过一番反复，结果是我曾经安装的一个插件导致了网站崩溃。我联系到插件作者，然后他们更新了代码，现在一切运行正常。

5. 保护自己的多种方式 ⬆
虽然上面的代码片段非常简短和简单，但是它们向全局命名空间暴露了太多的变量。那么，我们该如何保护自己呢？

对象字面量
防止全局变量扩展的最简单的方法是，使用一个对象字面量来收集所有全局对象，把它们附加到一个中间对象。
11
// Gather type &amp; attack and make properties off higher level object
var bird = {
type: \"Red\",
attack: function() {
console.log( this.type + \" Bird Attacks!\" );
}
};

console.log( window.bird ); // Only 1 global object!
console.log( window.bird.type ); // Red
console.log( window.bird.attack() ); // Red Bird Attacks!

立即调用的函数表达式
解决全局问题的另一项技术是立即调用的函数表达式（IIFE）。这项技术比对象字面量更复杂，但是也更强大。这项继续允许开发人员向消费者公开公共和私有的属性和方法。

在我们进入正题之前，先解释一些怪异的语法，稍后会看到。在 JavaScript 中，变量的作用域由函数作用域决定，而不是块级作用域。因为，假设如果在一条 'if' 语句中决定了一个变量，这个变量在包含它的函数的所有地方都是可见的。对于曾经使用 C、C++、C#、Java 或类似语言的开发人员来说，这个看起来有点不和谐。

下面，我们将利用函数作用域这一特性来创建一个匿名函数（没有名字的函数），并立即调用它。

// Error: JavaScript can't parse this correctly
function() {
// All memory is contained within this scope
}(); // &lt;-- Immediately Invoked

不幸的是，上面的代码片段在 JavaScript 中不能工作，因为不能正确的解析他。思路是对的，但是实现有一点点偏差。值得庆幸的，有一种简单的方式让 JavaScript 知道我们在做什么，就是用一组额外的括号包裹这个表达式。

// JavaScript can parse this just fine now, yay!
(function() {
// All memory is contained within this scope
}()); // &lt;-- Immediately Invoked

下面的模式被称为 Revealing Module Pattern。你应该注意到，IIFE 被用于创建特殊的函数作用域，而且在末尾返回了作用域的一部分，它们是你想公开给对象的，而任何没有返回的部分将是私有的。
// Revealing Module Pattern
var bird = (function() {
var type = \"Red\",
power = \"IIFE\", // This is private
attack = function() {
console.log( type + \" Bird Attacks with an \" + power + \"!\" );
};

return { // Only the items returned are public
type: type,
attack: attack
};
}());

console.log( window.bird ); // Only 1 global object!
console.log( window.bird.type ); // Public property
console.log( window.bird.attack() ); // Public method accessing private var
console.log( window.bird.power ); // Private variable, can't access

你可能也遇到过下面这种替代语法，它在很多库和框架中很流行（很受欢迎）。这种模式使用了 IIFE，但是传入了一个全局变量作为命名空间。代码片段 window.bird = window.bird || {} 以一种奇特的方式来检查 bird 对象是否存在，如果不存在就创建一个新对象。在 IIFE 中，添加到 bird 对象的都变为公开的，而其他的则都变为私有的。可以重复这种模式，用各种组件来构建一个库。

(function( bird ) {
var power = \"IIFE\"; // This is private

bird.type = \"Red\";
bird.attack = function() {
console.log( bird.type + \" Bird Attacks with an \" + power + \"!\" );
};
}( window.bird = window.bird || {} ));

console.log( window.bird ); // Only 1 global object!
console.log( window.bird.type ); // Public property
console.log( window.bird.attack() ); // Public method accessing private var
console.log( window.bird.power ); // Private variable, can't access

6. 进攻！ ⬆
下面是一个用 boxbox 构建的简版 Angry Birds，boxbox 是一个用于 box2dweb 的框架，由 Bocoup 的 Greg Smith 编写。
按下空格键来发射红色小鸟，你也可以使用方向键。
7. 结论 ⬆
这些技术对一个前端应用程序是至关重要的，因为它可以保护自己免受其他代码的干扰，并且可以通过封装的方式组织你的代码。
@sunnylost 补充：Dun, dun, daaaaaaaaaa! 应该是在模拟背景音乐，类似于这种 http://missingno.ocremix.org/musicpages/game_on.html",
          "wp:post_id": "1015",
          "wp:post_date": "2014-12-19 13:23:17",
          "wp:post_date_gmt": "2014-12-19 05:23:17",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "%e5%89%8d%e7%ab%af-javascript-%e6%9e%b6%e6%9e%841-%e7%ab%8b%e5%8d%b3%e8%b0%83%e7%94%a8%e7%9a%84%e5%87%bd%e6%95%b0%e8%a1%a8%e8%be%be%e5%bc%8f",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "%e5%89%8d%e7%ab%af-javascript-%e6%9e%b6%e6%9e%84",
            "#cdata-section": "前端 JavaScript 架构"
          },
          "wp:postmeta": [
            {
              "wp:meta_key": "_yoast_wpseo_focuskw",
              "wp:meta_value": "前端 JavaScript 架构:1 立即调用的函数表达式"
            },
            {
              "wp:meta_key": "_aioseop_description",
              "wp:meta_value": "前端 JavaScript 架构:1 立即调用的函数表达式"
            },
            {
              "wp:meta_key": "_wpas_done_all",
              "wp:meta_value": "1"
            },
            {
              "wp:meta_key": "_edit_last",
              "wp:meta_value": "1"
            },
            {
              "wp:meta_key": "_yoast_wpseo_metadesc",
              "wp:meta_value": "前端 JavaScript 架构:1 立即调用的函数表达式"
            },
            {
              "wp:meta_key": "_aioseop_keywords",
              "wp:meta_value": "前端 JavaScript 架构:1 立即调用的函数表达式"
            },
            {
              "wp:meta_key": "_aioseop_title",
              "wp:meta_value": "前端 JavaScript 架构:1 立即调用的函数表达式"
            },
            {
              "wp:meta_key": "_yoast_wpseo_metakeywords",
              "wp:meta_value": "前端 JavaScript 架构:1 立即调用的函数表达式"
            },
            {
              "wp:meta_key": "_yoast_wpseo_linkdex",
              "wp:meta_value": "71"
            }
          ]
        },
        {
          "title": "前端 JavaScript 架构:2 事件 & 消息",
          "link": "http://www.pernav.com/%e5%89%8d%e7%ab%af-javascript-%e6%9e%b6%e6%9e%842-%e4%ba%8b%e4%bb%b6-%e6%b6%88%e6%81%af/",
          "pubDate": "Fri, 19 Dec 2014 05:24:32 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=1017"
          },
          "content:encoded": "事件 &amp; 消息 Events &amp; Messaging
目录
1. 简介
1.1 战报
1.2 绿鸟的攻击
2. 猪偷走了什么？
3. 应用程序示例
4. 紧耦合代码
5. 消息类型
5.1 观察者事件
5.2 中介事件
5.3 混合事件
5.4 该用哪个？
6. 附加资源
7. 松耦合代码
8. 攻击！
9. 结论
20 April 2013
原文：Angry Birds of JavaScript: Blue Bird - Events
1. 简介 ⬆

一群无法无天的猪从无辜的小鸟那里偷走了所有的前端架构，现在小鸟们要把它们夺回来！一队特殊的小鸟英雄将攻击这些卑鄙的猪，直到夺回原本属于它们的前端 JavaScript 架构！鸟们最终会成功吗？它们会打败那些培根味儿的敌人吗？让我们一起揭示 JavaScript 之愤怒的小鸟系列的另一个扣人心弦的章节！

1.1 战报 ⬆
Red Bird - IIFE

1.2 绿鸟的攻击 ⬆
在这篇文章中，我们将看看蓝色小鸟，它通过触发事件和消息来分散穿透猪群的城堡。渐渐的，小鸟们将一个接一个地夺回属于它们的东西！

2. 猪偷走了什么？ ⬆
小鸟们过去经常用组件构建 Web 应用，而组件之间却是硬编码依赖关系。最终它们引入了事件和消息，开始学习如何降低耦合度。不幸的是，猪群在入侵中偷走了小鸟们的观察者秘密。一只蓝色小鸟被派去夺回被盗的东西，并恢复松耦合组件。

3. 应用程序
为了理解消息的必要性，我们先看看下面的 Web 应用，它从 Netflix 搜索电影。我们将展示这个应用的初始代码，然后重构它。

4. 紧耦合代码 ⬆
上面应用的第一个版本使用下面的 JavaScript 代码实现。看看这段代码，试着理解它。这可能很痛苦，但还是先忍一下 ;)

$( document ).on( \"click\", \".term\", function( e ) {
$( \"input\" ).val( $( this ).text() );
$( \"button\" ).trigger( \"click\" );
});

$( \"button\" ).on( \"click\", function( e ) {
var searchTerm = $( \"input\" ).val(),
url = \"http://odata.netflix.com/Catalog/Titles?$filter=substringof('\" +
escape( searchTerm ) + \"',Name)&amp;$callback=callback&amp;$format=json\";

$( \".help-block\" ).html( function( index, html ) {
return e.originalEvent ?
html + \", \" + \"&lt;a href='#' class='term'&gt;\" + searchTerm + \"&lt;/a&gt;\" : html;
});

$.ajax({
dataType: \"jsonp\",
url: url,
jsonpCallback: \"callback\",
success: function( data ) {
var rows = [];
$.each( data.d.results, function( index, result ) {
var row = \"\";
if ( result.Rating &amp;&amp; result.ReleaseYear ) {
row += \"&lt;td&gt;\" + result.Name + \"&lt;/td&gt;\";
row += \"&lt;td&gt;\" + result.Rating + \"&lt;/td&gt;\";
row += \"&lt;td&gt;\" + result.ReleaseYear + \"&lt;/td&gt;\";
row = \"&lt;tr&gt;\" + row + \"&lt;/tr&gt;\";
rows.push( row );
}
});
$( \"table\" ).show().find( \"tbody\" ).html( rows.join( \"\" ) );
}
});
});

上面的代码示例是一个典型的 jQuery 示例，在互联网上随处可见。这段代码可以工作，但是在一个地方放置了很多不同功能的代码。事件处理、数据检索和数据处理都混在一起。你可以想象一下，这段代码可能会继续增长，从而变得越来越容易出现错误。在我们想得太远之前，先顺便看看有些什么事件，以及事件有些什么类型。

5. 消息类型 ⬆
5.1 观察者事件 ⬆
如果你熟悉 Web 前端开发的话，观察者事件很可能是最常用的一种事件。在 DOM 中，你可以为一个元素添加事件处理函数。元素直接引用了回调函数，当事件发生时回调函数被调用。

document.getElementById( \"bird\" )
// Native addEventListener attaches observer to the DOM element
.addEventListener( \"click\", function() { console.log( \"Catapult!\" ); }, false );

$( \"#bird\" )
// Old school event helpers attaches observer to the DOM element
.click( function() { console.log( \"Flying through the air...\" ); } )
// Old school bind method attaches observer to the DOM element
.bind( \"click\", function() { console.log( \"COWABUNGA!\" ); } )
// New school 2 parameter on method attaches observer to the DOM element
.on( \"click\", function() { console.log( \"Destroy those pesky pigs!\" ); } );

// Event is triggered and the list of observers are notified
$( \"#bird\" ).trigger( \"click\" );

5.2 中介事件 ⬆
在过去几年的 Web 前端开发中，中介事件或消息变得越来越普遍。其主要思想是用另外一个实体跟踪消息的发布和订阅。中介事件与观察者事件的主要区别在于，它不直接引用触发事件的主体。

var channel = postal.channel(),
$lastUpdated = $( \"#lastUpdated\" );

// Subscribe to all bird.launch messages
channel.subscribe( \"bird.launch\", function( data ) {
console.log( \"Launch the blue birds at a \" + data.angle + \" angle!\" );
});

// Subscribe to all bird.reset messages
channel.subscribe( \"bird.reset\", function( data ) {
console.log( \"Resetting blue birds to the catapult.\" );
});

// Subscribe to all messages that match the bird.* wildcard!
channel.subscribe( \"bird.*\", function( data ) {
$lastUpdated.text( moment().format( \"MMMM Do YYYY, h:mm:ss a\" ) );
});

// Publish some messages with optional data
channel.publish( \"bird.launch\", { angle: 45 } );
channel.publish( \"bird.reset\" );

有几个库可以简化中介事件。下面是一份可供选择的清单。个人推荐试试 Jim 的 postal.js 库。
Ben Alman's (@cowboy) Tiny jQuery Pub/Sub library
Peter Higgin's (@phiggins) pubsub.js library
Jim Cowart's (@ifandelse) postal.js library ← Recommended
Dustin Diaz's (@ded) reqwest library
appendTo's (@appendTo) AmplifyJS Pub/Sub component

5.3 混合事件 ⬆
另外一种事件则混合了观察者事件和中介事件。它看起来像一个中介事件，但如果你仔细看的话，可以从事件的起源追溯到最初的主体。一个很好的例子是 jQuery 的代理事件模型。代理事件很棒，因为它基于事件沿着 DOM 树向上冒泡的概念，所以我们可以跟踪到事件源。

// Observer is attached to the #pigs element where impact events are delegated
$( \"#pigs\" ).on( \"impact\", \".pig\", function( e ) {
console.log( \"I know which pig was impacted: \" + e.target.innerHTML );
console.log( \"I know where the subscribers are listed: \" + e.delegateTarget.id );
console.log( \"I can invoke another subscriber if I want!\" );
$._data( e.delegateTarget, \"events\" ).secret[ 0 ].handler( e );
$( this ).text( \"Bacon\" );
});

$( \"#pigs\" ).on( \"secret\", \".pig\", function( e ) {
console.log( \"Shh, I'm hiding. Don't tell anyone...\" );
});

// Event is triggers on the .pig element and bubble up to the #pigs element
$( \".pig:first\" ).trigger( \"impact\" );

顺便说一句，我不建议使用 $._data() 方法，因为它不是公开方法，不能保证在未来的 jQuery 版本中是可用的。它是 jQuery 目前在使用的一个内部方法。我想告诉你的是，订阅者不需要一个真正的中介事件也能方便的获取信息。不要误会我的意思，我很喜欢 jQuery 的代理事件。我只想表达它是上述两种概念混合后的结果。

5.4 该用哪个？ ⬆
概念都讲清楚了，但是该使用哪些类型的事件或消息，以及何时使用呢？这是一个好问题，我的朋友 Jim 最近的一篇文章中也提到了这个问题。下面他文章的一段引用...

组件内部使用观察者，在组件之间使用中介者。
Jim 推荐模块内部的通信使用观察者事件（jQuery 的 .on() 方法），组件之间的通信则使用中介事件（postal.js）。

Jim 在他的文章中提出的另一项技术是提升观察者事件为中介事件，这样可以两全其美。他展示了一些很棒的例子。我推荐你去看看他的文章，在下面的参考资料中用粗体标记了出来。

6. 附加资源 ⬆
如果你想了解上述概念的更多信息，读读下面关于事件和消息的资源。

7. 松耦合代码 ⬆
我原打算用 Backbone.js 或构造函数来编写下面的代码，但是为了保持简单和表达消息的理念，我把它们都移除了。因此，虽然这可能不是实际代码库的代码，但我还是希望能表达的清楚些。

var channel = postal.channel();

$( document ).on( \"click\", \".term\", function( e ) {
var term = $( this ).text();

e.preventDefault();
$( \"input\" ).val( term );
channel.publish( \"searchTerm.changed\", { term: term } );
});

$( \"button\" ).on( \"click\", function() {
channel.publish( \"searchTerm.changed\", { term: $( \"input\" ).val() } );
});

channel.subscribe( \"searchTerm.changed\", function( data ) {
netflix.getTitles( data.term, function( titles ) {
channel.publish( \"netflix.titles.updated\", titles );
});
});

channel.subscribe( \"searchTerm.changed\", function( data ) {
$( \".help-block\" ).html( function( index, html ) {
return ~html.indexOf( data.term ) ? html :
html + \", \" + \"&lt;a href='#' class='term'&gt;\" + data.term + \"&lt;/a&gt;\";
});
});

channel.subscribe( \"netflix.titles.updated\", function( titles ) {
var rows = [];
$.each( titles, function( index, result ) {
var row = \"\";
if ( result.Rating &amp;&amp; result.ReleaseYear ) {
row += \"&lt;td&gt;\" + result.Name + \"&lt;/td&gt;\";
row += \"&lt;td&gt;\" + result.Rating + \"&lt;/td&gt;\";
row += \"&lt;td&gt;\" + result.ReleaseYear + \"&lt;/td&gt;\";
row = \"&lt;tr&gt;\" + row + \"&lt;/tr&gt;\";
rows.push( row );
}
});
$( \"table\" ).show().find( \"tbody\" ).html( rows.join( \"\" ) );
});

window.netflix = {
getTitles: function( term, callback ) {
var url = \"http://odata.netflix.com/Catalog/Titles?$filter=substringof('\" +
escape( term ) + \"',Name)&amp;$callback=callback&amp;$format=json\";

$.ajax({
dataType: \"jsonp\",
url: url,
jsonpCallback: \"callback\",
success: function( data ) { callback( data.d.results ); }
});
}
};

8. 攻击！ ⬆
下面是一个用 boxbox 构建的简版 Angry Birds，boxbox 是一个用于 box2dweb 的框架，由 Bocoup 的 Greg Smith 编写。
按下空格键来发射蓝色小鸟，你也可以使用方向键。如果花了很长时间也不能摧毁猪群，那么你可能要考虑多按几次空格键了 ;

9. 结论 ⬆
在 Web 应用中可以使用事件和消息实现组件通信。事件允许一个组件同自身通信，消息则允许一个组件以非硬编码的方式监听其他组件。
还有许多其他的前端架构技术被猪群偷走了。在下篇文章中，另一只愤怒的小鸟将继续复仇！Dun, dun, daaaaaaa!

@sunnylost 补充：Dun, dun, daaaaaaaaaa! 应该是在模拟背景音乐，类似于这种 http://missingno.ocremix.org/musicpages/game_on.html",
          "wp:post_id": "1017",
          "wp:post_date": "2014-12-19 13:24:32",
          "wp:post_date_gmt": "2014-12-19 05:24:32",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "%e5%89%8d%e7%ab%af-javascript-%e6%9e%b6%e6%9e%842-%e4%ba%8b%e4%bb%b6-%e6%b6%88%e6%81%af",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "%e5%89%8d%e7%ab%af-javascript-%e6%9e%b6%e6%9e%84",
            "#cdata-section": "前端 JavaScript 架构"
          },
          "wp:postmeta": [
            {
              "wp:meta_key": "_edit_last",
              "wp:meta_value": "1"
            },
            {
              "wp:meta_key": "_wpas_done_all",
              "wp:meta_value": "1"
            },
            {
              "wp:meta_key": "_yoast_wpseo_linkdex",
              "wp:meta_value": "71"
            },
            {
              "wp:meta_key": "_aioseop_keywords",
              "wp:meta_value": "前端 JavaScript 架构:2 事件 & 消息"
            },
            {
              "wp:meta_key": "_aioseop_description",
              "wp:meta_value": "前端 JavaScript 架构:2 事件 & 消息"
            },
            {
              "wp:meta_key": "_aioseop_title",
              "wp:meta_value": "前端 JavaScript 架构:2 事件 & 消息"
            },
            {
              "wp:meta_key": "_yoast_wpseo_focuskw",
              "wp:meta_value": "前端 JavaScript 架构:2 事件 & 消息"
            },
            {
              "wp:meta_key": "_yoast_wpseo_metadesc",
              "wp:meta_value": "前端 JavaScript 架构:2 事件 & 消息"
            },
            {
              "wp:meta_key": "_yoast_wpseo_metakeywords",
              "wp:meta_value": "前端 JavaScript 架构:2 事件 & 消息"
            }
          ]
        },
        {
          "title": "前端 JavaScript 架构:3 模块化 & 依赖管理 & 性能优化",
          "link": "http://www.pernav.com/%e5%89%8d%e7%ab%af-javascript-%e6%9e%b6%e6%9e%843-%e6%a8%a1%e5%9d%97%e5%8c%96-%e4%be%9d%e8%b5%96%e7%ae%a1%e7%90%86-%e6%80%a7%e8%83%bd%e4%bc%98%e5%8c%96/",
          "pubDate": "Fri, 19 Dec 2014 05:26:43 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=1019"
          },
          "content:encoded": "模块化 &amp; 依赖管理 &amp; 性能优化 RequireJS
目录
1. 简介
1.1 战报
1.2 黄色小鸟的攻击
2. 猪偷走了什么？
3. 崩溃的应用
4. RequireJS 基础
4.1 定义方法
4.2 请求方法
5. 修正后的应用
6. 优化
7. 其他资源
8. 攻击！
9. 结论
21 April 2013
原文：Angry Birds of JavaScript: Yellow Bird RequireJS

1. 简介 ⬆
一群无法无天的猪从无辜的小鸟那里偷走了所有的前端架构，现在小鸟们要把它们夺回来！一队特殊的小鸟英雄将攻击这些卑鄙的猪，直到夺回原本属于它们的前端 JavaScript 架构！小鸟们最终会成功吗？它们会打败那些培根味儿的敌人吗？让我们一起揭示 JavaScript 之愤怒的小鸟系列的另一个扣人心弦的章节！

1.1 战报 ⬆
Red Bird - IIFE
Blue Bird - Events

1.2 黄色小鸟的攻击 ⬆

在这片文章中，我们将看看黄色小鸟，它用速度助推器 RequireJS 和动态注入脚本攻击那些讨厌的猪。渐渐地，小鸟们将一个接一个地夺回属于它们的东西！

2. 猪偷走了什么？ ⬆
小鸟们过去经常手动向 HTML 文件中添加 script 标签。起初这不是一个问题，但是当它们的应用开始变得更大更复杂时，组织代码、解决依赖关系和确定性能优化策略变得困难重重。值得庆幸的是，小鸟们引入了 RequireJS 库，这个库可以管理代码模块、异步加载脚本、管理依赖关系，并提供了一种简单的优化方式。不幸的是，在最近的一次入侵中，猪群从小鸟们那里偷走了 RequireJS 库。

一只黄色小鸟被派去夺回被盗的 RequireJS 库。它将用加速度的力量摧毁猪群，夺回属于它们的东西。

3. 崩溃的应用 ⬆
我们先从一个简单的小网页开始，其中包含了几个脚本文件。你会看到，我加载了 3 个常用库（jQuery、Underscore、Postal），并且在结尾处加载了一些自定义代码。
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head lang=\"en\"&gt;
&lt;meta charset=\"utf-8\"&gt;
&lt;title&gt;Angry Birds&lt;/title&gt;
&lt;link rel=\"stylesheet\" href=\"./css/style.css\"&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;script src=\"./libs/jquery.min.js\"&gt;&lt;/script&gt;
&lt;script src=\"./libs/postal.min.js\"&gt;&lt;/script&gt;
&lt;script src=\"./libs/underscore.min.js\"&gt;&lt;/script&gt;
&lt;script&gt;
var channel = postal.channel();

channel.subscribe( \"pig.collide\", function() {
console.log( \"Pig Down!\" );
});
channel.publish( \"pig.collide\" );
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;

上面的代码看起来相当简单，但当我运行这个网页时，开发工具的控制台打印了下面的错误...
内心对白：“什么！？！我没有在任何地方看到 each 方法。这到底是怎么回事？哦，天啊，看起来像是在 postal.min.js 的某处发生的异常。发现了一个 BUG... 但是等等！？！哦，这里面可能还有别的东西。”

好吧，真正的问题并不是 postal.js 的 bug，而是 postal.js 依赖于 underscore.js。而 underscore.js 应该在 postal.js 之前就被加载。通过简单的重新排列 script 标签，就能很容易地解决这个问题。在上述情况下的修复显然微不足道，但是想像一下，一旦项目开始变大，并且需要大量的脚本时，修复工作会变得多么繁重。

4. RequireJS 基础 ⬆
在开始看如何用 RequireJS 解决上述情况之前，让我们先来高度概括一下这个库能为我们做些什么。RequireJS 是一个异步模块加载器，提供的 API 允许我们定义和请求模块。这两个功能都很好理解，所以我们先看看它们。

4.1 定义方法 ⬆
创建一个模块需要一个名字、一个依赖关系列表和一个回调函数。
// File Name: my-first-module.js

// The name of the module defaults to the name of the file by convention
define(
[ \"underscore\", \"jquery\" ], // Array of dependencies needed for this module
function( _, $ ) { // Callback with parameters matching dependencies requested
// Underscore and jQuery have both been loaded and are available for use with
// the `_` &amp; `$` variables

return { // This will be available in callback of whoever requires this module
message: \"Hello World!\"
};
}
);

4.2 请求方法 ⬆
在应用的某些地方，你需要使用 require 函数来开始执行代码。

require(
[ \"my-first-module\" ], // Array of dependencies that are needed
function( firstModule ) { // Callback with parameters matching dependencies
console.log( firstModule.message );
}
);

5. 修正后的应用 ⬆
我用 RequireJS 重新调整了上面的小应用。你应该注意到，下面的代码移除了所有 script 标签，除了指向 require.js 库的标签。RequireJS 知道从哪里开始执行，因为我们添加了一个 HTML5 属性 data-main，它描述了主脚本的位置。

&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head lang=\"en\"&gt;
&lt;meta charset=\"utf-8\"&gt;
&lt;title&gt;Angry Birds&lt;/title&gt;
&lt;link rel=\"stylesheet\" href=\"./css/style.css\"&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;!--
You'll notice that the markup is cleaned up dramatically
The data-main HTML5 attribute defines where to kick things off
--&gt;
&lt;script src=\"./libs/require.min.js\" data-main=\"./js/main\"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;

主脚本有一段配置部分，可以在其中为现有的 AMD 模块指定别名，也可以为未预定义的库应用垫片。尽管 jQuery 和 Postal 定义自身为 AMD 模块，我们仍然要在配置中包含它们，因为它们没有被放在 main.js 的旁边。

你不必在配置中包含应用程序中的所有自定义模块。你可以通过文件路径和名称引用它们。

/* main.js */
// Let RequireJS know where all the scripts are
require.config({
paths: {
\"jquery\": \"../libs/jquery.min\",
\"underscore\": \"../libs/underscore.min\",
\"postal\": \"../libs/postal.min\"
},
shim: {
// Underscore.js doesn't know about AMD, so you have to shim it
underscore: {
exports: \"_\"
}
}
});

// The postal.js library internally defined that it needs the underscore library
// so RequireJS will load postal, which in turn will load its underscore
require([ \"postal\" ], function( postal ) {
var channel = postal.channel();

channel.subscribe( \"pig.collide\", function() {
console.log( \"Pig Down!\" );
});

channel.publish( \"pig.collide\" );
});

6. 优化 ⬆
我们的应用只包含了 5 个脚本文件，但你也知道，我们的应用只会持续添加额外的脚本。所以，理想的做法是用一种简单的方式将脚本合并和压缩，从而达到更好的生产性能。通过使用 RequireJS 定义应用的依赖关系可以实现这一目标。

值得庆幸的是，有一个称为 r.js 的工具可以收集依赖信息，并用这些信息生成一个合并和压缩过的脚本文件。你可以通过 Node 包管理器 npm install requirejs 安装这个工具。

你可以在控制台中把命令行参数都传给这个工具，但我更喜欢在运行这个工具之前先创建一个构建配置文件，来定义所以

({
appDir: \".\", // The main root URL
dir: \"../dist\", // Directory that we build to
mainConfigFile: \"main.js\", // Location of main.js
name: \"main\", // Name of the module that we are loading
optimizeCss: \"standard\", // Standard optimization for CSS
removeCombined: true, // Temporary combined files will be removed
paths : {
\"jquery\": \"libs/jquery.min\",
\"underscore\": \"libs/underscore.min\",
\"postal\": \"libs/postal.min\"
}
})
定义 build.js 文件之后，你可以把这个文件作为参数传给 r.js。运行这条命令 r.js -o build.js，你可以在控制台看到这个工具的输出，就像下面这样。

$ r.js -o build.js
Optimizing (standard) CSS file: C:/Users/Elijah/Desktop/demo/dist/css/style.css

Tracing dependencies for: main
Uglifying file: C:/Users/Elijah/Desktop/demo/dist/build.js
Uglifying file: C:/Users/Elijah/Desktop/demo/dist/libs/jquery.min.js
Uglifying file: C:/Users/Elijah/Desktop/demo/dist/libs/postal.min.js
Uglifying file: C:/Users/Elijah/Desktop/demo/dist/libs/require.min.js
Uglifying file: C:/Users/Elijah/Desktop/demo/dist/libs/underscore.min.js
Uglifying file: C:/Users/Elijah/Desktop/demo/dist/main.js
Uglifying file: C:/Users/Elijah/Desktop/demo/dist/r.js

css/style.css
----------------
css/style.css

C:/Users/Elijah/Desktop/demo/src/main.js
----------------
C:/Users/Elijah/Desktop/demo/src/main.js
7. 其他资源 ⬆
关于 RequireJS 和优化工具 r.js 所能的所有事情，我仅仅触及到了皮毛。如果你有兴趣了解关于这些概念的更多信息，你可能想看看下面这些资源。

Jack Franklin's (@jack_franklin) Introduction to RequireJS article
Jeffrey Way's (@jeffrey_way) A RequireJS, Backbone, and Bower Starter Template screencast
Cary Landholt's (@carylandholt) RequireJS Basics video
Jonathan Creamer's (@jcreamer898) Using Require.js in an ASP.NET MVC application article

8. 攻击！ ⬆
下面是一个用 boxbox 构建的简版 Angry Birds，boxbox 是一个用于 box2dweb 的框架，由 Bocoup 的 Greg Smith 编写。
按下空格键来发射黄色小鸟，你也可以使用方向键。
9. 结论 ⬆
Web 前端应用可以快速变得相当复杂。理想的做法是提供某种结构和依赖关系管理，以及用一种简单的方式优化最终结果。由于黄色小鸟的努力，小鸟们已经夺回了值得信赖的 RequireJS 工具，并会在它们的下一个应用程序中使用它。

@sunnylost 补充：Dun, dun, daaaaaaaaaa! 应该是在模拟背景音乐，类似于这种 http://missingno.ocremix.org/musicpages/game_on.html",
          "wp:post_id": "1019",
          "wp:post_date": "2014-12-19 13:26:43",
          "wp:post_date_gmt": "2014-12-19 05:26:43",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "%e5%89%8d%e7%ab%af-javascript-%e6%9e%b6%e6%9e%843-%e6%a8%a1%e5%9d%97%e5%8c%96-%e4%be%9d%e8%b5%96%e7%ae%a1%e7%90%86-%e6%80%a7%e8%83%bd%e4%bc%98%e5%8c%96",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "%e5%89%8d%e7%ab%af-javascript-%e6%9e%b6%e6%9e%84",
            "#cdata-section": "前端 JavaScript 架构"
          },
          "wp:postmeta": [
            {
              "wp:meta_key": "_edit_last",
              "wp:meta_value": "1"
            },
            {
              "wp:meta_key": "_wpas_done_all",
              "wp:meta_value": "1"
            },
            {
              "wp:meta_key": "_yoast_wpseo_linkdex",
              "wp:meta_value": "71"
            },
            {
              "wp:meta_key": "_aioseop_title",
              "wp:meta_value": "3 模块化 & 依赖管理 & 性能优化"
            },
            {
              "wp:meta_key": "_aioseop_description",
              "wp:meta_value": "3 模块化 & 依赖管理 & 性能优化"
            },
            {
              "wp:meta_key": "_aioseop_keywords",
              "wp:meta_value": "3 模块化 & 依赖管理 & 性能优化"
            },
            {
              "wp:meta_key": "_yoast_wpseo_focuskw",
              "wp:meta_value": "3 模块化 & 依赖管理 & 性能优化"
            },
            {
              "wp:meta_key": "_yoast_wpseo_metadesc",
              "wp:meta_value": "3 模块化 & 依赖管理 & 性能优化"
            },
            {
              "wp:meta_key": "_yoast_wpseo_metakeywords",
              "wp:meta_value": "3 模块化 & 依赖管理 & 性能优化"
            }
          ]
        },
        {
          "title": "前端 JavaScript 架构:4 应用分层 & 解耦合 Model & Collection & View",
          "link": "http://www.pernav.com/%e5%89%8d%e7%ab%af-javascript-%e6%9e%b6%e6%9e%844-%e5%ba%94%e7%94%a8%e5%88%86%e5%b1%82-%e8%a7%a3%e8%80%a6%e5%90%88-model-collection-view/",
          "pubDate": "Fri, 19 Dec 2014 05:28:21 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=1024"
          },
          "content:encoded": "应用分层 &amp; 解耦合 Model &amp; Collection &amp; View
目录
1. 简介
1.1 战报
1.2 黑鸟的攻击
2. 猪偷走了什么？
3. 纠结的蠕虫大杂烩
4. Backbone.js 基础
5. 重构紧耦合代码
5.1 RequireJS
5.2 模型
5.3 集合
5.4 视图
6. 附加资源
7. 攻击！
8. 结论
21 April 2013
原文：Angry Birds of JavaScript: Black Bird - Backbone
1. 简介 ⬆

一群无法无天的猪从无辜的小鸟那里偷走了所有的前端架构，现在小鸟们要把它们夺回来！一队特殊的小鸟英雄将攻击这些卑鄙的猪，直到夺回原本属于它们的前端 JavaScript 架构！

小鸟们最终会成功吗？它们会打败那些培根味儿的敌人吗？让我们一起揭示 JavaScript 之愤怒的小鸟系列的另一个扣人心弦的章节！

1.1 战报 ⬆
Red Bird - IIFE
Blue Bird - Events
Yellow Bird - RequireJS
1.2 黑鸟的攻击 ⬆
在这边文章中，我们将看看黑色小鸟，它用有组织条理的 Backbone.js 炸弹对付这些小肥猪。渐渐的，小鸟们将一个接一个地夺回属于它们的东西！

2. 猪偷走了什么？ ⬆
小鸟们过去经常把 jQuery 代码写得像是一个令人纠结的蠕虫大杂烩。它们把视图、模型、展现逻辑混淆在了一起。过了一段时间之后，一只黑色小鸟，它们的祖先之一，引入了 Backbone.js 库，并向小鸟们展示了一种思考 Web 前端应用开发的不同方式。然而，在最近的入侵中，猪群从小鸟哪里偷走了 Backbone.js，并把它抬回了它们那肮脏的猪圈。一只黑色小鸟被派去夺回被盗的 Backbone.js。它将用爆炸性的组织之力（power of organization）摧毁猪群，夺回属于它们的东西。

3. 纠结的蠕虫大杂烩 ⬆
让我们再看看下面的应用，Blue Bird 之前的攻击中已经处理过。通过增加消息可以理清混乱，但这里要介绍的是如何使用 Backbone.js 达到同样的目的。下面是正在运行的程序...

有时 Plunker 不能正确的嵌入。这个应用是一个简单的 Netflix 搜索接口，会展示 Netflix 返回的结果。如果 Plunker 不能开始工作，我会把这个演示很快转移到别处。很抱歉给你带来不便。

再次提醒你，这是上面的 Web 应用的实现代码。你应该注意的是，很多关注点被混合在了一起（DOM 事件、修改视图、Ajax 通信等）
$( document ).on( \"click\", \".term\", function( e ) {
e.preventDefault();
$( \"input\" ).val( $( this ).text() );
$( \"button\" ).trigger( \"click\" );
});

$( document ).ready( function() {
$( \"button\" ).on( \"click\", function( e ) {
var searchTerm = $( \"input\" ).val();
var url = \"http://odata.netflix.com/Catalog/Titles?$filter=substringof('\" +
escape( searchTerm ) + \"',Name)&amp;$callback=callback&amp;$format=json\";

$( \".help-block\" ).html( function( index, html ) {
return e.originalEvent ? html + \", \" + \"&lt;a href='#' class='term'&gt;\" +
searchTerm + \"&lt;/a&gt;\" : html;
});

$.ajax({
dataType: \"jsonp\",
url: url,
jsonpCallback: \"callback\",
success: function( data ) {
var rows = [];
$.each( data.d.results, function( index, result ) {
var row = \"\";
if ( result.Rating &amp;&amp; result.ReleaseYear ) {
row += \"&lt;td&gt;\" + result.Name + \"&lt;/td&gt;\";
row += \"&lt;td&gt;\" + result.Rating + \"&lt;/td&gt;\";
row += \"&lt;td&gt;\" + result.ReleaseYear + \"&lt;/td&gt;\";
row = \"&lt;tr&gt;\" + row + \"&lt;/tr&gt;\";
rows.push( row );
}
});
$( \"table\" ).show().find( \"tbody\" ).html( rows.join( \"\" ) );
}
});
e.preventDefault();
});
});

你发现了问题了吗？编写类似上面的代码非常诱人，但我希望你能看到，协同和维护这样的代码将是一种负担。不过不要担心，我们都写过类似上面的代码。好消息是我们不必再用那种方式写代码。让我们来看看 Backbone.js 是什么，以及在这种情况下它如何帮助我们。

还有很多其他的前端 MV* 框架（Knockout、AngularJS、EmberJS 及其他）可以结构化上面的代码。我鼓励你选择一个工具，使用并适应它。
4. Backbone.js 基础 ⬆
Backbone.js has several pieces that can all work together to make a web application. You don't have to use all of these components, but they are available if you choose to use them. Backbone.js 含有几个组件，它们可以协同合作构建一个 Web 应用。我不必使用所有这些组件，但是你如果选择使用它们，它们就是有用的。

模型 Model - 表示数据，以及数据相关的逻辑
集合 Collection - 模型的有序集合
视图 View - 一个模块，带有渲染方法、依赖一个模型
路由 Router - 提供可链接和可分享 URL 的机制
事件 Event - 观察者事件模型
路由器 History - 提供操作历史的能力（支持后退按钮）
同步 - 可扩展组件，提供与服务端的 RESTful 通信
5. 重构紧耦合代码 ⬆
让我们试着重构上面的 jQuery 代码，并且使用 Backbone.js 分离各种关注点。

在这篇文章中，我不打算涉及所有上述组件，只会专注于 3 个主要组件（模型、集合、视图）。我会涉及到一些 Sync 组件，但它是作为其他主题的一部分出现。如果你想深入钻研这些主题，我在末尾列出了一些资源。

5.1 RequireJS ⬆
在我们开始模型、集合和视图之前，我想先展示如何使用 RequireJS ，来帮助我们从 index.html 页面中提取出所有脚本。

如果你之前从没见过 RequireJS，你可能需要阅读之前关于 RequireJS 的愤怒的黄色小鸟一文。
main.js ⬆

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
require.config({
paths: {
jquery: \"https://ajax.googleapis.com/ajax/libs/jquery/1.8.0/jquery.min\",
underscore: \"http://underscorejs.org/underscore\",
backbone: \"http://backbonejs.org/backbone\",
postal: \"http://cdnjs.cloudflare.com/ajax/libs/postal.js/0.8.2/postal.min\",
bootstrap: \"http://netdna.bootstrapcdn.com/twitter-bootstrap/2.2.0/js/bootstrap.min\"
},
shim: {
underscore: {
exports: \"_\"
},
backbone: {
deps: [ \"jquery\", \"underscore\" ],
exports: \"Backbone\"
},
bootstrap: {
\"deps\" : [ \"jquery\" ]
}
}
});

require( [ \"jquery\", \"search-view\", \"search\", \"movie-view\", \"movies\" ],
function( $, SearchView, Search, MovieView, Movies ) {
$( document ).ready( function() {
var searchView = new SearchView({
el: $( \"#search\" ),
model: new Search()
});

var movieView = new MovieView({
el: $( \"#output\" ),
collection: new Movies()
});
});
});

上面的代码定义了 jQuery、Underscore、Backbone、Postal 和 Bootstrap 的路径。我们需要为 Underscore、Backbone、Bootstrap 使用垫片，因为它们没有被定义为 AMD 模块。

然后，函数 require 被调用，用来在回调函数被调用之前请求一组依赖库。到那时，jQuery 和所有其他视图和模型将准备就绪。

5.2 模型 ⬆
我们将创建 2 个模型（Seach 和 Movie）来表示上面的应用。

下面的 Search 模型相当简单，它的主要任务是响应 term 属性的变化。我们使用 Backbone 的事件（观察者事件）来监听模型的变化，然后传播消息到 Postal.js（中介事件）。关于这些术语的更多信息以及它们的不同之处，可以参考关于事件的愤怒的蓝色小鸟一文。

search.js ⬆

1
2
3
4
5
6
7
8
9
10
11
define( [ \"backbone\", \"channels\" ], function( Backbone, channels ) {
var Model = Backbone.Model.extend({
initialize: function() {
this.on( \"change:term\", function( model, value ) {
channels.bus.publish( \"search.term.changed\", { term: value } );
});
}
});

return Model;
});

下面的 Movie 模型也没有很多事情要做。它的主要目的是解析服务端返回的数据，并把结果映射为更易于管理的结构。这样我们只需要关心 releaseYear, rating, 和 name 属性。

movie.js ⬆

1
2
3
4
5
6
7
8
9
10
11
12
13
14
define( [ \"backbone\" ], function( Backbone ) {
var Model = Backbone.Model.extend({
defaults: { term: \"\" },
parse: function( data, xhr ) {
return {
releaseYear: data.ReleaseYear,
rating: data.Rating,
name: data.Name
};
}
});

return Model;
});

5.3 集合 ⬆
正如我们在上面描述的，集合只是一组模型。下面的代码也只是一组 Movie 模型。集合定义了从服务器的哪个位置获取模型列表。这个应用的后端是 Netflix，并且稍微有点复杂，因为我们需要用一个函数来动态建立 URL。我们还定义了一个 parse 方法，用来直接获取内容数组，内容将被映射到 Movie 模型。因为这个 Ajax 使用的是 JSONP，我们还需要覆盖 sync 方法提供一些额外选项。

movies.js ⬆

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
define( [ \"backbone\", \"movie\" ], function( Backbone, Movie ) {
var Collection = Backbone.Collection.extend({
model: Movie,
url: function() {
return \"http://odata.netflix.com/Catalog/Titles?$filter=substringof('\" +
escape( this.term ) + \"',Name)&amp;$callback=callback&amp;$format=json\";
},
parse : function( data, xhr ) {
return data.d.results;
},
sync: function( method, model, options ) {
options.dataType = \"jsonp\";
options.jsonpCallback = \"callback\";

return Backbone.sync( method, model, options );
}
});

return Collection;
});

5.4 视图 ⬆
I see the View as more of a Presenter than the typical MVC View you might normally think of. Anyway, We have 2 views in this application that we will briefly look at. 我认为视图更像一个 Presenter，与通常认为的传统 MVC 视图相比。这个应用有 2 个视图，我们简要地看看。

下面的 SearchView 处理与 DOM 和模型的交互。属性 events 主要用于监听 DOM 事件，在这里是等待点击按钮或点击搜索记录链接。这些元素的改变将存在在模型中，属性名为 term。方法 initialize 设置了一些事件来监听属性 term 的变化。如果 term 发生变化，部分 UI 会相应的发生变化。

search-view.js ⬆

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
define( [ \"jquery\", \"backbone\", \"underscore\", \"channels\" ],
function( $, Backbone ) {

var View = Backbone.View.extend({
events: {
\"click button\": \"searchByInput\",
\"click .term\": \"searchByHistory\"
},
initialize: function() {
this.model.on( \"change\", this.updateHistory, this );
this.model.on( \"change\", this.updateInput, this );
},
searchByInput: function( e ) {
e.preventDefault();

this.model.set( \"term\", this.$( \"input\" ).val() );
},
searchByHistory: function( e ) {
var text = $( e.target ).text();

this.model.set( \"term\", text );
},
updateHistory: function() {
var that = this;

this.$el.find( \".help-block\" ).html( function(index, html) {
var term = that.model.get( \"term\" );

return ~html.indexOf( term ) ? html :
html + \", \" + \"&lt;a href='#' class='term'&gt;\" + term + \"&lt;/a&gt;\";
});
},
updateInput: function() {
this.$el.find( \"input\" ).val( this.model.get(\"term\") );
}
});

return View;
});

下面的 MovieView 与上面的视图略有不同。首先要指出的是怪异的 text!movie-template.html。我使用了 RequireJS 的 text.js 插件，允许将文本资源作为依赖练的一部分。这对于使用标记文件的场景很有用，可能是使用模板引擎时，也可能是使用与某个特定组件有关的 CSS 文件时。在方法 initialize 内部，我们订阅了 term 的变化消息，然后要求集合从服务器获取（fetch）信息。从服务器检索到数据之后，方法 render 被调用，并且使用 Underscore 将结果模板化为 DOM。

movie-view.js ⬆

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
define( [ \"jquery\", \"backbone\", \"underscore\", \"channels\", \"text!movie-template.html\" ],
function( $, Backbone, _, channels, template ) {
var View = Backbone.View.extend({
template: _.template( template ),
initialize: function() {
var that = this;

_.bindAll( this, \"render\" );
channels.bus.subscribe( \"search.term.changed\", function( data ) {
that.collection.term = data.term;
that.collection.fetch({
success: that.render
});
});
},
render: function() {
var html = this.template({ movies: this.collection.toJSON() });
this.$el.show().find( \"tbody\" ).html( html );
}
});

return View;
});

下面是模板文件，假如你正疑惑的话。我使用了 Underscore 的模板引擎，类似于 John Resig 在数年前写的的 Micro-Templating 实现。还有其他可用的模板库，我选择这个是因为它所在的 Underscore 是 Backbone 的先决条件。如果我需要更多功能，我会选择 Handlebars，不过，那是另一只愤怒的小鸟的故事了 ;)

movie-template.html ⬆

1
2
3
4
5
6
7
&lt;% _.each( movies, function( movie ) { %&gt;
&lt;tr&gt;
&lt;td&gt;&lt;%= movie.name %&gt;&lt;/td&gt;
&lt;td&gt;&lt;%= movie.rating %&gt;&lt;/td&gt;
&lt;td&gt;&lt;%= movie.releaseYear %&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;% }); %&gt;

6. 附加资源 ⬆
关于 Backbone.js 可以做的事情，我只涉及到一些皮毛。如果有兴趣了解关于这些概念的更多信息，看看下面的资源。

下面的资源从博客文章 Beginner HTML5, JavaScript, jQuery, Backbone, and CSS3 Resources 获得。
Backbone.js API
Annotated Backbone.js Code
Backbone Extensions, Plugins, &amp; Resources
Backbone Boilerplate
Backbone Fundamentals eBook by Addy Osmani(@addyosmani)
Peep Code: Backbone.js Video Series by Geoffery Grosenbach(@topfunky) and David Goodlad(@dgoodlad)
The Pragmatic Bookshelf: Hands-on Backbone.js by Derick Bailey(@derickbailey)
Backbone.js Screencasts by Joey Beninghove
Pluralsight: Backbone.js Fundamentals by Liam McLennan(@liammclennan)
The Skinny on BackboneJS by Ben Howdle(@benhowdle)
Backbone Tutorials
Backbone.js Tutorials via Nettuts
Exploring Backbone.js Series by Jack Franklin(@jack_franklin)

7. 攻击！ ⬆
下面是一个用 boxbox 构建的简版 Angry Birds，boxbox 是一个用于 box2dweb 的框架，由 Bocoup 的 Greg Smith 编写。
按下空格键来发射黑色小鸟，你也可以使用方向键。

8. 结论 ⬆
Web 前端应用可以快速变得相当复杂。在你知道这点之前，如果你不小心就会导致关系混乱。值得庆幸的是，Backbone.js 提供了组件来帮助你把应用分割为可用的小模块，并且每个小模块各司其职。感谢黑色小鸟为小鸟们夺回了 Backbone。事情被有条理地组织起来，并安排在合适的位置上，现在，小鸟们可以安心休息了。

@sunnylost 补充：Dun, dun, daaaaaaaaaa! 应该是在模拟背景音乐，类似于这种 http://missingno.ocremix.org/musicpages/game_on.html",
          "wp:post_id": "1024",
          "wp:post_date": "2014-12-19 13:28:21",
          "wp:post_date_gmt": "2014-12-19 05:28:21",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "%e5%89%8d%e7%ab%af-javascript-%e6%9e%b6%e6%9e%844-%e5%ba%94%e7%94%a8%e5%88%86%e5%b1%82-%e8%a7%a3%e8%80%a6%e5%90%88-model-collection-view",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "%e5%89%8d%e7%ab%af-javascript-%e6%9e%b6%e6%9e%84",
            "#cdata-section": "前端 JavaScript 架构"
          },
          "wp:postmeta": [
            {
              "wp:meta_key": "_edit_last",
              "wp:meta_value": "1"
            },
            {
              "wp:meta_key": "_wpas_done_all",
              "wp:meta_value": "1"
            },
            {
              "wp:meta_key": "_aioseop_title",
              "wp:meta_value": "4 应用分层 & 解耦合 Model & Collection & View"
            },
            {
              "wp:meta_key": "_aioseop_keywords",
              "wp:meta_value": "4 应用分层 & 解耦合 Model & Collection & View"
            },
            {
              "wp:meta_key": "_aioseop_description",
              "wp:meta_value": "4 应用分层 & 解耦合 Model & Collection & View"
            },
            {
              "wp:meta_key": "_yoast_wpseo_focuskw",
              "wp:meta_value": "4 应用分层 & 解耦合 Model & Collection & View"
            },
            {
              "wp:meta_key": "_yoast_wpseo_metadesc",
              "wp:meta_value": "4 应用分层 & 解耦合 Model & Collection & View"
            },
            {
              "wp:meta_key": "_yoast_wpseo_metakeywords",
              "wp:meta_value": "4 应用分层 & 解耦合 Model & Collection & View"
            },
            {
              "wp:meta_key": "_yoast_wpseo_linkdex",
              "wp:meta_value": "71"
            }
          ]
        },
        {
          "title": "前端 JavaScript 架构:5 代码质量 Coding Standard, Linting, Analysis",
          "link": "http://www.pernav.com/%e5%89%8d%e7%ab%af-javascript-%e6%9e%b6%e6%9e%845-%e4%bb%a3%e7%a0%81%e8%b4%a8%e9%87%8f-coding-standard-linting-analysis/",
          "pubDate": "Fri, 19 Dec 2014 05:29:35 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=1026"
          },
          "content:encoded": "代码质量 Coding Standard, Linting, Analysis
目录
1. 简介
1.1 战报
1.2 白鸟的攻击
2. 猪偷走了什么？
3. JavaScript 编码标准
4. JavaScript Linting
5. JavaScript Analysis
6. 进攻！
7. 结论
18 April 2013
原文：Angry Birds of JavaScript: White Bird Linting
私货：nuysoft/Aristotle
1. 简介 ⬆
一群无法无天的猪从无辜的小鸟那里偷走了所有的前端架构，现在小鸟们要把它们夺回来！一队特殊的小鸟英雄将攻击这些卑鄙的猪，直到夺回原本属于它们的前端 JavaScript 架构！鸟们最终会成功吗？它们会打败那些培根味儿的敌人吗？让我们一起揭示 JavaScript 之愤怒的小鸟系列的另一个扣人心弦的章节！
1.1 战报 ⬆
Red Bird - IIFE
Blue Bird - Events
Yellow Bird - RequireJS
Black Bird - Backbone
1.2 白鸟的攻击 ⬆
在这篇文章中，我们将看看白鸟，它看似无害，但当它祭出严格编码风格和质量突击检查时，猪群无疑要开始尖叫了。渐渐的，小鸟们将一个接一个地夺回属于它们的东西。

2. 猪偷走了什么？ ⬆
小鸟们学习如何编程的方式略有不同。有些小鸟是自学成才，而有些小鸟则是上大学学习计算机科学。即使这些群体中不乏经验丰富和才华惊艳之才，但是当小鸟们聚在一起构建它们的第一个大型应用时，这变成了一场巨大的灾难。每个小鸟都认为它们的编码标准才是正确的方法，这种想法导致了问题和冲突。有一天出现了一只智慧的白鸟，它建议大家制定一套通用的编码实践并遵循它。此外，这只白鸟还引入了一些工具，来帮助大家确立标准和发现问题，并提前关注可能恶化的问题。

然而在最近的一次入侵中，猪群偷走了小鸟们的编码标准文档和代码质量工具！现在，一只白鸟被派去夺回被盗的文档和工具。它将用压倒性的质量之力摧毁猪群，夺回属于它们的东西。

3. JavaScript 编码标准 ⬆
有很多编码标准可供选择。重要的是选择一个并坚持下去。如果是你在一个团队中，其他成员也应该在某些标准上达成一致意见。如果找不到大家都同意的标准，那么选择一个近似的，并允许有一些例外。

通过这样做你会发现...

开发人员将能更块的理解其他人的代码
合并代码库不再是一件可怕的事
建立标准确实可以减少缺陷
代码库更统一
关于谁才是正确的分歧将减少
...写下你发现的好处...
这里有一些我知道的编码标准...

Douglas Crockford 的 JavaScript 编程语言代码约定
Rich Waldron（@rwaldron）的 Idiomatic.js - 通用一致的 JavaScript 编写原则 ← 推荐
jQuery 的 JavaScript 风格指南 ← 推荐
Google 的 JavaScript 风格指南
Addy Osmani 曾写过一篇很棒的文章 [JavaScript 风格指南和美化工具]，深入地阐述了各种代码风格，并用示例演示了如何遵守推荐的标准。

4. JavaScript Linting ⬆
Linter 工具可以帮助查找代码中的错误和潜在问题。通常 Linter 还可以帮助你实施编码标准，无论你选择的是上述列表中的哪种编码标准。

实际上有几种 JavaScript Linter 可供选择，其中我最喜欢的是 Anton Kovalyov 创建的 JSHint。JSHint 是社区共同努力的成果，前身是广受欢迎的 JSLint 库，由 Douglas Crockford 编写。关注这个项目的成长过程让我很享受。JSHint 有大量的选项，你可以选择开启或禁用，然后找出最适合团队的配置。

JSHint 可以执行的标准检查包括...

用 === 代替 ==
使用未定义的变量
声明未使用的变量
在循环中声明函数
还有很多...
完整的选项列表请参阅 JSHint 文档。

我很喜欢最近添加的一些选项，包括：

maxcomplexity - 最大循环复杂度（参见后面引用的维基百科）
maxstatements - 函数允许的语句条数最大值
maxparams - 函数允许的参数个数最大值
maxdepth - 函数允许的最大深度
maxlen - 单行代码的最大长度
“一段代码的循环复杂度是指代码中线性独立路径的个数。” -- http://en.wikipedia.org/wiki/Cyclomatic_complexity

/*jshint maxparams:3, maxdepth:2, maxstatements:5, maxcomplexity:3, maxlen:80 */
/*global console:false */

(function( undefined ) {
\"use strict\";

function test1( arg1, arg2, arg3, arg4 ) {
console.log( \"too many parameters!\" );
if ( arg1 === 1 ) {
console.log( arg1 );
if ( arg2 === 2 ) {
console.log( arg2 );
if( arg3 === 3 ) {
console.log( \"too much nesting!\" ); console.log( arg3 ); console.log( arg4 );
}
}
}
console.log( \"too many statements!\" );
}

test1( 1, 2, 3, 4 );
}());

JSHint 在检查上面的代码片段后生成下面的错误：

幸运的是， 你不必每次都运行 JSHint 来检查整个网站的代码。有几种方式可以将 JSHint 集成到你的代码编辑器：

VIM Plugin (jshint.vim)
Sublime Text 2 Extension (Sublime Linter)
TextMate Bundle (JSHint TextMate Bundle)
Visual Studio Web Essentials
Eclipse IDE (JSHint Integration)
在无敌神鹰一文中，我们将谈论使用 JSHint 的另一种方式：命令行，以及如何使 JSHint 自动化。

5. JavaScript Analysis ⬆
代码 Linting 很棒，但有时我们希望能看到代码库的简要概览，并且可以深入分析代码的一小部分。幸运的是有一个叫 Plato 工具可以分析你的代码，并提供可视化的报表，你可以通过报表浏览应用的复杂度。这个工具需要 Node 环境，通过 npm install plato -g 安装。

译注：Plato - 柏拉图（古希腊哲学家）。
安装 Plato 之后，你可以在命令行中运行 plato -r -d report myDirectory，将递归分析 myDirectory 目录中的代码，并将结果导出到 report 目录。

如果你在 jQuery 的源代码上运行 Plato，将生成类似下面的报告。正如你所见，平均代码行数随着时间减少，这是个好现象。可维护性也不错，然后柱状图详细列出了每个 JavaScript 文件的可维护性。再往下的柱状图列出了每个文件的代码行数、每个文件的预计错误数，以及每个文件的 JSLint 错误数。
如果深入到某个文件，你将看到下面的视图。这份报告最棒的地方是用一种容易掌握的方式展示了每个函数的复杂度和代码行数。你可以快速跳到文件的不同部分，审查该工具标识出的关注点。
你可以到 Plato 的 GitHub 库查看上面的 jQuery 报告。

6. 进攻！ ⬆
下面是一个用 boxbox 构建的简版 Angry Birds，boxbox 是一个用于 box2dweb 的框架，由 Bocoup 的 Greg Smith 编写。
Press the space bar to launch the White Bird and you can also use the arrow keys. 按下空格键来发射白鸟，你也可以使用方向键。
7. 结论 ⬆
前端 Web 应用可以很快变得相当复杂。如果开发人员不能达成共识，事情可能马上土崩瓦解，特别是在一个大型项目中。形成统一的代码标准和使用一些工具来避免问题，才能真正有助于项目成功。
@sunnylost 补充：Dun, dun, daaaaaaaaaa! 应该是在模拟背景音乐，类似于这种 http://missingno.ocremix.org/musicpages/game_on.html",
          "wp:post_id": "1026",
          "wp:post_date": "2014-12-19 13:29:35",
          "wp:post_date_gmt": "2014-12-19 05:29:35",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "%e5%89%8d%e7%ab%af-javascript-%e6%9e%b6%e6%9e%845-%e4%bb%a3%e7%a0%81%e8%b4%a8%e9%87%8f-coding-standard-linting-analysis",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "%e5%89%8d%e7%ab%af-javascript-%e6%9e%b6%e6%9e%84",
            "#cdata-section": "前端 JavaScript 架构"
          },
          "wp:postmeta": [
            {
              "wp:meta_key": "_edit_last",
              "wp:meta_value": "1"
            },
            {
              "wp:meta_key": "_yoast_wpseo_linkdex",
              "wp:meta_value": "74"
            },
            {
              "wp:meta_key": "_wpas_done_all",
              "wp:meta_value": "1"
            },
            {
              "wp:meta_key": "_aioseop_title",
              "wp:meta_value": "5 代码质量 Coding Standard, Linting, Analysis"
            },
            {
              "wp:meta_key": "_aioseop_description",
              "wp:meta_value": "5 代码质量 Coding Standard, Linting, Analysis"
            },
            {
              "wp:meta_key": "_aioseop_keywords",
              "wp:meta_value": "5 代码质量 Coding Standard, Linting, Analysis"
            },
            {
              "wp:meta_key": "_yoast_wpseo_focuskw",
              "wp:meta_value": "5 代码质量 Coding Standard, Linting, Analysis"
            },
            {
              "wp:meta_key": "_yoast_wpseo_metadesc",
              "wp:meta_value": "5 代码质量 Coding Standard, Linting, Analysis"
            },
            {
              "wp:meta_key": "_yoast_wpseo_metakeywords",
              "wp:meta_value": "5 代码质量 Coding Standard, Linting, Analysis"
            }
          ]
        },
        {
          "title": "前端 JavaScript 架构:6 模拟请求 & 模拟数据 Mockjax & mockJSON",
          "link": "http://www.pernav.com/%e5%89%8d%e7%ab%af-javascript-%e6%9e%b6%e6%9e%846-%e6%a8%a1%e6%8b%9f%e8%af%b7%e6%b1%82-%e6%a8%a1%e6%8b%9f%e6%95%b0%e6%8d%ae-mockjax-mockjson/",
          "pubDate": "Fri, 19 Dec 2014 05:30:42 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=1028"
          },
          "content:encoded": "模拟请求 &amp; 模拟数据 Mockjax &amp; mockJSON
目录
1. 简介
1.1 战报
1.2 绿鸟的攻击
2. 猪偷走了什么？
3. Twitter 应用
4. 使用 api.twitter.com
5. 模拟静态数据
5.1 使用 Mockjax
6. 动态模拟半随机数据
6.1 使用 Mockjax 和 mockJSON
7. 攻击！
8. 结论
15 April 2013
原文：Angry Birds of JavaScript: Green Bird - Mocking
私货：nuysoft/Mock
1. 简介 ⬆
一群无法无天的猪从无辜的小鸟那里偷走了所有的前端架构，现在小鸟们要把它们夺回来！一队特殊的小鸟英雄将攻击这些卑鄙的猪，直到夺回原本属于它们的前端 JavaScript 架构！小鸟们最终会成功吗？它们会打败那些培根味儿的敌人吗？让我们一起揭示 JavaScript 之愤怒的小鸟系列的另一个扣人心弦的章节！
1.1 战报 ⬆
Red Bird - IIFE
Blue Bird - Events
Yellow Bird - RequireJS
Black Bird - Backbone
White Bird - Linting

1.2 绿鸟的攻击 ⬆
在这篇文章中，我们将看看绿鸟，它可以穿越所有那些难以到达的地方，并且伪装和监视那些猪贼！渐渐的，小鸟们将一个接一个地夺回属于它们的东西！

2. 猪偷走了什么？ ⬆
大多数小鸟是纯粹的 Web 前端开发人员，压根儿就不关注后端。然后小鸟们和水牛（Water Buffalo）就形成了一种共生关系。水牛编写应用的后端，小鸟们则开发前端。这种分工导致的问题是，当后端被开发时，小鸟们只能留下来摆弄自己的羽毛，一直到水牛完工。可是一旦后端完工，交付的压力就落在了小鸟们的身上，而水牛则闲坐在水坑边的树荫下无所事事。幸运的是，一段时间后一只绿鸟提出了模拟后端服务的想法，这样在原本需要等待水牛完工的阶段，小鸟们就可以同步进行开发！这只绿鸟还引入了一些便捷库，使得模拟更加容易。
然而在最近的一次入侵中，猪群偷走了小鸟们的模拟库！现在，一只绿鸟被派去找回被盗的模拟库。它将用压倒一切诡计的力量摧毁族群，夺回属于它们的东西。

3. Twitter 应用 ⬆
我们来看一个简单的 Twiter 应用，这个应用将返回一个特定用户的消息。为什么是 Twitter？好吧，因为愤怒的小鸟们和 Twitter 的关系非同寻常，尤其是蓝色的小鸟 ;)
下面的应用通过 JSONP 从 Twitter 抓取数据。我曾经考虑过用 Backbone.js 来编写这个小应用，但是又考虑到这种做法对于介绍模拟概念会是过度设计。你也会注意到我并没有使用模板引擎，恩，我是故意这么做的。另一只愤怒的小鸟会介绍模板概念 ;)

(function( twitter, $, undefined ) {

var channel = twitter.channel = postal.channel(),
URL_TEMPLATE = \"https://api.twitter.com/1/statuses/user_timeline/\" +
\"%(userName)s.json?count=%(count)s&amp;include_rts=1\",
$selection = null;

twitter.selector = null;

twitter.init = function( selector ) {
twitter.selector = selector;

channel.subscribe( \"tweets.available\", twitter.displayTweets );
};

twitter.displayTweets = function( tweets ) {
var $list = $( \"&lt;ul/ &gt;\" ),
$location = $selection || $( twitter.selector );

// This would be better suited for a templating engine,
// but that's for another Angry Bird ;)
$.each( tweets || {}, function( index, tweet ) {
var html = \"&lt;i&gt;\" + moment( tweet.created_at ).fromNow() + \"&lt;/i&gt;: \";
html += \"&lt;b&gt;\" + tweet.user.name + \"&lt;/b&gt; - \";
html += tweet.text;
html += tweet.retweeted ? \" &lt;i class='icon-repeat'&gt;&lt;/i&gt;\" : \"\";
html += tweet.favorited ? \" &lt;i class='icon-star'&gt;&lt;/i&gt;\" : \"\";

$( \"&lt;li /&gt;\", { html: html }).appendTo( $list );
});

$location.append( $list.children() );
};

twitter.getTweets = function( userName, count ) {
var url = _.string.sprintf( URL_TEMPLATE, {
userName: userName,
count: count || 5
});

$.ajax({
url: url,
dataType: \"jsonp\",
success: function( tweets ) {
channel.publish( \"tweets.available\", tweets );
}
});
};

}( window.twitter = window.twitter || {}, jQuery ));

twitter.init( \".tweets\" );

$( document ).on( \"click\", \"button\", function( e ) {
var $input = $( this ).closest( \"form\" ).find( \"input\" );

e.preventDefault();
twitter.getTweets( $input.val() || \"elijahmanor\" );
});

上面的代码运行在下面的内嵌 jsFiddle 中。请随意的运行这些代码，然后打开编辑器玩一下。

4. 使用 api.twitter.com ⬆
从 Twitter 返回的数据看起来就像下面的截图...

5. 模拟静态数据 ⬆
假使 Twitter 宕机或者不稳定，或者你只是想在没有互联网接入的情况下测试你的应用，会怎么样？这正是适合模拟后端服务大展拳脚的场景。而且庆幸的是我们可以使用一个称为 Mockjax 的 jQuery 库。你要做的所有事情是调用 $.mockjax，提供一个要监听的 url 和一个期望的响应。下面是一个模拟请求 api.twitter.com 的示例，将返回一些静态数据。

$.mockjax({
url: \"https://api.twitter.com/1/statuses/user_timeline/*\",
responseTime: 750,
responseText: [
{ id: 0, created_at: \"Mon Apr 11 8:00:00 +0000 2012\", text: \"Test Tweet 1\",
favorited: false, retweeted: false, user: { name: \"User 1\" } },
{ id: 1, created_at: \"Mon Apr 11 9:00:00 +0000 2012\", text: \"Test Tweet 2\",
favorited: true, retweeted: true, user: { name: \"User 2\" } },
{ id: 2, created_at: \"Mon Apr 11 10:00:00 +0000 2012\", text: \"Test Tweet 3\",
favorited: false, retweeted: true, user: { name: \"User 3\" } },
{ id: 3, created_at: \"Mon Apr 11 11:00:00 +0000 2012\", text: \"Test Tweet 4\",
favorited: true, retweeted: false, user: { name: \"User 4\" } },
{ id: 4, created_at: \"Mon Apr 11 12:00:00 +0000 2012\", text: \"Test Tweet 5\",
favorited: true, retweeted: true, user: { name: \"User 5\" } }
]
});

这不仅很酷，还可以帮助前端开发从后端独立出来，而且编写 Ajax 单元测试也非常方便。
上面的代码运行在下面的内嵌 jsFiddle 中。请随意的运行这些代码，然后打开编辑器玩一下。

5.1 使用 Mockjax ⬆
Mockjax 返回的数据看起来就像下面的截图...

6. 动态模拟半随机数据 ⬆
这项技术的缺点之一在于，制造静态数据很是乏味无趣。通常我会先构造一些同样的对象，然后仅仅是把某些值加 1 或加一些其他的东西。这么做不错，但是很讨厌很花时间，而且不能让你了解真正的UI是什么样子。幸运的是还有一个非常棒的、称为 mockJSON的库。你需要提供一个表示真实数据的模板，指定某些字段的期望类型，等等，还有很多... 下面演示的是我如何重写之前的例子，而且会随机生成 5 到 10 个要显示的消息对象。

$.mockjax({
url: \"https://api.twitter.com/1/statuses/user_timeline/*\",
responseTime: 750,
response: function() {
var data = $.mockJSON.generateFromTemplate({
\"tweets|5-10\": [{
\"id|+1\": 0,
\"created_at\": \"Mon Apr 11 @TIME_HH:@TIME_MM:@TIME_SS +0000 2012\",
\"text\": \"@LOREM_IPSUM\",
\"favorited|0-1\": false,
\"retweeted|0-1\": false,
\"user\": { \"name\": \"@MALE_FIRST_NAME @LAST_NAME\" }
}]
});

this.responseText = data.tweets;
}
});

上面的代码运行在下面的内嵌 jsFiddle 中。请随意的运行这些代码，然后打开编辑器玩一下。

6.1 使用 Mockjax 和 mockJSON ⬆
Mockjax 和 mockJSON 返回的数据看起来就像下面的截图...

7. 攻击！ ⬆
下面是一个用 boxbox 构建的简版 Angry Birds，boxbox 是一个用于 box2dweb 的框架，由 Bocoup 的 Greg Smith 编写。
按下空格键来发射绿鸟，你也可以使用方向键。
8. 结论 ⬆
独立开发前端和后端可能有些困难。然而庆幸的是，现在前端开发人员可以借助一些技术和库，从而独立于后端的进度进行开发和构建原型。模拟静态数据这一技术还可以帮助构建单元测试。

@sunnylost 补充：Dun, dun, daaaaaaaaaa! 应该是在模拟背景音乐，类似于这种 http://missingno.ocremix.org/musicpages/game_on.html",
          "wp:post_id": "1028",
          "wp:post_date": "2014-12-19 13:30:42",
          "wp:post_date_gmt": "2014-12-19 05:30:42",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "%e5%89%8d%e7%ab%af-javascript-%e6%9e%b6%e6%9e%846-%e6%a8%a1%e6%8b%9f%e8%af%b7%e6%b1%82-%e6%a8%a1%e6%8b%9f%e6%95%b0%e6%8d%ae-mockjax-mockjson",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "%e5%89%8d%e7%ab%af-javascript-%e6%9e%b6%e6%9e%84",
            "#cdata-section": "前端 JavaScript 架构"
          },
          "wp:postmeta": [
            {
              "wp:meta_key": "_edit_last",
              "wp:meta_value": "1"
            },
            {
              "wp:meta_key": "_wpas_done_all",
              "wp:meta_value": "1"
            },
            {
              "wp:meta_key": "_yoast_wpseo_linkdex",
              "wp:meta_value": "71"
            },
            {
              "wp:meta_key": "_aioseop_title",
              "wp:meta_value": "6 模拟请求 & 模拟数据 Mockjax & mockJSON"
            },
            {
              "wp:meta_key": "_aioseop_keywords",
              "wp:meta_value": "6 模拟请求 & 模拟数据 Mockjax & mockJSON"
            },
            {
              "wp:meta_key": "_aioseop_description",
              "wp:meta_value": "6 模拟请求 & 模拟数据 Mockjax & mockJSON"
            },
            {
              "wp:meta_key": "_yoast_wpseo_focuskw",
              "wp:meta_value": "6 模拟请求 & 模拟数据 Mockjax & mockJSON"
            },
            {
              "wp:meta_key": "_yoast_wpseo_metadesc",
              "wp:meta_value": "6 模拟请求 & 模拟数据 Mockjax & mockJSON"
            },
            {
              "wp:meta_key": "_yoast_wpseo_metakeywords",
              "wp:meta_value": "6 模拟请求 & 模拟数据 Mockjax & mockJSON"
            }
          ]
        },
        {
          "title": "前端 JavaScript 架构:7 模板 - 分离展现和逻辑 Templating",
          "link": "http://www.pernav.com/%e5%89%8d%e7%ab%af-javascript-%e6%9e%b6%e6%9e%847-%e6%a8%a1%e6%9d%bf-%e5%88%86%e7%a6%bb%e5%b1%95%e7%8e%b0%e5%92%8c%e9%80%bb%e8%be%91-templating/",
          "pubDate": "Fri, 19 Dec 2014 05:32:15 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=1030"
          },
          "content:encoded": "模板 - 分离展现和逻辑 Templating
目录
1. 简介
1.1 战报
1.2 橙色小鸟的攻击
2. 猪偷走了什么？
3. 为什么要使用模板引擎？
4. Underscore.js
4.1 示例1
4.2 示例2
4.3 为什么使用 Underscore.js？
5. Handlebars.js
5.1 预编译模板
5.2 为什么使用 Handlebars.js？
6. 其他模板引擎怎么样？
7. 其他资源
8. 攻击！
9. 结论
21 April 2013
原文：Angry Birds of JavaScript: Orange Bird - Templating
1. 简介 ⬆
一群无法无天的猪从无辜的小鸟那里偷走了所有的前端架构，现在小鸟们要把它们夺回来！一队特殊的小鸟英雄将攻击这些卑鄙的猪，直到夺回原本属于它们的前端 JavaScript 架构！小鸟们最终会成功吗？它们会打败那些培根味儿的敌人吗？让我们一起揭示 JavaScript 之愤怒的小鸟系列的另一个扣人心弦的章节！

1.1 战报 ⬆
Red Bird - IIFE
Blue Bird - Events
Yellow Bird - RequireJS
Black Bird - Backbone
White Bird - Linting
Green Bird - Mocking

1.2 橙色小鸟的攻击 ⬆
在这篇文章中，我们将看看橙色小鸟。他开始时是一个简单的小模板，但随之扩大为一场 DOM爆炸，这么做明确的传达了一个消息，那就是小鸟们是认真的。渐渐的，小鸟们将一个接一个地夺回属于它们的东西。

2. 猪偷走了什么？ ⬆
在过去的几年里，我们已经看到一个趋势：越来越多的 Web 开发工作在前端完成。我们通过 Ajax 或 Web Sockets 与后端通信，然后在以某种方式在 UI 中显示数据。小鸟们发现它们主要使用字符串拼接来构建富用户界面，从而导致大量让人讨厌的代码，并且容易出现错误。庆幸的是，一只橙色小鸟站了出来，它说，“有没有比这更好的方式？我们不能通过某种方式把展示从数据中分离出来吗？”，就这样，模板进入了小鸟的世界。橙色小鸟通过借用人类的模板库，例如 Underscore.js 和 Handlebar.js 来满足这种需求。

然而，在最近的一次入侵中，猪群偷走了小鸟们的模板库！现在，一只橙色小鸟被派去夺回失窃的模板库。它将用爆炸性的力量摧毁猪群，夺回属于它们的东西。

3. 为什么要使用模板引擎？ ⬆
在开始模板引擎之前，我建议先看看为什么需要模板引擎。我开发的越多，就越想试图找到将应用的各个部分分开的方式。当太多的东西在同一个地方运行，我开始觉得恶心。看看下面这段代码，然后告诉我你的感受...

(function( twitter, $, undefined ) {
var _selection;

twitter.init = function( $selection ) {
_selection = $selection;
};

twitter.displayTweets = function( tweets ) {
var $list = $( \"&lt;ul/ &gt;\" );

$.each( tweets || {}, function( index, tweet ) {
var html = \"&lt;i&gt;\" + moment( tweet.created_at ).fromNow() + \"&lt;/i&gt;: \";
html += \"&lt;b&gt;\" + tweet.user.name + \"&lt;/b&gt; - \";
html += \"&lt;span&gt;\" + tweet.text + \"&lt;/span&gt;\";
html += tweet.retweeted ? \" &lt;i class='icon-repeat'&gt;&lt;/i&gt;\" : \"\";
html += tweet.favorited ? \" &lt;i class='icon-star'&gt;&lt;/i&gt;\" : \"\";

$( \"&lt;li /&gt;\", { html: html }).appendTo( $list );
});

_selection.empty().append( $list.children() );
};
}( window.twitter = window.twitter || {}, jQuery ));

是的，我不喜欢所有的字符串拼接。如果可能的话，我不希望在我的代码里出现一堆展现。唯一好的一面是它可以工作。你可以在下面的内嵌 jsFiddle 中看到这段代码的输出。
那么，我们能做些什么呢？某些类型的模板引擎对此能有所帮助，它们可以帮助我们简化代码，并从代码中分离标记。

4. Underscore.js ⬆
我们首先看看 Underscore.js 中的模板方法。目前我倾向于我的所有项目中使用 Underscore，所以我已经掌握了它的模板引擎。如果我正在做的事情很简单，那么通常我会默认使用 Underscore 的模板引擎。然而，你会看到它有一些局限性，使得我们看的下一个库更吸引人。

4.1 示例1 ⬆
下面是将上面的代码用 Underscore 的模板重写后的代码。你会注意到代码块已经大大简化。Whoo hooo！

twitter.displayTweets = function( tweets ) {
var templateString = $( \"#tweets-underscore\" ).html(),
template = _.template( templateString );

_selection.empty().append( template( { tweets: tweets } ) );
};

大部分工作由模板完成，模板则爆裂成一堆标记！正如你在左侧看到的，我们的橙色小鸟现在看起来完全不同了 ;)

我们将布局移动到标记中的一个 script 标签中，并赋予它一个唯一标识。模板中的特殊标记 &lt;%= expression &gt; 表示传入数据的展现位置。你也可以用 &lt;% statements &gt; 语法放置任意 JavaScript（例如循环、分支等）！

&lt;script id=\"tweets-underscore\" type=\"text/template\"&gt;
&lt;ul&gt;
&lt;% _.each( tweets, function( tweet ) { %&gt;
&lt;li&gt;
&lt;i&gt;&lt;%= moment( tweet.created_at ).fromNow() %&gt;&lt;/i&gt;:
&lt;b&gt;&lt;%= tweet.user.name %&gt;&lt;/b&gt; -
&lt;span&gt;&lt;%= tweet.text %&gt;&lt;/span&gt;
&lt;% if ( tweet.retweeted ) { %&gt;&lt;i class=\"icon-repeat\"&gt;&lt;/i&gt;&lt;% } %&gt;
&lt;% if ( tweet.favorited ) { %&gt;&lt;i class=\"icon-star\"&gt;&lt;/i&gt;&lt;% } %&gt;
&lt;/li&gt;
&lt;% }); %&gt;
&lt;/ul&gt;
&lt;/script&gt;

你可以在 jsFiddle 中试验上面的代码片段。
正如 Uncle Ben 所说，“能力越大，责任就越大。”

允许在模板中放置任意代码终究不是最好的注意。在模板中放置数据操作逻辑会导致单元测试非常难以进行。试想一下，如果我们开始用越来越多的代码块把模板搞的凌乱不堪，情况会怎么样。如果你选择了这条路，那么你并没有真正解决最初的手头问题，即展示和逻辑混在一些。

4.2 示例2 ⬆
下面是使用 Underscore 的另一个示例，但是这次是先做数据操作。在下面代码中，我用 _.map() 方法把每个 date 属性转换为合适的版本。在把数据传给模板之前遍历数据会导致一些性能开销。

twitter.displayTweets = function( tweets ) {
var templateString = $( \"#tweets-underscore\" ).html(),
template = _.template( templateString );

tweets = _.map( tweets, function( tweet ) {
tweet.created_at = moment( tweet.created_at ).fromNow();
return tweet;
});

_selection.empty().append( template( { tweets: tweets } ) );
};

我们可以移除下面模板中的数据逻辑，因为在调用模板之前，我们已经的在上面的 JavaScript 中完成了这项工作。结果比最初的版本要好，但还可以更好。

&lt;script id=\"tweets-underscore\" type=\"text/template\"&gt;
&lt;ul&gt;
&lt;% _.each( tweets, function( tweet ) { %&gt;
&lt;li&gt;
&lt;i&gt;&lt;%= tweet.created_at %&gt;&lt;/i&gt;:
&lt;b&gt;&lt;%= tweet.user.name %&gt;&lt;/b&gt; -
&lt;span&gt;&lt;%= tweet.text %&gt;&lt;/span&gt;
&lt;% if ( tweet.retweeted ) { %&gt;&lt;i class=\"icon-repeat\"&gt;&lt;/i&gt;&lt;% } %&gt;
&lt;% if ( tweet.favorited ) { %&gt;&lt;i class=\"icon-star\"&gt;&lt;/i&gt;&lt;% } %&gt;
&lt;/li&gt;
&lt;% }); %&gt;
&lt;/ul&gt;
&lt;/script&gt;

你可以在 jsFiddle 中试验上面的代码片段。

4.3 为什么使用 Underscore.js？ ⬆

你可以在模板中使用任意 JavaScript
非常小
如果你已经在使用 Backbone.js，那么可以直接使用它。
如果你已经在使用 Underscore.js，那么可以直接使用它。
你可以预编译
可以同时运行在客户端和服务端
你能想到其他的吗？

你可以在模板中使用任意 JavaScript
模板中没有 `this` 的概念
你能想到其他的吗？

5. Handlebars.js ⬆
总体而言，我倾向于选择 Handlebar.js 而不是 Underscore 的模板引擎。Handlebars 鼓励你分离展现和逻辑，并且速度更快，并且提供了一种预编译模板的机制，我们将对此做稍微深入的研究。

首先，让我们换个角度看看这篇文章想解决的问题。下面的代码用 Handlebars 来模版化解决方案。这段和之前的版本一样干净。你会注意到，我自定义了一个称为 fromNow 的 helper，可以用在模板中。

twitter.init = function( $selection ) {
_selection = $selection;

Handlebars.registerHelper( \"fromNow\", function( time ) {
return moment( time ).fromNow();
});
};

twitter.displayTweets = function( tweets ) {
var templateString = $( \"#tweets-handlebars\" ).html(),
template = Handlebars.compile( templateString );

_selection.empty().append( template( tweets ) );
};

现在看看下面的模板化语法。这种语法与 Underscore 相比更加简洁，这正是我喜欢的。在模板内部，我们使用模板 helper fromNow 转换时间。这么做非常好，因为这样我们就不需要事先遍历数组了，就像我们在使用 Underscore 或把逻辑放入模板时做的。

&lt;script id=\"tweets-handlebars\" type=\"text/x-handlebars-template\"&gt;
&lt;ul&gt;
{{#each this}}
&lt;li&gt;
&lt;i&gt;{{fromNow this.created_at}}&lt;/i&gt;:
&lt;b&gt;{{this.user.name}}&lt;/b&gt; -
&lt;span&gt;{{this.text}}&lt;/span&gt;
{{#if this.retweeted}}&lt;i class=\"icon-repeat\"&gt;&lt;/i&gt;{{/if}}
{{#if this.favorited}}&lt;i class=\"icon-star\"&gt;&lt;/i&gt;{{/if}}
&lt;/li&gt;
{{/each}}
&lt;/ul&gt;
&lt;/script&gt;

你可以在 jsFiddle 中试验上面的代码。

5.1 预编译模板 ⬆
我在前面简要的提到过，我喜欢 Handlebars 的原因之一是，它可以预编译模板。这是什么意思！？！ Underscore 和 Handlebars 都需要你使用模板之前先编译模板（使用 Underscore 时你可以用一个步骤完成，但是在内部仍然需要先编译）。如果你打算多次重用模板，或者你只是希望模板在需要之前已经就绪，那么编译模板是很好的做法。

然而，对 Handlebars 的使用可以走得更远，你可以在服务端编译模板，然后在前端应用它。这意味着可以减少大量的前端工作量，并且你可以使用 Handlebars 的运行时精简版本，其中只包含了执行模板（不是编译模板）所必需的部分。

How cool is that? If your answer was \"It's just about as cool as Batman riding on a Rainbow Unicorn alongside dolphins!\", then you were right! Congratulations ;) 这太酷了，不是吗？如果你的答案是“这就像蝙蝠侠骑着彩虹独角兽和海豚在一起一样！”，那么你是对的，恭喜 ;)

So how does that work exactly? Well, first you install Handlebars on your server using Node... 那么，它到底是如何工作的？好吧，首先你在服务器上用 Node 安装 Handlebars...

npm install -g handlebars

然后提取模板内容（script 标签之间）并保存到一个文件中。在这里我们把它保存为 tweets.tmpl。现在运行 handlebars 预编译模板文件。

handlebars tweets.tmpl -f tweets.tmpl.js

所有动作完成后，你得到了模板的一个预编译版本，现在你可以在前端应用中应用它，就像下面这样...

&lt;script src=\"tweets.tmpl.js\"&gt;&lt;/script&gt;

Now that your template is available on the page you can access it by asking Handlebars for the precompiled version and you are all set to start using it! 现在，你的模板在页面上可访问的，你可以通过请求 Handlebars 得到预编译版本，现在你完全可以开始使用它了。

var template = Handlebars.templates[ \"tweets.tmpl\" ],
markup = template( tweets );
5.2 为什么使用 Handlebars.js？ ⬆
它是一个弱逻辑模板引擎
你可以在服务端预编译模板
支持 Helper 方法
可以运行在客户端和服务端
在模板中支持 `this` 的概念
它是 Mustache.js 的超集
你能想到其他的吗？

6. 其他模板引擎怎么样？ ⬆
这个是一个好问题。也许你的需求和我的不同，或者你只是不喜欢某个我提到的模板引擎。如果是这样的话，那么你应该看看 Garann Means (@garannm) 创建的模板选择器，这是一个伟大的工具。选择器将询问你一组问题，来辅助判断哪个模板引擎适合你的需求。选择器看起就像下面的例子...

7. 其他资源 ⬆
An Introduction to Handlebars by Gabriel Manricks (@GabrielManricks)
Best Practices When Working With JavaScript Templates by Andrew Burgess (@andrew8088)
Demo of Handlebars, and Why You Should Consider a Templating Engine Raymond Camden (@cfjedimaster)
HTML's New Template Tag: Standardizing Client-Side Templating by Eric Bidelman (@ebidel)

8. 攻击！ ⬆
下面是一个用 boxbox 构建的简版 Angry Birds，boxbox 是一个用于 box2dweb 的框架，由 Bocoup 的 Greg Smith 编写。
按下空格键来发射橙色小鸟，你也可以使用方向键。
9. 结论 ⬆
在代码中混入标记会导致一些让人讨厌的代码，这样的代码繁琐、单调，并且难以维护。能够分离各个部分的能力，给开发人员简化代码并保证各部分各司其职带来了极大的好处。值得庆幸的是，像 Underscore 和 Handlebars 这样的库提供了一种清晰的方式，将展现描述从逻辑中分离出来。你可以自由选择使用什么库，但是我鼓励你多进行一些比较，找到最适合你的库。因此这个问题的答案可能是不仅仅使用一个库，这才是一个不错的选择。

@sunnylost 补充：Dun, dun, daaaaaaaaaa! 应该是在模拟背景音乐，类似于这种 http://missingno.ocremix.org/musicpages/game_on.html",
          "wp:post_id": "1030",
          "wp:post_date": "2014-12-19 13:32:15",
          "wp:post_date_gmt": "2014-12-19 05:32:15",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "%e5%89%8d%e7%ab%af-javascript-%e6%9e%b6%e6%9e%847-%e6%a8%a1%e6%9d%bf-%e5%88%86%e7%a6%bb%e5%b1%95%e7%8e%b0%e5%92%8c%e9%80%bb%e8%be%91-templating",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "%e5%89%8d%e7%ab%af-javascript-%e6%9e%b6%e6%9e%84",
            "#cdata-section": "前端 JavaScript 架构"
          },
          "wp:postmeta": [
            {
              "wp:meta_key": "_edit_last",
              "wp:meta_value": "1"
            },
            {
              "wp:meta_key": "_wpas_done_all",
              "wp:meta_value": "1"
            },
            {
              "wp:meta_key": "_yoast_wpseo_linkdex",
              "wp:meta_value": "71"
            },
            {
              "wp:meta_key": "_aioseop_title",
              "wp:meta_value": "7 模板 - 分离展现和逻辑 Templating"
            },
            {
              "wp:meta_key": "_aioseop_keywords",
              "wp:meta_value": "7 模板 - 分离展现和逻辑 Templating"
            },
            {
              "wp:meta_key": "_aioseop_description",
              "wp:meta_value": "7 模板 - 分离展现和逻辑 Templating"
            },
            {
              "wp:meta_key": "_yoast_wpseo_focuskw",
              "wp:meta_value": "7 模板 - 分离展现和逻辑 Templating"
            },
            {
              "wp:meta_key": "_yoast_wpseo_metadesc",
              "wp:meta_value": "7 模板 - 分离展现和逻辑 Templating"
            },
            {
              "wp:meta_key": "_yoast_wpseo_metakeywords",
              "wp:meta_value": "7 模板 - 分离展现和逻辑 Templating"
            }
          ]
        },
        {
          "title": "前端 JavaScript 架构:8 模式 Patterns",
          "link": "http://www.pernav.com/%e5%89%8d%e7%ab%af-javascript-%e6%9e%b6%e6%9e%848-%e6%a8%a1%e5%bc%8f-patterns/",
          "pubDate": "Fri, 19 Dec 2014 05:32:58 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=1031"
          },
          "content:encoded": "模式 Patterns
目录
1. 简介
1.1 战报
1.2 大鸟哥的攻击
2. 猪偷走了什么？
3. 鸟界的四人帮（23 种）
3.1 创建模式（5 种）
3.2 结构模式（7 种）
3.3 行为模式（11 种）
4. JavaScript 中的设计模式
4.1 单例模式
4.2 工厂模式
4.3 桥接模式
4.4 外观模式
4.5 适配器模式
4.6 观察者模式
5. 更多模式
5.1 继承
5.2 链式语法
5.3 封装模式
5.4 有限状态机
6. 建议
7. 其他资源
8. 攻击！
9. 结论
16 April 2013
原文：Angry Birds of JavaScript: Big Brother Bird - Patterns
1. 简介 ⬆
一群无法无天的猪从无辜的小鸟那里偷走了所有的前端架构，现在小鸟们要把它们夺回来！一队特殊的小鸟英雄将攻击这些卑鄙的猪，直到夺回原本属于它们的前端 JavaScript 架构！小鸟们最终会成功吗？它们会打败那些培根味儿的敌人吗？让我们一起揭示 JavaScript 之愤怒的小鸟系列的另一个扣人心弦的章节！

1.1 战报 ⬆
Red Bird - IIFE
Blue Bird - Events
Yellow Bird - RequireJS
Black Bird - Backbone
White Bird - Linting
Green Bird - Mocking
Orange Bird - Templating

1.2 大鸟哥的攻击 ⬆
在这篇文章中，我们将看到大鸟哥祭出它的大规模杀伤性武器：有限状态机以及成熟的设计模式。渐渐的，小鸟们将一个接一个的夺回属于它们的东西！

2. 猪偷走了什么？ ⬆
小鸟们了解如何编程的大部分知识，但是从未形成通用的术语，一些代表了常见场景、同时能被大家理解的术语。然后某一天大鸟哥出现了，并记录了一组常见的设计模式的名称和描述，这样它们在谈论架构时就可以达成共识（就有了共同的语言）。最终大鸟哥的模式广受欢迎，并以四人帮一书闻名于鸟界。

译注：这段文字欢乐的很。
然而在最近的一次猪群入侵中，小鸟们的四人帮书惨重失窃！现在，大鸟哥被派去找回被盗的书。它将用压到一切诡计的力量摧毁猪群，夺回属于它们的东西。

3. 鸟界的四人帮（23 种） ⬆

3.1 创建模式（5 种） ⬆
创建模式涉及到将对象实例化，这类模式都提供一个方法，将客户从所需实例化的对象中解耦。
Abstract Factory
抽象工厂。提供一个接口，用于创建相关或依赖对象的家族，而不需要明确指定具体类。
Builder
构造器。封装一个产品的构造过程，并允许按步骤构造。
Factory Method
工厂方法。定义了一个创建对象的方法，但由子类决定要实例化的类是哪一个。工厂方法让类把实例化推迟到子类。
Prototype
原型。当创建给定类的实例的过程很昂贵或很复杂时，就使用原型模式。
Singleton
单例。确保一个类只有一个实例，并提供一个全局访问点。

3.2 结构模式（7 种） ⬆
结构模式可以让你把类或对象组合到更大的结构中

Adapter
适配器。将一个类的接口，转换成客户期望的另一个接口。适配器让原来接口不兼容的类可以合作无间。
Bridge
桥接。不只改变你的实现，也改变你的抽象。
Composite
组合。允许你将对象组合成树形结构来表现“整体/部分”层次结构。组合能让客户以一致的方式处理个别对象以及对象组合。
Decorator
装饰者。动态地将责任附加到对象上。若要扩展功能，装饰者提供了比继承更有弹性的替代方案。
Facade
外观。提供了一个统一的接口，用来访问子系统中的一群接口。外观定义了一个高层接口，让子系统更容易使用。
Flyweight
蝇量。让某个类的一个实例能用来提供许多“虚拟实例”。
Proxy
代理。为另一个对象提供一个替身或占位符以控制对这个对象的访问。

3.3 行为模式（11 种） ⬆
Chain of Resp.
责任链。让一个以上的对象有机会处理某个请求。
Command
命令。将“请求”封装成对象，以便使用不同的请求，队列或者日志来参数化其他对象。命令模式也支持可撤销的操作。
Interpreter
解释器。为语言创建解释器。
Iterator
迭代器。提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露其内部的表示。
Mediator
中介者。集中相关对象之间复杂的沟通和控制方式。
Memento
备忘录。让对象返回之前的状态。
Observer
观察者。定义了对象之间的一对多依赖，这样一来，当一个对象改变状态时，它的所有依赖者都会收到通知并自动更新。
State
状态。允许对象在内部状态改变时改变它的行为，对象看起来好像修改了它的类。
Strategy
策略。定义了算法族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。
Template Method
模板方法。在一个方法中定义一个算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以在不改变算法结构的情况下，重新定义算法的某些步骤。
Visitor
访问者。当你想要为一个对象的组合增加新的能力，且封装并不重要时，就使用访问者模式。

4. JavaScript 中的设计模式 ⬆

4.1 单例模式 ⬆
单例模式最简单的实现是采用对象字面量，如下面的代码所示。基本上，我们只是创建了一个对象，含有一些属性。从技术角度讲，有人可能会建议使用 Object.create，但是大部分情况下，对象字面量符合单例模式的定义。你可以在本文末尾的推荐资源中找到更强大的解决方案。

译注：Object.create(proto [, propertiesObject ]) 创建一个拥有指定原型和若干个指定属性的对象。

var bird = {
type: \"Red\",
fly: function() {
console.log( \"Weeeee!\" );
},
destroy: function() {
console.log( \"Hasta la vista, baby!\" );
}
};

4.2 工厂模式 ⬆
工厂模式实际是一种不使用 new 关键字来创建新对象的方式。理念是在工厂方法中提取抽象。在下面的例子中，我们不一定要做很多事情，但是你可以想象的到，我们可以沿着这个方向添加一些自定义代码和不会改变的额外 API，这才是工厂模式的关键点所在。

var Bird = function() {};
Bird.factory = function( type ) {
var bird;
if ( typeof Bird[ type ] === \"function\" ) {
bird = new Bird[ type ]();
}
return bird;
};

Bird.Red = function() {};
Bird.Blue = function() {};

var redBird = Bird.factory( \"Red\" );
var blueBird = Bird.factory( \"Blue\" );

4.3 桥接模式 ⬆
在下面的代码片段中，我们在事件处理函数和将要执行的代码（getUrl( url, callback )）之间建立了一个简单的桥接。从而使得被执行的代码（getUrl( url, callback )）更易于测试，因为它不再依赖于 jQuery 传入的上下文元素。

// Not Bridged
var getUrl = function() {
var url = $( this ).attr( \"href\" );

$.ajax({
url: url,
success: function( data ) {
console.log( data );
}
});
};
$( \"a.ajax\" ).on( \"click\", getUrl );

// Bridged
var getUrl = function( url, callback ) {
$.ajax({
url: url,
success: function( data ) {
if ( callback ) { callback( data ); }
}
});
};
var getUrlBridge = function() {
var url = $( this ).attr( \"href\" );

getUrl( url, function( data ) {
console.log( data );
});
}
$( \"a.ajax\" ).on( \"click\", getUrlBridge );

4.4 外观模式 ⬆
外观模式在 Web 前端开发中很普遍，因为有如此多的跨浏览器不一致问题。外观模式为这种不一致提供了一个统一的 API。在下面的代码中，我们将 addEventListener 在不同浏览器中的实现进行逻辑抽象。

// Facade
var addEvent = function( element, type, eventHandler ) {
if ( element.addEventListener ) {
element.addEventListener( type, eventHandler, false );
} else if ( elemement.attachEvent ) {
element.attachEvent( \"on\" + type, eventHandler );
}
};

4.5 适配器模式 ⬆
一个适配器可以轻量的处理一段代码，让其与另一段代码无间合作。当你需要切换到另一个库又无法忍受重写大量代码时，适配器会非常有用。在下面的示例中，我们将修改 jQuery 的 $.when 方法以支持 WinJS.Promise。这是我在 appendTo 工作期间写下的代码，当时我们想让 Windows 8 APP 可以使用 jQuery。你可以在 jquery-win8 找到这个库。

jquery-win8 库的大部分功能已经不再需要了，因为 Jonathan Sampson 已经与 jQuery 开发团队一起协作，以确保他对这一垫片的更新被添加到 jQuery 2.0 版本中，这篇文章记录了这一点

/*!
* jquery-win8-deferred - jQuery $.when that understands WinJS.promise
* version: 0.1
* author: appendTo, LLC
* copyright: 2012
* license: MIT (http://www.opensource.org/licenses/mit-license)
* date: Thu, 01 Nov 2012 07:38:13 GMT
*/
(function () {
var $when = $.when;
$.when = function () {
var args = Array.prototype.slice.call(arguments);

args = $.map(args, function (arg) {
if (arg instanceof WinJS.Promise) {
arg = $.Deferred(function (dfd) {
arg.then(
function complete() {
dfd.resolveWith(this, arguments);
}, function error() {
dfd.rejectWith(this, arguments);
}, function progress() {
dfd.notifyWith(this, arguments);
}
);
}).promise();
}

return arg;
});

return $when.apply(this, args);
};
}());

4.6 观察者模式 ⬆
我们已经在这个系列的 Blue Bird 一文中阐述了观察者模式，这是一个功能强大的模式，可以实现各种组件的解耦。个人推荐使用 postal.js 库。

var channel = postal.channel( \"game\" );

channel.subscribe( \"bird.attack\", function( data ) {
console.log( \"Geronimo!\" );
});

channel.subscribe( \"pig.collide\", function( impact ) {
if ( impact &gt; 100 ) {
console.log( \"AHHHHHHH!\" );
}
});

channel.publish( \"bird.attack\", { angle: 45 } );

5. 更多模式 ⬆
5.1 继承 ⬆
在 JavaScript 中有多种方式实现继承。当你在应用程序中创建对象时，最好了解一下这些模式。

原型继承

var bird = {
name: \"Red Bird\",
power: \"\",
getName: function() {
return this.name;
},
catapult: function() {
return this.name + \" is catapulting with \" + this.power;
}
};

var yellowBird = Object.create( bird );
yellowBird.name = \"Yellow Bird\";
yellowBird.power = \"Speed\";
console.log( yellowBird.catapult() );

模拟继承

var Bird = function( name, power ) {
this.name = name + \" Bird\";
this.power = power || \"\";
};
Bird.prototype.getName = function() {
return this.name;
};
Bird.prototype.catapult = function() {
return this.getName() + \" is catapulting with \" + this.power;
};

var YellowBird = function() {
this.constructor.apply( this, arguments );
};
YellowBird.prototype = new Bird();

var yellowBird = new YellowBird( \"Yellow\", \"Speed\" );
yellowBird.getName = function() {
return \"Super Awesome \" + this.name;
};
console.log( yellowBird.catapult() );

5.2 链式语法 ⬆
因为 jQuery库的缘故，链式语法在前端界变得非常流行。实际上这是一种非常容易实现的模式。基本上，你只需要让每个函数返回 'this'，这样其他函数就可以立即被调用。看看下面的例子。

var bird = {
catapult: function() {
console.log( \"Yippeeeeee!\" );
return this;
},
destroy: function() {
console.log( \"That'll teach you... you dirty pig!\" );
return this;
}
};

bird.catapult().destroy();

5.3 封装模式 ⬆
我们在 Red Bird 一文中已经阐述了封装模式，不过当时说的 IIFE 模式。封装模式允许你拥有公共和私有的属性和方法，以此来封装你的代码。下面是一个非常简单的示例。更多细节请参阅文章 Red Bird。

// IIFE
var yellowBird = (function() {
var superSecret = {
power: \"Speed\"
};

return {
type: \"Red\",
mood: \"Angry\",
goal: \"Vengence\"
}
}());

5.4 有限状态机 ⬆
有限状态机是我最喜欢的模式之一。我的朋友 Jim Cowart（@ifandelse）创建了 Machina.js 库，用来在 JavaScript 中实现这一模式。下面的示例使用状态来描述愤怒的小鸟游戏。更多信息请参阅它的博客文章和 GitHub 库。

var attackFsm = new machina.Fsm({
initialState: \"idle\",
states : {
\"idle\" : {
_onEnter: function() {
this.handle( \"Zzzzzz\" );
},
\"bird.launch\" : function( data ) {
console.log( \"Weeeeee at \" + data.angle + \" degrees!\" );
this.transition( \"attacking\" );
}
},
\"attacking\" : {
_onEnter: function() {
console.log( \"Yay, hear me tweet!\" );
},
\"pig.destroyed\" : function() {
this.transition( \"victorious\" );
},
\"pig.alive\" : function() {
this.transition( \"defeated\" );
}
},
\"victorious\": {
_onEnter: function() {
console.log( \"Yay, we are victorious!\" );
},
\"game.restart\": function() {
this.transition( \"idle\" );
},
\"game.next\": function() {
// Goto next level
this.transition( \"idle\" );
}
},
\"defeated\": {
_onEnter: function() {
console.log( \"You may have won this time, but I'll be back!\" );
},
\"gmae.restart\": function() {
this.transition( \"idle\" );
}
}
}
});

attackFsm.handle( \"bird.launch\", { angle: 45 } );
attackFsm.handle( \"pig.destroyed\" );

6. 建议 ⬆
除了学习这些模式之外，我建议你挑一个喜欢的库，并钻研它们的源代码。在其中你可以学到丰富的知识。起初你可能觉得云山雾罩，但过一段时间你可以从真正理解这些模式的开发者身上收集到大量的模式。你也可以试着只着眼于一个特别的方法并剖析它。如果你不知道到底要去哪里寻找这么一个特别的方法，那么为什么不选择 jQuery 并使用 James Padolsey（@padosley）的 jQuery 源码查看器来帮助你寻找呢？

7. 其他资源 ⬆
已经有太多的模式以至我无法在这里一一列出。在我之前，已经有许多人撰写了关于这些模式的博客，并且以后还会有。如果我错过了什么好模式，请告诉我。

JavaScript Design Patterns by Joe Zim (@JoeZimJS)
JavaScript Design Patterns by Joe Zim (@JoeZimJS)
Understanding Design Patterns in JavaScript by Tilo Mitra (@tilomitra)
Learning JavaScript Design Patterns by Addy Osmani (@addyosmani)
JS Patterns by Shi Chuan (@shichuan)
JavaScript Patterns by Stoyan Stefanov (@xyz)
JavaScript: The Good Parts by Douglas Crockford

8. 攻击！ ⬆
下面是一个用 boxbox 构建的简版 Angry Birds，boxbox 是一个用于 box2dweb 的框架，由 Bocoup 的 Greg Smith 编写。
按下空格键来发射大鸟哥，你也可以使用方向键。
9. 结论 ⬆
好消息是，你不必知道所有的答案也顺利完成 Web 前端开发，但多少了解一些开发中反复遇到的通用模式确实很有帮助。一旦你习惯了这些模式，谈论架构方案将变得更容易，也可以更快的找出解决方案。花一些时间浏览前面推荐的资源，然后仔细考虑那些适合你的模式。

@sunnylost 补充：Dun, dun, daaaaaaaaaa! 应该是在模拟背景音乐，类似于这种 http://missingno.ocremix.org/musicpages/game_on.html",
          "wp:post_id": "1031",
          "wp:post_date": "2014-12-19 13:32:58",
          "wp:post_date_gmt": "2014-12-19 05:32:58",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "%e5%89%8d%e7%ab%af-javascript-%e6%9e%b6%e6%9e%848-%e6%a8%a1%e5%bc%8f-patterns",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "%e5%89%8d%e7%ab%af-javascript-%e6%9e%b6%e6%9e%84",
            "#cdata-section": "前端 JavaScript 架构"
          },
          "wp:postmeta": [
            {
              "wp:meta_key": "_edit_last",
              "wp:meta_value": "1"
            },
            {
              "wp:meta_key": "_wpas_done_all",
              "wp:meta_value": "1"
            },
            {
              "wp:meta_key": "_yoast_wpseo_linkdex",
              "wp:meta_value": "71"
            },
            {
              "wp:meta_key": "_aioseop_title",
              "wp:meta_value": "8 模式 Patterns"
            },
            {
              "wp:meta_key": "_aioseop_description",
              "wp:meta_value": "8 模式 Patterns"
            },
            {
              "wp:meta_key": "_aioseop_keywords",
              "wp:meta_value": "8 模式 Patterns"
            },
            {
              "wp:meta_key": "_yoast_wpseo_focuskw",
              "wp:meta_value": "8 模式 Patterns"
            },
            {
              "wp:meta_key": "_yoast_wpseo_metadesc",
              "wp:meta_value": "8 模式 Patterns"
            },
            {
              "wp:meta_key": "_yoast_wpseo_metakeywords",
              "wp:meta_value": "8 模式 Patterns"
            }
          ]
        },
        {
          "title": "前端 JavaScript 架构:9 自动化 Automation",
          "link": "http://www.pernav.com/%e5%89%8d%e7%ab%af-javascript-%e6%9e%b6%e6%9e%849-%e8%87%aa%e5%8a%a8%e5%8c%96-automation/",
          "pubDate": "Fri, 19 Dec 2014 05:33:13 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=1032"
          },
          "content:encoded": "自动化 Automation
目录
1. 简介
1.1 战报
1.2 神鹰的攻击
2. 猪偷走了什么？
3. Grunt
3.1 入门指南
3.2 Grunt 资源
4. Twitter Bower
4.1 Bower 资源
5. Yeoman
6. 攻击！
7. 结论
19 April 2013
原文：Angry Birds of JavaScript: Mighty Eagle - Automation
1. 简介 ⬆

一群无法无天的猪从无辜的小鸟那里偷走了所有的前端架构，现在小鸟们要把它们夺回来！一队特殊的小鸟英雄将攻击这些卑鄙的猪，直到夺回原本属于它们的前端 JavaScript 架构！
小鸟们最终会成功吗？它们会打败那些培根味儿的敌人吗？让我们一起揭示JavaScript之愤怒的小鸟系列的另一个扣人心弦的章节！

1.1 战报 ⬆
Red Bird - IIFE
Blue Bird - Events
Yellow Bird - RequireJS
Black Bird - Backbone
White Bird - Linting
Green Bird - Mocking
Orange Bird - Templating
Big Brother Bird - Patterns

1.2 神鹰的攻击 ⬆
在这篇文章中，我们将看看使用超级武器的神鹰，它用一套工具快速组织和部署其他小鸟到征服猪群的战斗中。渐渐的，小鸟们将一个接一个的夺回属于它们的东西！

2. 猪偷走了什么？ ⬆
随着时间的推移，小鸟们拿出了 RequireJS（黄鸟）、JSHint（白鸟）、Mustache（橙鸟）以及一堆其他伟大的工具，然后所有任务都需要一个命令行任务来完成。这很烦人，因为你不得不记住运行每个工具所需的事情。此外，很容易在关键时刻时忘记运行这些工具来更新 Web 应用。值得庆幸的是，有一天神鹰引入了一些工具让事情变得稍微容易一些。神鹰用 Grunt 和 Bowser 自动执行常见任务，并让项目可以很容易的引入必需的常用库。

However, during a recent invasion the pigs stole the birds' Gang of Foul book! As a result, one of the Big Brother Birds has been tasked to reclaim what has been stolen. He will use his overwhelming power of trickery to help destroy the pigs in order to take back what is theirs.

译注：这段原文应该有错误，本文介绍的是神鹰的自动化工具，不是大鸟哥的设计模式和有限自动机，因此暂不翻译。

3. Grunt ⬆
Grunt 是一个基于任务的命令行工具，用 JavaScript语言编写，用于自动执行前端应用的构建过程。社区被这个工具深深吸引，并产出了大量插件可供选择，例如自动化 CoffeeScript 编译、Handlebars 预编译、Less 支持、JSHint 检查等等...

事实上已经有几个大型项目在使用 Grunt 辅助自动执行构建过程以及其他任务，例如 Twitter、jQuery、Modernizr、Sauce Labs 等。

3.1 入门指南 ⬆
首选，你需要在 node 中用下面的命令安装 Grunt...

npm install -g grunt-cli grunt-init

安装 Grun 之后，每个项目需要两个主要的文件：

Gruntfile.js
package.json
Gruntfile.js ⬆

你可以从头创建自己的 Gruntfile.js，也可以从文件中拷贝一份初始 Gruntfile.js，或者使用项目脚手架 grunt-init gruntfile。如何安装脚手架请参阅 Grunt 的项目脚手架页面的介绍。下面的 Gruntfile.js 示例来自 Grunt 的入门指南页面...

module.exports = function(grunt) {
// Project configuration.
grunt.initConfig({
pkg: grunt.file.readJSON('package.json'),
uglify: {
options: {
banner: '/*! &lt;%= pkg.name %&gt; &lt;%= grunt.template.today(\"yyyy-mm-dd\") %&gt; */\\n'
},
build: {
src: 'src/&lt;%= pkg.name %&gt;.js',
dest: 'build/&lt;%= pkg.name %&gt;.min.js'
}
}
});

// Load the plugin that provides the \"uglify\" task.
grunt.loadNpmTasks('grunt-contrib-uglify');

// Default task(s).
grunt.registerTask('default', ['uglify']);
};

package.json ⬆

package.json 描述了项目名称、版本，以及可能有的依赖，例如 Grunt 和 Grunt 插件。你可以从 Grunt 的入门指南页面拷贝一份 package.json 示例...（如下所示）

{
\"name\": \"my-project-name\",
\"version\": \"0.1.0\",
\"devDependencies\": {
\"grunt\": \"~0.4.1\",
\"grunt-contrib-jshint\": \"~0.1.1\",
\"grunt-contrib-nodeunit\": \"~0.1.2\"
}
}

Grunt 插件 ⬆

现在一切就绪，你可以使用一整套插件开始自动执行任务。这里有几个有趣的插件，你可以会喜欢...

grunt-contrib-coffee - 把 CoffeeScript 编译为 JavaScript
grunt-contrib-compass - 把 Compass 编译为 CSS
grunt-contrib-concat - 合并文件
grunt-contrib-connect - 启动一个 Web 服务
grunt-contrib-csslint - 检查 CSS 文件
grunt-contrib-handlebars - 预编译 Handlebar 模板
grunt-contrib-htmlmin - 压缩 HTML 代码
grunt-contrib-imagemin - 演说 PNG 和 JPEG 图片
grunt-contrib-jshint - 用 JSHint 检查文件
grunt-contrib-less - 把 LESS 编译为 CSS
grunt-contrib-nodeunit - 运行 Nodeunit 单元测试
grunt-contrib-watch - 当文件发生变化时运行与定义任务
grunt-contrib-requirejs - 使用 r.js 优化 RequireJS 项目
grunt-contrib-uglify - 用 UglifyJS 压缩文件
grunt-contrib-yuidoc - 编译 YUIDocs 文档
... more ...
jQuery 的 Gruntfile ⬆

我从 GitHub 上拉去了一份 jQuery，用来查看 jQuery 是如何使用 Grunt 的，下面是执行 Grunt 时得到的输出。

If you look closely you'll notice they update their git submodules, build a version of jQuery from it's modules, run JSHint against the built jquery.js and tests files, creates sourcemaps, and runs a special compare file size task. If you dig deep into their Gruntfile you'll find they've also setup a custom way to run their unit tests against Browserstack, which is pretty cool if you ask me ;) 如果你仔细上面的图看会发现执行了以下任务：更新 Git 子模块（Sizzle、QUnit），构建 jQuery 的一个版本，对构建的 jquery.js 执行 JSHint 检查，创建 Source Maps，并运行一个比较指定的文件大小的任务。如果你深挖 Gruntfile.js 的话，你还会发现它自定义了一种不同于 Browserstack 的方式来运行单元测试。

译注：JavaScript Source Map 详解, Source Map Revision 3 Proposal, Introduction to JavaScript Source Maps, BrowserStack

Modernizr 的 Gruntfile ⬆

我用同样的方式拉取了 Modernizr 库，然后输入 grunt qunit 观察它的 746 项单元测试的测试过程，并在 369ms 内测试通过，测试使用了无界面的浏览器引擎 PhantomJS。

译注：PhantomJS, PhantomJS 中文主页

3.2 Grunt 资源 ⬆
这篇文章的目的不是教你了解 Grunt，而是为了让你意识到它的存在，如果你还不知道的话。这个一个非常棒的工具，用来帮助你自动化所有前端事务。参阅下面的资源，可以帮助你理解如何开始...

译注：知其意而不能言其意，汗颜呐。
The Grunt Basics by Cary Landholt (@carylandholt)
Grunt.js Workflow by Merrick Christensen (@iammerrick)
Meet Grunt: The Build Tool for JavavScript by Andrew Burgess (@andrew8088)

4. Twitter Bower ⬆
译注：bower - 凉亭，树阴处

使用 Node 或 Ruby 的开发人员可能已经熟悉了 npm 或 gems，但是对于浏览器脚本和样式没有类似的工具...至少到目前为止！

Twitter Bower 项目旨在通过 Web（HTML、CSS 和 JavaScript）提供一套包管理器来解决这个问题。

npm install -g bower

安装 Bower 之后你就可以开始下载库！，例如，我们想拉去最新版本的 jQuery，只需要运行 bower install jquery，然后你会看到下面的输出...

4.1 Bower 资源 ⬆
如果想更多的了解 Bower，建议去看看下面的这些好资源。

Meet Bower: A Package Manager For The Web by Andrew Burgess (@andrew8088)
A RequireJS, Backbone, and Bower Starter Template by Jeffrey Way (@jeffrey_way)

5. Yeoman ⬆
译注：yeoman - 自耕农，自由民，仆人

Yeoman 项目是一款与 Grunt 和 Bower 协同工作的脚手架引擎。可以让你的应用快速运行起来。要使用 Yeoman，你需要先用下面的语法安装它...
1
npm install -g yo grunt-cli bower

Yeoman 安装之后，你可以生成各种不同类型的项目。在下面的的截图中，我用 Yeoman 创建了一个 Web 应用。在按我的需求订制应用的过程中，它会问几个问题。

还有其他的脚手架，例如 Backbone、AngularJS 等，你可以安装它们，然后开始你的项目。可以在 Yeoman 的 GitHub 页面看到更多的生成器列表。

例如在下面的截图中，我先创建了一个新的 Backbone 应用，然后立即创建了一个新的 bird 模型。

Yeoman 目前是 1.0 测试版，网站上说在 Windows 下有一些问题。虽然我已经能用它做一些扩展，但是我敢肯定有一些计划完全支持的功能尚不支持。

6. 攻击！ ⬆
下面是一个用 boxbox 构建的简版 Angry Birds，boxbox 是一个用于 box2dweb 的框架，由 Bocoup 的 Greg Smith 编写。
按下空格键来发射神鹰，你也可以使用方向键。

7. 结论 ⬆
拥抱 Grunt、Bower 和 Yeoman 可以帮助自动化开发、测试、部署过程中的各个环节。这些工具的社区非常活跃，你可以在上面找到满足你应用需求的插件。

@sunnylost 补充：Dun, dun, daaaaaaaaaa! 应该是在模拟背景音乐，类似于这种 http://missingno.ocremix.org/musicpages/game_on.html",
          "wp:post_id": "1032",
          "wp:post_date": "2014-12-19 13:33:13",
          "wp:post_date_gmt": "2014-12-19 05:33:13",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "%e5%89%8d%e7%ab%af-javascript-%e6%9e%b6%e6%9e%849-%e8%87%aa%e5%8a%a8%e5%8c%96-automation",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "%e5%89%8d%e7%ab%af-javascript-%e6%9e%b6%e6%9e%84",
            "#cdata-section": "前端 JavaScript 架构"
          },
          "wp:postmeta": [
            {
              "wp:meta_key": "_edit_last",
              "wp:meta_value": "1"
            },
            {
              "wp:meta_key": "_wpas_done_all",
              "wp:meta_value": "1"
            },
            {
              "wp:meta_key": "_yoast_wpseo_linkdex",
              "wp:meta_value": "74"
            },
            {
              "wp:meta_key": "_aioseop_title",
              "wp:meta_value": "9 自动化 Automation"
            },
            {
              "wp:meta_key": "_aioseop_keywords",
              "wp:meta_value": "9 自动化 Automation"
            },
            {
              "wp:meta_key": "_aioseop_description",
              "wp:meta_value": "9 自动化 Automation"
            },
            {
              "wp:meta_key": "_yoast_wpseo_focuskw",
              "wp:meta_value": "9 自动化 Automation"
            },
            {
              "wp:meta_key": "_yoast_wpseo_metadesc",
              "wp:meta_value": "9 自动化 Automation"
            },
            {
              "wp:meta_key": "_yoast_wpseo_metakeywords",
              "wp:meta_value": "9 自动化 Automation"
            }
          ]
        },
        {
          "title": "CSS3 Media Queries案例——Hicksdesign",
          "link": "http://www.pernav.com/css3-media-queries%e6%a1%88%e4%be%8b-hicksdesign/",
          "pubDate": "Mon, 29 Dec 2014 09:06:31 +0000",
          "dc:creator": "Osmond",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://www.pernav.com/?p=1040"
          },
          "content:encoded": "前面在《CSS3 Media Queries》介绍了一些CSS3的Media Query的理论知识，今天开始主要针对CSS3 Media Query进行一些实际案例的分析，从实际案例中来进一步学习和运用CSS3的Media Query，从而好让大家在自己的项目中更好的应用Media Query。
今天我们一起来看第一个案例Hicksdesign网站，这个网站就是一个典型的实例，他在不同的分辨下，所展示的效果是不同的，其总共有四种：

大尺寸具有三列侧栏
尺寸稍微缩小一点具有两列侧栏，中间的一列下降到左边一栏下面
尺寸再次缩小具有一列边栏，而且右边栏定位到logo下面
尺寸最小没有边栏，logo和边栏重新定位
请看下面的截图

下面我们一起来看看其实现的代码，先看其Html代码：
<pre class=\"lang:default decode:true\">&lt;div class=\"page\"&gt;
&lt;h2 class=\"logo\"&gt;&lt;/h2&gt;
&lt;nav&gt;
&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;
&lt;div id=\"content\"&gt;
&lt;header&gt;
&lt;div class=\"icon\"&gt;&lt;/div&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;/header&gt;
&lt;div id=\"main\"&gt;
&lt;article&gt;&lt;/article&gt;
&lt;article&gt;&lt;/article&gt;
&lt;article&gt;&lt;/article&gt;
&lt;/div&gt;
&lt;div id=\"side\"&gt;
&lt;ection&gt;&lt;/section&gt;
&lt;section&gt;&lt;/section&gt;
&lt;section&gt;&lt;/section&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;footer&gt;&lt;/footer&gt;
&lt;/div&gt;</pre>
&nbsp;

先把上面的各个部分切成块，如下图所示

下面是Media Query应用的关建，前面也说过，Media Query主要是在不同媒介和媒体类型中应用不同的css样式，从而达到不同的显示风格，接下来先来看这个网站主体框架的全局样式：
<pre class=\"lang:default decode:true \">/*Main Layout*/
.page {
margin: 0 8%; 
}

.logo {
margin: 0 0 1em 78%;
padding: 44px 0 0 0;
}

nav {
overflow: hidden; /*clear floats*/
width: 22%;
float: right;
margin: 0 0 0 3%;
}

header {
position: relative;
margin: -40px 0 1em 0;
padding: 0 0 1em 0;
width: 70%;
}

.icon {
float: right;
width: 25%;
text-align: center;
margin-left: 2em;
}

.icon img {
width: 100%;
height: auto;
}

#content {
width: 100%;
padding: 0 0 3em 0;
}

#main {
width: 72%;
float: left;
padding: 0 0 6em 0;
}

#side {
float: right;
width: 22%;
padding: ;
}

footer {
clear: both;
border-top: 2px dotted #ccc;
padding: 1.5em 0 3em 0;
}

/*Articles*/

article {
margin: 0 0 1em 0;
padding: 0 0 0.5em 0;
border-bottom: 2px dotted #ccc;
}

article img {
height: auto;
max-width: 100%;
}

/*Side items*/

section{
margin: 0 0 1em 0;
}

#side section{
margin: 0 0 3em 0;
}
/* @end */</pre>
&nbsp;
这里面和我们平时布局有几个不同之处，第一点：布局采用的是流动布局，其基本原理是使用相对尺寸、结合百分比和em，用简单的分割以找到相对应的像素宽度。第二字体采用的是em，采用这两个的好处就是，我们布局随浏览器分辨率改变时其大小也会相应做出调整。大家都知道以百分比和em为单位都是一个相对值。其计算方法并不相同。百分比是相对于其父元素，而em为单位值主要根据body中的初始字体值而定值。下面我们简单看一下百分比布局是如何开成的，创建这样的流动布局的第一步是首先创建一个固定宽度结构框架，如我们平时用到的980布局：

从上图中可以清晰的看到一个980px的固定布局，上图中标注了每一块的宽度和相关间距，那现在主要看如何将上面的固定布局转换成流动布局，关键是要使这一布局在任何分辨率下保持其比例，就需要把980px的宽度改为100％，然后按比例计算出每一块的百分比值，如下图所示：

为了让布局不会被破坏，我个人认为可以将所计算出来的百分比往低取值，比如上图的右边栏，可以取值22％，这样趋于安全性考虑，另外有关于margin大家可以使用百分比，也可以使用硬性的值px，这两者有其各自的长处，大家可以自己去体会，有关于更多的百分比布局，可以点击这里。

接着在简单的介绍一下有关于em的使用。em是一人可变的长度值单位，1em的长度就是一个字型的长度。如果当前字体大小的默认值 是12px,那么1em=12px，如果默认设置是16px那么此时1em=16px。使用em好处是，调整文字大小，会按比例调 整。你可以将body中的字体大小设置为62.5%，此时字体大小就是默认16px下的10px，方便计算，值得一提的是，em值和body中设置的基准字体值有关系，大家可以看下面一张对应比，更能反映出em的变化。

px和em他们具体如何转换，大家可以使用这个PXtoEM工具

定好全局布局，我们的工作就完成一半了，现在关键是应用CSS3 Media Query如何实现不同媒体类型和媒体条件下的样式，下面是从Hicksdesign中扣出的关于Media Query 代码：

/* @group Responsive Typesetting */

@media screen and (max-width: 500px) {
nav ul{font-size: 0.75em;}}

@media screen and (max-width: 800px) {
body { font-size: 95%; }}

@media screen and (min-width: 1024px) {
body { font-size: 105%; }}

上面代码是在不同条件下的body基准字体的设置，因为这个东西直接影响到了我们布局的相关参数的大小。接下来在看看布局排列的样式
/*屏幕小于600px的PC浏览器, iPhone和mobiles时的样式*/
<pre class=\"lang:default decode:true \">@media handheld and (max-width: 480px), screen and (max-device-width: 480px), screen and (max-width: 600px) {

html {
background-color: #f9f2e3;
padding: 12px;
}
body {
margin: 0; 
padding: 16px;
}
.page {
margin: 0; 
}
.logo {
margin: 0;
background-position: center top;
text-align: center;
}
header {
overflow: hidden;
margin: 0 0 1em 0; 
min-height: 1em;
width: auto;
}

nav {
margin: 1em 0;
width: auto;
float: none;
text-align: center;
}

#side {
float: none;
width: auto;
}

#main {
width: auto;
float: none;
padding: 0 0 2em 0;
}
#side {
border-top: 2px dotted #ccc;
padding: 1.5em 0 3em 0;
}

#side section {
margin: 0 0 1em 0;
}

}</pre>
&nbsp;

/*屏幕大于或等于900px是时的布局样式*/
<pre class=\"lang:default decode:true \">@media screen and (min-width: 920px) {
nav, 
.logo, 
footer { 
width: 16%;
position: fixed;
right: 8%;
z-index: 100;
}
header {margin: 0 0 1em 0;width: auto;}
.logo { top: 40px; }
nav { top: 255px; bottom: 20px; /*background: url(/images/corner-small.png) no-repeat left bottom;*/ }

#content { width: 76%; }
.body { padding: 0 0 0 3.8em;}
footer {
bottom: 2px;
padding: 0;
border: 0;
}
.icon img { width: auto; }

}</pre>
&nbsp;

/*屏幕大于或等于1350px的布局样式*/
<pre class=\"lang:default decode:true \">@media screen and (min-width: 1350px) {

#side, .icon { width: 32%; }
#main { width: 60%; }

#side section {
width: 46%;
margin: 0 8% 2em 0;
float: left;
}

#side section:nth-child(odd) { clear: left; }
#side section:nth-child(even) { margin: 0 0 2em 0; }</pre>
&nbsp;

/*屏幕大于或等于1500px时的布局样式*/
<pre class=\"lang:default decode:true \">@media screen and (min-width: 1500px) {
.page { margin: 0 8% 0 12%; }
}

/*iPhone*/
@media only screen and (max-device-width: 480px) {
h2 {
letter-spacing: 0;
text-transform: capitalize;
}
}</pre>
&nbsp;

/*iPad */
<pre class=\"lang:default decode:true \">@media only screen and (min-device-width: 768px) and (max-device-width: 1024px) {
html {background-color: #f9f2e3;padding: 12px;}
body { margin: 0; padding: 66px 24px 24px 24px;}
.page { margin: 0; } 
footer {clear: both;position: static;}
}
</pre>
&nbsp;
上面代码仅供参考，中间省略部分元素的美化样式，这里贴出来主要让大家心中有一个Media Query运用的概念存在。Hicksdesign主要运用了以下几种Media Query:
<pre class=\"lang:default decode:true \">/*屏幕小于600px的PC浏览器, iPhone和mobiles时的样式*/
@media handheld and (max-width: 480px), screen and (max-device-width: 480px), screen and (max-width: 600px) {
//css 代码写在这里
}
/*屏幕大于或等于900px是时的布局样式*/
@media screen and (min-width: 920px) {
//css 代码写在这里
}

/*屏幕大于或等于1350px的布局样式*/
@media screen and (min-width: 1350px) {
//css 代码写在这里
｝

/*屏幕大于或等于1500px时的布局样式*/
@media screen and (min-width: 1500px) {
//css 代码写在这里
}

/*iPhone*/
@media only screen and (max-device-width: 480px) {
//css 代码写在这里
}

/*iPad */
@media only screen and (min-device-width: 768px) and (max-device-width: 1024px) {
//css 代码写在这里
}</pre>
&nbsp;
在此特意点出一点，这个网站关于图片的应用，如果你仔细的话，不难发现，这里图片也会随着比例变化，其主要实现的代码是

.icon img {
height: auto;
width: 100%;
}

.icon img {
width: auto;
}

宽度使用了100％而高度是auto，请看下在的对比图

这样一来就写出了前面一开始显示的各种图片的效果。可能没有说到关键，和比较零乱不具有逻辑性。但最后我还是想总结一下我个人的理解首先应用固定布局转换成流体布局，以适应不同分辨率下的比例，更好的适应不同分辨率用户使用；然后结合CSS Media Query在不同的媒体类型和媒体特性下构造不同的样式，从而达到在不同分辨率下显示不同风格的页面效果。

&nbsp;",
          "wp:post_id": "1040",
          "wp:post_date": "2014-12-29 17:06:31",
          "wp:post_date_gmt": "2014-12-29 09:06:31",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "css3-media-queries%e6%a1%88%e4%be%8b-hicksdesign",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "moblie",
            "#cdata-section": "MOBLIE"
          },
          "wp:postmeta": [
            {
              "wp:meta_key": "_edit_last",
              "wp:meta_value": "1"
            },
            {
              "wp:meta_key": "_wpas_done_all",
              "wp:meta_value": "1"
            },
            {
              "wp:meta_key": "_aioseop_title",
              "wp:meta_value": "CSS3 Media Queries案例——Hicksdesign"
            },
            {
              "wp:meta_key": "_aioseop_description",
              "wp:meta_value": "CSS3 Media Queries案例——Hicksdesign"
            },
            {
              "wp:meta_key": "_aioseop_keywords",
              "wp:meta_value": "CSS3 Media Queries案例——Hicksdesign"
            },
            {
              "wp:meta_key": "_yoast_wpseo_focuskw",
              "wp:meta_value": "CSS3 Media Queries案例——Hicksdesign"
            },
            {
              "wp:meta_key": "_yoast_wpseo_metadesc",
              "wp:meta_value": "CSS3 Media Queries案例——Hicksdesign"
            },
            {
              "wp:meta_key": "_yoast_wpseo_metakeywords",
              "wp:meta_value": "CSS3 Media Queries案例——Hicksdesign"
            },
            {
              "wp:meta_key": "_yoast_wpseo_linkdex",
              "wp:meta_value": "74"
            }
          ],
          "wp:comment": {
            "wp:comment_id": "13",
            "wp:comment_author": "a2242441813",
            "wp:comment_author_email": "2242441813@qq.com",
            "wp:comment_author_url": "http://www.a2242441813.94zhuan.com/",
            "wp:comment_author_IP": "112.246.13.174",
            "wp:comment_date": "2015-06-17 09:14:03",
            "wp:comment_date_gmt": "2015-06-17 01:14:03",
            "wp:comment_content": "我就是随便看看",
            "wp:comment_approved": "trash",
            "wp:comment_parent": "0",
            "wp:comment_user_id": "0",
            "wp:commentmeta": [
              {
                "wp:meta_key": "akismet_result",
                "wp:meta_value": "false"
              },
              {
                "wp:meta_key": "akismet_history",
                "wp:meta_value": "a:4:{s:4:\"time\";d:1434503643.48468303680419921875;s:7:\"message\";s:31:\"Akismet检查通过了此评论\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}"
              },
              {
                "wp:meta_key": "akismet_history",
                "wp:meta_value": "a:3:{s:4:\"time\";d:1445765634.309340000152587890625;s:5:\"event\";s:12:\"status-trash\";s:4:\"user\";s:6:\"Osmond\";}"
              },
              {
                "wp:meta_key": "_wp_trash_meta_status",
                "wp:meta_value": "0"
              },
              {
                "wp:meta_key": "_wp_trash_meta_time",
                "wp:meta_value": "1445765634"
              }
            ]
          }
        }
      ]
    }
  }
}